
Robotic_arm_project_sm_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f8  080030f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080030f8  080030f8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f8  080030f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  24000010  08003110  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000094  08003110  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147cd  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002397  00000000  00000000  0003480b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  00036ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  00037788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003451b  00000000  00000000  00038280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c93  00000000  00000000  0006c79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014ef51  00000000  00000000  0007642e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c537f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003060  00000000  00000000  001c53fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080030d0 	.word	0x080030d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080030d0 	.word	0x080030d0

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002dc:	2003      	movs	r0, #3
 80002de:	f000 f987 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e2:	f001 f905 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80002e6:	4601      	mov	r1, r0
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <HAL_Init+0x60>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <HAL_Init+0x64>)
 80002f4:	5cd3      	ldrb	r3, [r2, r3]
 80002f6:	f003 031f 	and.w	r3, r3, #31
 80002fa:	fa21 f303 	lsr.w	r3, r1, r3
 80002fe:	4a10      	ldr	r2, [pc, #64]	; (8000340 <HAL_Init+0x68>)
 8000300:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <HAL_Init+0x60>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	490b      	ldr	r1, [pc, #44]	; (800033c <HAL_Init+0x64>)
 8000310:	5ccb      	ldrb	r3, [r1, r3]
 8000312:	f003 031f 	and.w	r3, r3, #31
 8000316:	fa22 f303 	lsr.w	r3, r2, r3
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <HAL_Init+0x6c>)
 800031c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f812 	bl	8000348 <HAL_InitTick>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800032a:	2301      	movs	r3, #1
 800032c:	e002      	b.n	8000334 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800032e:	f002 fcf1 	bl	8002d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	bd80      	pop	{r7, pc}
 8000338:	58024400 	.word	0x58024400
 800033c:	080030e8 	.word	0x080030e8
 8000340:	24000008 	.word	0x24000008
 8000344:	2400000c 	.word	0x2400000c

08000348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <HAL_InitTick+0x60>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000358:	2301      	movs	r3, #1
 800035a:	e021      	b.n	80003a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <HAL_InitTick+0x64>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <HAL_InitTick+0x60>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4619      	mov	r1, r3
 8000366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036a:	fbb3 f3f1 	udiv	r3, r3, r1
 800036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f96f 	bl	8000656 <HAL_SYSTICK_Config>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800037e:	2301      	movs	r3, #1
 8000380:	e00e      	b.n	80003a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b0f      	cmp	r3, #15
 8000386:	d80a      	bhi.n	800039e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000388:	2200      	movs	r2, #0
 800038a:	6879      	ldr	r1, [r7, #4]
 800038c:	f04f 30ff 	mov.w	r0, #4294967295
 8000390:	f000 f939 	bl	8000606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <HAL_InitTick+0x68>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800039a:	2300      	movs	r3, #0
 800039c:	e000      	b.n	80003a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800039e:	2301      	movs	r3, #1
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	24000004 	.word	0x24000004
 80003ac:	24000008 	.word	0x24000008
 80003b0:	24000000 	.word	0x24000000

080003b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_IncTick+0x20>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_IncTick+0x24>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_IncTick+0x24>)
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	24000004 	.word	0x24000004
 80003d8:	2400002c 	.word	0x2400002c

080003dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  return uwTick;
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <HAL_GetTick+0x14>)
 80003e2:	681b      	ldr	r3, [r3, #0]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2400002c 	.word	0x2400002c

080003f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003fc:	f7ff ffee 	bl	80003dc <HAL_GetTick>
 8000400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800040c:	d005      	beq.n	800041a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_Delay+0x40>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	461a      	mov	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4413      	add	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800041a:	bf00      	nop
 800041c:	f7ff ffde 	bl	80003dc <HAL_GetTick>
 8000420:	4602      	mov	r2, r0
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	429a      	cmp	r2, r3
 800042a:	d8f7      	bhi.n	800041c <HAL_Delay+0x28>
  {
  }
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	24000004 	.word	0x24000004

08000438 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <HAL_GetREVID+0x14>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	0c1b      	lsrs	r3, r3, #16
}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	5c001000 	.word	0x5c001000

08000450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f003 0307 	and.w	r3, r3, #7
 800045e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <__NVIC_SetPriorityGrouping+0x40>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <__NVIC_SetPriorityGrouping+0x44>)
 800047a:	4313      	orrs	r3, r2
 800047c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <__NVIC_SetPriorityGrouping+0x40>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	e000ed00 	.word	0xe000ed00
 8000494:	05fa0000 	.word	0x05fa0000

08000498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <__NVIC_GetPriorityGrouping+0x18>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	f003 0307 	and.w	r3, r3, #7
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	db0b      	blt.n	80004de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	f003 021f 	and.w	r2, r3, #31
 80004cc:	4907      	ldr	r1, [pc, #28]	; (80004ec <__NVIC_EnableIRQ+0x38>)
 80004ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d2:	095b      	lsrs	r3, r3, #5
 80004d4:	2001      	movs	r0, #1
 80004d6:	fa00 f202 	lsl.w	r2, r0, r2
 80004da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000e100 	.word	0xe000e100

080004f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000500:	2b00      	cmp	r3, #0
 8000502:	db0a      	blt.n	800051a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	b2da      	uxtb	r2, r3
 8000508:	490c      	ldr	r1, [pc, #48]	; (800053c <__NVIC_SetPriority+0x4c>)
 800050a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050e:	0112      	lsls	r2, r2, #4
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	440b      	add	r3, r1
 8000514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000518:	e00a      	b.n	8000530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4908      	ldr	r1, [pc, #32]	; (8000540 <__NVIC_SetPriority+0x50>)
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	f003 030f 	and.w	r3, r3, #15
 8000526:	3b04      	subs	r3, #4
 8000528:	0112      	lsls	r2, r2, #4
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	440b      	add	r3, r1
 800052e:	761a      	strb	r2, [r3, #24]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	; 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f003 0307 	and.w	r3, r3, #7
 8000556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	f1c3 0307 	rsb	r3, r3, #7
 800055e:	2b04      	cmp	r3, #4
 8000560:	bf28      	it	cs
 8000562:	2304      	movcs	r3, #4
 8000564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3304      	adds	r3, #4
 800056a:	2b06      	cmp	r3, #6
 800056c:	d902      	bls.n	8000574 <NVIC_EncodePriority+0x30>
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	3b03      	subs	r3, #3
 8000572:	e000      	b.n	8000576 <NVIC_EncodePriority+0x32>
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000578:	f04f 32ff 	mov.w	r2, #4294967295
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43da      	mvns	r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	401a      	ands	r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058c:	f04f 31ff 	mov.w	r1, #4294967295
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43d9      	mvns	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	4313      	orrs	r3, r2
         );
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3724      	adds	r7, #36	; 0x24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005bc:	d301      	bcc.n	80005c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005be:	2301      	movs	r3, #1
 80005c0:	e00f      	b.n	80005e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <SysTick_Config+0x40>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005ca:	210f      	movs	r1, #15
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f7ff ff8e 	bl	80004f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SysTick_Config+0x40>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <SysTick_Config+0x40>)
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	e000e010 	.word	0xe000e010

080005f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff29 	bl	8000450 <__NVIC_SetPriorityGrouping>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000614:	f7ff ff40 	bl	8000498 <__NVIC_GetPriorityGrouping>
 8000618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	6978      	ldr	r0, [r7, #20]
 8000620:	f7ff ff90 	bl	8000544 <NVIC_EncodePriority>
 8000624:	4602      	mov	r2, r0
 8000626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff5f 	bl	80004f0 <__NVIC_SetPriority>
}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff33 	bl	80004b4 <__NVIC_EnableIRQ>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffa4 	bl	80005ac <SysTick_Config>
 8000664:	4603      	mov	r3, r0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000670:	b480      	push	{r7}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800067e:	4b89      	ldr	r3, [pc, #548]	; (80008a4 <HAL_GPIO_Init+0x234>)
 8000680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000682:	e194      	b.n	80009ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	2b00      	cmp	r3, #0
 8000698:	f000 8186 	beq.w	80009a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d003      	beq.n	80006ac <HAL_GPIO_Init+0x3c>
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b12      	cmp	r3, #18
 80006aa:	d123      	bne.n	80006f4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	08da      	lsrs	r2, r3, #3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3208      	adds	r2, #8
 80006b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	f003 0307 	and.w	r3, r3, #7
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	220f      	movs	r2, #15
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	69ba      	ldr	r2, [r7, #24]
 80006cc:	4013      	ands	r3, r2
 80006ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	691a      	ldr	r2, [r3, #16]
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	08da      	lsrs	r2, r3, #3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3208      	adds	r2, #8
 80006ee:	69b9      	ldr	r1, [r7, #24]
 80006f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2203      	movs	r2, #3
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	69ba      	ldr	r2, [r7, #24]
 8000708:	4013      	ands	r3, r2
 800070a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	f003 0203 	and.w	r2, r3, #3
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	4313      	orrs	r3, r2
 8000720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d00b      	beq.n	8000748 <HAL_GPIO_Init+0xd8>
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d007      	beq.n	8000748 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073c:	2b11      	cmp	r3, #17
 800073e:	d003      	beq.n	8000748 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b12      	cmp	r3, #18
 8000746:	d130      	bne.n	80007aa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	2203      	movs	r2, #3
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	4013      	ands	r3, r2
 800075e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	4313      	orrs	r3, r2
 8000770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800077e:	2201      	movs	r2, #1
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	4013      	ands	r3, r2
 800078c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	f003 0201 	and.w	r2, r3, #1
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2203      	movs	r2, #3
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	4013      	ands	r3, r2
 80007c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 80e0 	beq.w	80009a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <HAL_GPIO_Init+0x238>)
 80007ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007ee:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <HAL_GPIO_Init+0x238>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <HAL_GPIO_Init+0x238>)
 80007fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <HAL_GPIO_Init+0x23c>)
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	3302      	adds	r3, #2
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	220f      	movs	r2, #15
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <HAL_GPIO_Init+0x240>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d052      	beq.n	80008d8 <HAL_GPIO_Init+0x268>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <HAL_GPIO_Init+0x244>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d031      	beq.n	800089e <HAL_GPIO_Init+0x22e>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <HAL_GPIO_Init+0x248>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d02b      	beq.n	800089a <HAL_GPIO_Init+0x22a>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <HAL_GPIO_Init+0x24c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d025      	beq.n	8000896 <HAL_GPIO_Init+0x226>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <HAL_GPIO_Init+0x250>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d01f      	beq.n	8000892 <HAL_GPIO_Init+0x222>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <HAL_GPIO_Init+0x254>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d019      	beq.n	800088e <HAL_GPIO_Init+0x21e>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <HAL_GPIO_Init+0x258>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d013      	beq.n	800088a <HAL_GPIO_Init+0x21a>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_GPIO_Init+0x25c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d00d      	beq.n	8000886 <HAL_GPIO_Init+0x216>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <HAL_GPIO_Init+0x260>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d007      	beq.n	8000882 <HAL_GPIO_Init+0x212>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <HAL_GPIO_Init+0x264>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d101      	bne.n	800087e <HAL_GPIO_Init+0x20e>
 800087a:	2309      	movs	r3, #9
 800087c:	e02d      	b.n	80008da <HAL_GPIO_Init+0x26a>
 800087e:	230a      	movs	r3, #10
 8000880:	e02b      	b.n	80008da <HAL_GPIO_Init+0x26a>
 8000882:	2308      	movs	r3, #8
 8000884:	e029      	b.n	80008da <HAL_GPIO_Init+0x26a>
 8000886:	2307      	movs	r3, #7
 8000888:	e027      	b.n	80008da <HAL_GPIO_Init+0x26a>
 800088a:	2306      	movs	r3, #6
 800088c:	e025      	b.n	80008da <HAL_GPIO_Init+0x26a>
 800088e:	2305      	movs	r3, #5
 8000890:	e023      	b.n	80008da <HAL_GPIO_Init+0x26a>
 8000892:	2304      	movs	r3, #4
 8000894:	e021      	b.n	80008da <HAL_GPIO_Init+0x26a>
 8000896:	2303      	movs	r3, #3
 8000898:	e01f      	b.n	80008da <HAL_GPIO_Init+0x26a>
 800089a:	2302      	movs	r3, #2
 800089c:	e01d      	b.n	80008da <HAL_GPIO_Init+0x26a>
 800089e:	2301      	movs	r3, #1
 80008a0:	e01b      	b.n	80008da <HAL_GPIO_Init+0x26a>
 80008a2:	bf00      	nop
 80008a4:	58000080 	.word	0x58000080
 80008a8:	58024400 	.word	0x58024400
 80008ac:	58000400 	.word	0x58000400
 80008b0:	58020000 	.word	0x58020000
 80008b4:	58020400 	.word	0x58020400
 80008b8:	58020800 	.word	0x58020800
 80008bc:	58020c00 	.word	0x58020c00
 80008c0:	58021000 	.word	0x58021000
 80008c4:	58021400 	.word	0x58021400
 80008c8:	58021800 	.word	0x58021800
 80008cc:	58021c00 	.word	0x58021c00
 80008d0:	58022000 	.word	0x58022000
 80008d4:	58022400 	.word	0x58022400
 80008d8:	2300      	movs	r3, #0
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	f002 0203 	and.w	r2, r2, #3
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	4093      	lsls	r3, r2
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008ea:	4938      	ldr	r1, [pc, #224]	; (80009cc <HAL_GPIO_Init+0x35c>)
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3302      	adds	r3, #2
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	43db      	mvns	r3, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4013      	ands	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800094c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	43db      	mvns	r3, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4013      	ands	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800097a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80009a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	3301      	adds	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	fa22 f303 	lsr.w	r3, r2, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f47f ae63 	bne.w	8000684 <HAL_GPIO_Init+0x14>
  }
}
 80009be:	bf00      	nop
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	58000400 	.word	0x58000400

080009d0 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_PWREx_ConfigSupply+0x6c>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d008      	beq.n	80009f6 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_PWREx_ConfigSupply+0x6c>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d001      	beq.n	80009f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e01d      	b.n	8000a32 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_PWREx_ConfigSupply+0x6c>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	f023 0207 	bic.w	r2, r3, #7
 80009fe:	490f      	ldr	r1, [pc, #60]	; (8000a3c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a06:	f7ff fce9 	bl	80003dc <HAL_GetTick>
 8000a0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000a0c:	e009      	b.n	8000a22 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8000a0e:	f7ff fce5 	bl	80003dc <HAL_GetTick>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a1c:	d901      	bls.n	8000a22 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e007      	b.n	8000a32 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2e:	d1ee      	bne.n	8000a0e <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024800 	.word	0x58024800

08000a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e3a4      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8087 	beq.w	8000b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a60:	4b9a      	ldr	r3, [pc, #616]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a6a:	4b98      	ldr	r3, [pc, #608]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	2b10      	cmp	r3, #16
 8000a74:	d007      	beq.n	8000a86 <HAL_RCC_OscConfig+0x46>
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	2b18      	cmp	r3, #24
 8000a7a:	d110      	bne.n	8000a9e <HAL_RCC_OscConfig+0x5e>
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d10b      	bne.n	8000a9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a86:	4b91      	ldr	r3, [pc, #580]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d06c      	beq.n	8000b6c <HAL_RCC_OscConfig+0x12c>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d168      	bne.n	8000b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e37e      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa6:	d106      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x76>
 8000aa8:	4b88      	ldr	r3, [pc, #544]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a87      	ldr	r2, [pc, #540]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e02e      	b.n	8000b14 <HAL_RCC_OscConfig+0xd4>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10c      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x98>
 8000abe:	4b83      	ldr	r3, [pc, #524]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a82      	ldr	r2, [pc, #520]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b80      	ldr	r3, [pc, #512]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a7f      	ldr	r2, [pc, #508]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e01d      	b.n	8000b14 <HAL_RCC_OscConfig+0xd4>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ae0:	d10c      	bne.n	8000afc <HAL_RCC_OscConfig+0xbc>
 8000ae2:	4b7a      	ldr	r3, [pc, #488]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a79      	ldr	r2, [pc, #484]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a76      	ldr	r2, [pc, #472]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e00b      	b.n	8000b14 <HAL_RCC_OscConfig+0xd4>
 8000afc:	4b73      	ldr	r3, [pc, #460]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a72      	ldr	r2, [pc, #456]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b70      	ldr	r3, [pc, #448]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a6f      	ldr	r2, [pc, #444]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d013      	beq.n	8000b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fc5e 	bl	80003dc <HAL_GetTick>
 8000b20:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b24:	f7ff fc5a 	bl	80003dc <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b64      	cmp	r3, #100	; 0x64
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e332      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b36:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f0      	beq.n	8000b24 <HAL_RCC_OscConfig+0xe4>
 8000b42:	e014      	b.n	8000b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b44:	f7ff fc4a 	bl	80003dc <HAL_GetTick>
 8000b48:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4c:	f7ff fc46 	bl	80003dc <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e31e      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f0      	bne.n	8000b4c <HAL_RCC_OscConfig+0x10c>
 8000b6a:	e000      	b.n	8000b6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80b0 	beq.w	8000cdc <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b7c:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000b84:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b86:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x162>
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	2b18      	cmp	r3, #24
 8000b96:	d149      	bne.n	8000c2c <HAL_RCC_OscConfig+0x1ec>
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d144      	bne.n	8000c2c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d005      	beq.n	8000bba <HAL_RCC_OscConfig+0x17a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e2f0      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bba:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 0219 	bic.w	r2, r3, #25
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	4941      	ldr	r1, [pc, #260]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fc06 	bl	80003dc <HAL_GetTick>
 8000bd0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bd4:	f7ff fc02 	bl	80003dc <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e2da      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf2:	f7ff fc21 	bl	8000438 <HAL_GetREVID>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f241 0303 	movw	r3, #4099	; 0x1003
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_RCC_OscConfig+0x1d6>
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	031b      	lsls	r3, r3, #12
 8000c0e:	492f      	ldr	r1, [pc, #188]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c10:	4313      	orrs	r3, r2
 8000c12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c14:	e062      	b.n	8000cdc <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	061b      	lsls	r3, r3, #24
 8000c24:	4929      	ldr	r1, [pc, #164]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c2a:	e057      	b.n	8000cdc <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d038      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 0219 	bic.w	r2, r3, #25
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4922      	ldr	r1, [pc, #136]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c46:	f7ff fbc9 	bl	80003dc <HAL_GetTick>
 8000c4a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fbc5 	bl	80003dc <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e29d      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	f7ff fbe4 	bl	8000438 <HAL_GetREVID>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d80a      	bhi.n	8000c90 <HAL_RCC_OscConfig+0x250>
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	031b      	lsls	r3, r3, #12
 8000c88:	4910      	ldr	r1, [pc, #64]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	604b      	str	r3, [r1, #4]
 8000c8e:	e025      	b.n	8000cdc <HAL_RCC_OscConfig+0x29c>
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	061b      	lsls	r3, r3, #24
 8000c9e:	490b      	ldr	r1, [pc, #44]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	e01a      	b.n	8000cdc <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_RCC_OscConfig+0x28c>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fb93 	bl	80003dc <HAL_GetTick>
 8000cb6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cb8:	e00a      	b.n	8000cd0 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cba:	f7ff fb8f 	bl	80003dc <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d903      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e267      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
 8000ccc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cd0:	4ba0      	ldr	r3, [pc, #640]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1ee      	bne.n	8000cba <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 808f 	beq.w	8000e08 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cea:	4b9a      	ldr	r3, [pc, #616]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000cf2:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cf4:	4b97      	ldr	r3, [pc, #604]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d007      	beq.n	8000d10 <HAL_RCC_OscConfig+0x2d0>
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b18      	cmp	r3, #24
 8000d04:	d12d      	bne.n	8000d62 <HAL_RCC_OscConfig+0x322>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d128      	bne.n	8000d62 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d10:	4b90      	ldr	r3, [pc, #576]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <HAL_RCC_OscConfig+0x2e8>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	2b80      	cmp	r3, #128	; 0x80
 8000d22:	d001      	beq.n	8000d28 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e239      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d28:	f7ff fb86 	bl	8000438 <HAL_GetREVID>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d80a      	bhi.n	8000d4c <HAL_RCC_OscConfig+0x30c>
 8000d36:	4b87      	ldr	r3, [pc, #540]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	069b      	lsls	r3, r3, #26
 8000d44:	4983      	ldr	r1, [pc, #524]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d4a:	e05d      	b.n	8000e08 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d4c:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	061b      	lsls	r3, r3, #24
 8000d5a:	497e      	ldr	r1, [pc, #504]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d60:	e052      	b.n	8000e08 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d035      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000d6a:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a79      	ldr	r2, [pc, #484]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d76:	f7ff fb31 	bl	80003dc <HAL_GetTick>
 8000d7a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fb2d 	bl	80003dc <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e205      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d90:	4b70      	ldr	r3, [pc, #448]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d9c:	f7ff fb4c 	bl	8000438 <HAL_GetREVID>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f241 0303 	movw	r3, #4099	; 0x1003
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d80a      	bhi.n	8000dc0 <HAL_RCC_OscConfig+0x380>
 8000daa:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	069b      	lsls	r3, r3, #26
 8000db8:	4966      	ldr	r1, [pc, #408]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	604b      	str	r3, [r1, #4]
 8000dbe:	e023      	b.n	8000e08 <HAL_RCC_OscConfig+0x3c8>
 8000dc0:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	061b      	lsls	r3, r3, #24
 8000dce:	4961      	ldr	r1, [pc, #388]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60cb      	str	r3, [r1, #12]
 8000dd4:	e018      	b.n	8000e08 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000dd6:	4b5f      	ldr	r3, [pc, #380]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a5e      	ldr	r2, [pc, #376]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de2:	f7ff fafb 	bl	80003dc <HAL_GetTick>
 8000de6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000dea:	f7ff faf7 	bl	80003dc <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e1cf      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000dfc:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f0      	bne.n	8000dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d036      	beq.n	8000e82 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d019      	beq.n	8000e50 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1c:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e28:	f7ff fad8 	bl	80003dc <HAL_GetTick>
 8000e2c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fad4 	bl	80003dc <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1ac      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e42:	4b44      	ldr	r3, [pc, #272]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0x3f0>
 8000e4e:	e018      	b.n	8000e82 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e50:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e54:	4a3f      	ldr	r2, [pc, #252]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fabe 	bl	80003dc <HAL_GetTick>
 8000e60:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff faba 	bl	80003dc <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e192      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e76:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d036      	beq.n	8000efc <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d019      	beq.n	8000eca <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fa9b 	bl	80003dc <HAL_GetTick>
 8000ea6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000eaa:	f7ff fa97 	bl	80003dc <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e16f      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x46a>
 8000ec8:	e018      	b.n	8000efc <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fa81 	bl	80003dc <HAL_GetTick>
 8000eda:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000ede:	f7ff fa7d 	bl	80003dc <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e155      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8086 	beq.w	8001016 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_RCC_OscConfig+0x518>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <HAL_RCC_OscConfig+0x518>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000f16:	f7ff fa61 	bl	80003dc <HAL_GetTick>
 8000f1a:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fa5d 	bl	80003dc <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e135      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_RCC_OscConfig+0x518>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10b      	bne.n	8000f5c <HAL_RCC_OscConfig+0x51c>
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f48:	4a02      	ldr	r2, [pc, #8]	; (8000f54 <HAL_RCC_OscConfig+0x514>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f50:	e032      	b.n	8000fb8 <HAL_RCC_OscConfig+0x578>
 8000f52:	bf00      	nop
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58024800 	.word	0x58024800
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10c      	bne.n	8000f7e <HAL_RCC_OscConfig+0x53e>
 8000f64:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f68:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f70:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	4a8b      	ldr	r2, [pc, #556]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f76:	f023 0304 	bic.w	r3, r3, #4
 8000f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x578>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x560>
 8000f86:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8a:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6713      	str	r3, [r2, #112]	; 0x70
 8000f92:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	4a83      	ldr	r2, [pc, #524]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x578>
 8000fa0:	4b80      	ldr	r3, [pc, #512]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	4a7f      	ldr	r2, [pc, #508]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6713      	str	r3, [r2, #112]	; 0x70
 8000fac:	4b7d      	ldr	r3, [pc, #500]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	4a7c      	ldr	r2, [pc, #496]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fa0c 	bl	80003dc <HAL_GetTick>
 8000fc4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fa08 	bl	80003dc <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0de      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fde:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ee      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x588>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fec:	f7ff f9f6 	bl	80003dc <HAL_GetTick>
 8000ff0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff f9f2 	bl	80003dc <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0c8      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800100a:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80bd 	beq.w	800119a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001020:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001028:	2b18      	cmp	r3, #24
 800102a:	f000 80b4 	beq.w	8001196 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	2b02      	cmp	r3, #2
 8001034:	f040 8095 	bne.w	8001162 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001038:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a59      	ldr	r2, [pc, #356]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800103e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff f9ca 	bl	80003dc <HAL_GetTick>
 8001048:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff f9c6 	bl	80003dc <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e09e      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800106a:	4b4e      	ldr	r3, [pc, #312]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800106c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800106e:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <HAL_RCC_OscConfig+0x768>)
 8001070:	4013      	ands	r3, r2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	430a      	orrs	r2, r1
 800107e:	4949      	ldr	r1, [pc, #292]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001080:	4313      	orrs	r3, r2
 8001082:	628b      	str	r3, [r1, #40]	; 0x28
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	3b01      	subs	r3, #1
 800108a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001092:	3b01      	subs	r3, #1
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	b29b      	uxth	r3, r3
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	3b01      	subs	r3, #1
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	3b01      	subs	r3, #1
 80010ae:	061b      	lsls	r3, r3, #24
 80010b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80010b4:	493b      	ldr	r1, [pc, #236]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	4a39      	ldr	r2, [pc, #228]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_RCC_OscConfig+0x76c>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010d2:	00d2      	lsls	r2, r2, #3
 80010d4:	4933      	ldr	r1, [pc, #204]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	f023 020c 	bic.w	r2, r3, #12
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	492f      	ldr	r1, [pc, #188]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	f023 0202 	bic.w	r2, r3, #2
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	492a      	ldr	r1, [pc, #168]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113a:	f7ff f94f 	bl	80003dc <HAL_GetTick>
 800113e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff f94b 	bl	80003dc <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e023      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x702>
 8001160:	e01b      	b.n	800119a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 8001168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800116c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff f935 	bl	80003dc <HAL_GetTick>
 8001172:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff f931 	bl	80003dc <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e009      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_RCC_OscConfig+0x764>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0x736>
 8001194:	e001      	b.n	800119a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	58024400 	.word	0x58024400
 80011a8:	fffffc0c 	.word	0xfffffc0c
 80011ac:	ffff0007 	.word	0xffff0007

080011b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e18b      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d910      	bls.n	80011f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b87      	ldr	r3, [pc, #540]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 020f 	bic.w	r2, r3, #15
 80011da:	4985      	ldr	r1, [pc, #532]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b83      	ldr	r3, [pc, #524]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e173      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d010      	beq.n	8001222 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800120c:	429a      	cmp	r2, r3
 800120e:	d908      	bls.n	8001222 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001210:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	4975      	ldr	r1, [pc, #468]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800121e:	4313      	orrs	r3, r2
 8001220:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d010      	beq.n	8001250 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800123a:	429a      	cmp	r2, r3
 800123c:	d908      	bls.n	8001250 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	496a      	ldr	r1, [pc, #424]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800124c:	4313      	orrs	r3, r2
 800124e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001268:	429a      	cmp	r2, r3
 800126a:	d908      	bls.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	495e      	ldr	r1, [pc, #376]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800127a:	4313      	orrs	r3, r2
 800127c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0320 	and.w	r3, r3, #32
 8001286:	2b00      	cmp	r3, #0
 8001288:	d010      	beq.n	80012ac <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69da      	ldr	r2, [r3, #28]
 800128e:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001296:	429a      	cmp	r2, r3
 8001298:	d908      	bls.n	80012ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800129a:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4953      	ldr	r1, [pc, #332]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d010      	beq.n	80012da <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d908      	bls.n	80012da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f023 020f 	bic.w	r2, r3, #15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4947      	ldr	r1, [pc, #284]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d055      	beq.n	8001392 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80012e6:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4940      	ldr	r1, [pc, #256]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d107      	bne.n	8001310 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001300:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d121      	bne.n	8001350 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0e5      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b03      	cmp	r3, #3
 8001316:	d107      	bne.n	8001328 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d115      	bne.n	8001350 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d9      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0cd      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0c5      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	f023 0207 	bic.w	r2, r3, #7
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4925      	ldr	r1, [pc, #148]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 800135e:	4313      	orrs	r3, r2
 8001360:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff f83b 	bl	80003dc <HAL_GetTick>
 8001366:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001368:	e00a      	b.n	8001380 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136a:	f7ff f837 	bl	80003dc <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0ad      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	429a      	cmp	r2, r3
 8001390:	d1eb      	bne.n	800136a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d010      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d208      	bcs.n	80013c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f023 020f 	bic.w	r2, r3, #15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <HAL_RCC_ClockConfig+0x244>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d214      	bcs.n	80013f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 020f 	bic.w	r2, r3, #15
 80013d6:	4906      	ldr	r1, [pc, #24]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_RCC_ClockConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e075      	b.n	80014dc <HAL_RCC_ClockConfig+0x32c>
 80013f0:	52002000 	.word	0x52002000
 80013f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d010      	beq.n	8001426 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001410:	429a      	cmp	r2, r3
 8001412:	d208      	bcs.n	8001426 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	4930      	ldr	r1, [pc, #192]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001422:	4313      	orrs	r3, r2
 8001424:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800143e:	429a      	cmp	r2, r3
 8001440:	d208      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001450:	4313      	orrs	r3, r2
 8001452:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	d010      	beq.n	8001482 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800146c:	429a      	cmp	r2, r3
 800146e:	d208      	bcs.n	8001482 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4919      	ldr	r1, [pc, #100]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 800147e:	4313      	orrs	r3, r2
 8001480:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800149a:	429a      	cmp	r2, r3
 800149c:	d208      	bcs.n	80014b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	490e      	ldr	r1, [pc, #56]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014b0:	f000 f81e 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80014b4:	4601      	mov	r1, r0
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_ClockConfig+0x334>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x338>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	fa21 f303 	lsr.w	r3, r1, r3
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_RCC_ClockConfig+0x33c>)
 80014ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7fe ff39 	bl	8000348 <HAL_InitTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80014da:	7afb      	ldrb	r3, [r7, #11]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	58024400 	.word	0x58024400
 80014e8:	080030e8 	.word	0x080030e8
 80014ec:	24000008 	.word	0x24000008

080014f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f6:	4baf      	ldr	r3, [pc, #700]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014fe:	2b18      	cmp	r3, #24
 8001500:	f200 814e 	bhi.w	80017a0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001571 	.word	0x08001571
 8001510:	080017a1 	.word	0x080017a1
 8001514:	080017a1 	.word	0x080017a1
 8001518:	080017a1 	.word	0x080017a1
 800151c:	080017a1 	.word	0x080017a1
 8001520:	080017a1 	.word	0x080017a1
 8001524:	080017a1 	.word	0x080017a1
 8001528:	080017a1 	.word	0x080017a1
 800152c:	08001597 	.word	0x08001597
 8001530:	080017a1 	.word	0x080017a1
 8001534:	080017a1 	.word	0x080017a1
 8001538:	080017a1 	.word	0x080017a1
 800153c:	080017a1 	.word	0x080017a1
 8001540:	080017a1 	.word	0x080017a1
 8001544:	080017a1 	.word	0x080017a1
 8001548:	080017a1 	.word	0x080017a1
 800154c:	0800159d 	.word	0x0800159d
 8001550:	080017a1 	.word	0x080017a1
 8001554:	080017a1 	.word	0x080017a1
 8001558:	080017a1 	.word	0x080017a1
 800155c:	080017a1 	.word	0x080017a1
 8001560:	080017a1 	.word	0x080017a1
 8001564:	080017a1 	.word	0x080017a1
 8001568:	080017a1 	.word	0x080017a1
 800156c:	080015a3 	.word	0x080015a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001570:	4b90      	ldr	r3, [pc, #576]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800157c:	4b8d      	ldr	r3, [pc, #564]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	4a8c      	ldr	r2, [pc, #560]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800158e:	e10a      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001590:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001592:	61bb      	str	r3, [r7, #24]
    break;
 8001594:	e107      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001598:	61bb      	str	r3, [r7, #24]
    break;
 800159a:	e104      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800159e:	61bb      	str	r3, [r7, #24]
    break;
 80015a0:	e101      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015a2:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80da 	beq.w	800179a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d05a      	beq.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1b2>
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d302      	bcc.n	80015f6 <HAL_RCC_GetSysClockFreq+0x106>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d078      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80015f4:	e099      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015f6:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02d      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001602:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800163c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001640:	eddf 5a60 	vldr	s11, [pc, #384]	; 80017c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800164c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800165c:	e087      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001668:	eddf 6a57 	vldr	s13, [pc, #348]	; 80017c8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800166c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001680:	ed97 6a02 	vldr	s12, [r7, #8]
 8001684:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80017c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800168c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80016a0:	e065      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	eddf 6a47 	vldr	s13, [pc, #284]	; 80017cc <HAL_RCC_GetSysClockFreq+0x2dc>
 80016b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80016c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80017c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80016cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80016e4:	e043      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80017d0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80016f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001708:	ed97 6a02 	vldr	s12, [r7, #8]
 800170c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80017c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800171c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001728:	e021      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001734:	eddf 6a25 	vldr	s13, [pc, #148]	; 80017cc <HAL_RCC_GetSysClockFreq+0x2dc>
 8001738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800174c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001750:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80017c4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800175c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800176c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	0a5b      	lsrs	r3, r3, #9
 8001774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001778:	3301      	adds	r3, #1
 800177a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001786:	edd7 6a07 	vldr	s13, [r7, #28]
 800178a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800178e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001792:	ee17 3a90 	vmov	r3, s15
 8001796:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001798:	e005      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
    break;
 800179e:	e002      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80017a2:	61bb      	str	r3, [r7, #24]
    break;
 80017a4:	bf00      	nop
  }

  return sysclockfreq;
 80017a6:	69bb      	ldr	r3, [r7, #24]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3724      	adds	r7, #36	; 0x24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	58024400 	.word	0x58024400
 80017b8:	03d09000 	.word	0x03d09000
 80017bc:	003d0900 	.word	0x003d0900
 80017c0:	017d7840 	.word	0x017d7840
 80017c4:	46000000 	.word	0x46000000
 80017c8:	4c742400 	.word	0x4c742400
 80017cc:	4a742400 	.word	0x4a742400
 80017d0:	4bbebc20 	.word	0x4bbebc20

080017d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e01d      	b.n	8001822 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f001 fbb4 	bl	8002f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3304      	adds	r3, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f000 fc40 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_TIM_Base_Start_IT+0x50>)
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d00b      	beq.n	800186e <HAL_TIM_Base_Start_IT+0x42>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d007      	beq.n	800186e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	00010007 	.word	0x00010007

08001880 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d841      	bhi.n	8001914 <HAL_TIM_OC_Start_IT+0x94>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HAL_TIM_OC_Start_IT+0x18>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018cd 	.word	0x080018cd
 800189c:	08001915 	.word	0x08001915
 80018a0:	08001915 	.word	0x08001915
 80018a4:	08001915 	.word	0x08001915
 80018a8:	080018df 	.word	0x080018df
 80018ac:	08001915 	.word	0x08001915
 80018b0:	08001915 	.word	0x08001915
 80018b4:	08001915 	.word	0x08001915
 80018b8:	080018f1 	.word	0x080018f1
 80018bc:	08001915 	.word	0x08001915
 80018c0:	08001915 	.word	0x08001915
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001903 	.word	0x08001903
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0202 	orr.w	r2, r2, #2
 80018da:	60da      	str	r2, [r3, #12]
      break;
 80018dc:	e01b      	b.n	8001916 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0204 	orr.w	r2, r2, #4
 80018ec:	60da      	str	r2, [r3, #12]
      break;
 80018ee:	e012      	b.n	8001916 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0208 	orr.w	r2, r2, #8
 80018fe:	60da      	str	r2, [r3, #12]
      break;
 8001900:	e009      	b.n	8001916 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0210 	orr.w	r2, r2, #16
 8001910:	60da      	str	r2, [r3, #12]
      break;
 8001912:	e000      	b.n	8001916 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8001914:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 ffc0 	bl	80028a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_TIM_OC_Start_IT+0x124>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_TIM_OC_Start_IT+0xd6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_TIM_OC_Start_IT+0x128>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00e      	beq.n	8001956 <HAL_TIM_OC_Start_IT+0xd6>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_TIM_OC_Start_IT+0x12c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_TIM_OC_Start_IT+0xd6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_TIM_OC_Start_IT+0x130>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_TIM_OC_Start_IT+0xd6>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_TIM_OC_Start_IT+0x134>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_TIM_OC_Start_IT+0xda>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_TIM_OC_Start_IT+0xdc>
 800195a:	2300      	movs	r3, #0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800196e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_TIM_OC_Start_IT+0x138>)
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b06      	cmp	r3, #6
 8001980:	d00b      	beq.n	800199a <HAL_TIM_OC_Start_IT+0x11a>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d007      	beq.n	800199a <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010400 	.word	0x40010400
 80019ac:	40014000 	.word	0x40014000
 80019b0:	40014400 	.word	0x40014400
 80019b4:	40014800 	.word	0x40014800
 80019b8:	00010007 	.word	0x00010007

080019bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e01d      	b.n	8001a0a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f815 	bl	8001a12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 fb4c 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d122      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d11b      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0202 	mvn.w	r2, #2
 8001a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 faf7 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001a6e:	e005      	b.n	8001a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fae9 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fafa 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d122      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0204 	mvn.w	r2, #4
 8001aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 facd 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001ac2:	e005      	b.n	8001ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fabf 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fad0 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d122      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11b      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0208 	mvn.w	r2, #8
 8001afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2204      	movs	r2, #4
 8001b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 faa3 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001b16:	e005      	b.n	8001b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fa95 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 faa6 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d122      	bne.n	8001b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d11b      	bne.n	8001b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0210 	mvn.w	r2, #16
 8001b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2208      	movs	r2, #8
 8001b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa79 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001b6a:	e005      	b.n	8001b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fa6b 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fa7c 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10e      	bne.n	8001baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f06f 0201 	mvn.w	r2, #1
 8001ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fa45 	bl	8002034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb4:	2b80      	cmp	r3, #128	; 0x80
 8001bb6:	d10e      	bne.n	8001bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	2b80      	cmp	r3, #128	; 0x80
 8001bc4:	d107      	bne.n	8001bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fef3 	bl	80029bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fee6 	bl	80029d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0e:	2b40      	cmp	r3, #64	; 0x40
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fa2a 	bl	8002084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0220 	mvn.w	r2, #32
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fea6 	bl	80029a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e105      	b.n	8001e8a <HAL_TIM_PWM_ConfigChannel+0x226>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b14      	cmp	r3, #20
 8001c92:	f200 80f0 	bhi.w	8001e76 <HAL_TIM_PWM_ConfigChannel+0x212>
 8001c96:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001cf1 	.word	0x08001cf1
 8001ca0:	08001e77 	.word	0x08001e77
 8001ca4:	08001e77 	.word	0x08001e77
 8001ca8:	08001e77 	.word	0x08001e77
 8001cac:	08001d31 	.word	0x08001d31
 8001cb0:	08001e77 	.word	0x08001e77
 8001cb4:	08001e77 	.word	0x08001e77
 8001cb8:	08001e77 	.word	0x08001e77
 8001cbc:	08001d73 	.word	0x08001d73
 8001cc0:	08001e77 	.word	0x08001e77
 8001cc4:	08001e77 	.word	0x08001e77
 8001cc8:	08001e77 	.word	0x08001e77
 8001ccc:	08001db3 	.word	0x08001db3
 8001cd0:	08001e77 	.word	0x08001e77
 8001cd4:	08001e77 	.word	0x08001e77
 8001cd8:	08001e77 	.word	0x08001e77
 8001cdc:	08001df5 	.word	0x08001df5
 8001ce0:	08001e77 	.word	0x08001e77
 8001ce4:	08001e77 	.word	0x08001e77
 8001ce8:	08001e77 	.word	0x08001e77
 8001cec:	08001e35 	.word	0x08001e35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fa68 	bl	80021cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0208 	orr.w	r2, r2, #8
 8001d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0204 	bic.w	r2, r2, #4
 8001d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6999      	ldr	r1, [r3, #24]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	619a      	str	r2, [r3, #24]
      break;
 8001d2e:	e0a3      	b.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fad8 	bl	80022ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6999      	ldr	r1, [r3, #24]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	021a      	lsls	r2, r3, #8
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	619a      	str	r2, [r3, #24]
      break;
 8001d70:	e082      	b.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fb41 	bl	8002400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0208 	orr.w	r2, r2, #8
 8001d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0204 	bic.w	r2, r2, #4
 8001d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69d9      	ldr	r1, [r3, #28]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	61da      	str	r2, [r3, #28]
      break;
 8001db0:	e062      	b.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fba7 	bl	800250c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69d9      	ldr	r1, [r3, #28]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	61da      	str	r2, [r3, #28]
      break;
 8001df2:	e041      	b.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fbee 	bl	80025dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0208 	orr.w	r2, r2, #8
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e32:	e021      	b.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fc30 	bl	80026a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e74:	e000      	b.n	8001e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8001e76:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop

08001e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_TIM_ConfigClockSource+0x18>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e0b7      	b.n	800201c <HAL_TIM_ConfigClockSource+0x188>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_TIM_ConfigClockSource+0x190>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ed2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b70      	cmp	r3, #112	; 0x70
 8001ee2:	d02e      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0xae>
 8001ee4:	2b70      	cmp	r3, #112	; 0x70
 8001ee6:	d812      	bhi.n	8001f0e <HAL_TIM_ConfigClockSource+0x7a>
 8001ee8:	2b30      	cmp	r3, #48	; 0x30
 8001eea:	f000 8084 	beq.w	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001eee:	2b30      	cmp	r3, #48	; 0x30
 8001ef0:	d806      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x6c>
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d07f      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d07d      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07b      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001efe:	e084      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8001f00:	2b50      	cmp	r3, #80	; 0x50
 8001f02:	d048      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x102>
 8001f04:	2b60      	cmp	r3, #96	; 0x60
 8001f06:	d056      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x122>
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	d064      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8001f0c:	e07d      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8001f0e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8001f12:	d070      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001f14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8001f18:	d809      	bhi.n	8001f2e <HAL_TIM_ConfigClockSource+0x9a>
 8001f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f1e:	d027      	beq.n	8001f70 <HAL_TIM_ConfigClockSource+0xdc>
 8001f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f24:	d067      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d06d      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f2c:	e06d      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	; (8002028 <HAL_TIM_ConfigClockSource+0x194>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d060      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001f34:	4a3d      	ldr	r2, [pc, #244]	; (800202c <HAL_TIM_ConfigClockSource+0x198>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d05d      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <HAL_TIM_ConfigClockSource+0x19c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05a      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8001f40:	e063      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f000 fc87 	bl	8002864 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
      break;
 8001f6e:	e04c      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f000 fc70 	bl	8002864 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f92:	609a      	str	r2, [r3, #8]
      break;
 8001f94:	e039      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f000 fbe0 	bl	8002768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2150      	movs	r1, #80	; 0x50
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fc3a 	bl	8002828 <TIM_ITRx_SetConfig>
      break;
 8001fb4:	e029      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f000 fbff 	bl	80027c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2160      	movs	r1, #96	; 0x60
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fc2a 	bl	8002828 <TIM_ITRx_SetConfig>
      break;
 8001fd4:	e019      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f000 fbc0 	bl	8002768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fc1a 	bl	8002828 <TIM_ITRx_SetConfig>
      break;
 8001ff4:	e009      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f000 fc11 	bl	8002828 <TIM_ITRx_SetConfig>
      break;
 8002006:	e000      	b.n	800200a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	ffceff88 	.word	0xffceff88
 8002028:	00100030 	.word	0x00100030
 800202c:	00100040 	.word	0x00100040
 8002030:	00100020 	.word	0x00100020

08002034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a40      	ldr	r2, [pc, #256]	; (80021ac <TIM_Base_SetConfig+0x114>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d00f      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <TIM_Base_SetConfig+0x118>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00b      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3c      	ldr	r2, [pc, #240]	; (80021b4 <TIM_Base_SetConfig+0x11c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <TIM_Base_SetConfig+0x120>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <TIM_Base_SetConfig+0x124>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d108      	bne.n	80020ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <TIM_Base_SetConfig+0x114>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d01b      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <TIM_Base_SetConfig+0x118>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d017      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <TIM_Base_SetConfig+0x11c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <TIM_Base_SetConfig+0x120>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00f      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a29      	ldr	r2, [pc, #164]	; (80021bc <TIM_Base_SetConfig+0x124>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <TIM_Base_SetConfig+0x128>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <TIM_Base_SetConfig+0x12c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0x9a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <TIM_Base_SetConfig+0x130>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <TIM_Base_SetConfig+0x124>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <TIM_Base_SetConfig+0x128>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <TIM_Base_SetConfig+0x12c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0xf8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <TIM_Base_SetConfig+0x130>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d103      	bne.n	8002198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40010400 	.word	0x40010400
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800

080021cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <TIM_OC1_SetConfig+0x108>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f023 0302 	bic.w	r3, r3, #2
 8002214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <TIM_OC1_SetConfig+0x10c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00f      	beq.n	8002248 <TIM_OC1_SetConfig+0x7c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <TIM_OC1_SetConfig+0x110>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_OC1_SetConfig+0x7c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <TIM_OC1_SetConfig+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_OC1_SetConfig+0x7c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <TIM_OC1_SetConfig+0x118>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_OC1_SetConfig+0x7c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <TIM_OC1_SetConfig+0x11c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10c      	bne.n	8002262 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 0308 	bic.w	r3, r3, #8
 800224e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <TIM_OC1_SetConfig+0x10c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00f      	beq.n	800228a <TIM_OC1_SetConfig+0xbe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <TIM_OC1_SetConfig+0x110>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00b      	beq.n	800228a <TIM_OC1_SetConfig+0xbe>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <TIM_OC1_SetConfig+0x114>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <TIM_OC1_SetConfig+0xbe>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <TIM_OC1_SetConfig+0x118>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_OC1_SetConfig+0xbe>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a18      	ldr	r2, [pc, #96]	; (80022e8 <TIM_OC1_SetConfig+0x11c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d111      	bne.n	80022ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	621a      	str	r2, [r3, #32]
}
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	fffeff8f 	.word	0xfffeff8f
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010400 	.word	0x40010400
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800

080022ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f023 0210 	bic.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <TIM_OC2_SetConfig+0xfc>)
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f023 0320 	bic.w	r3, r3, #32
 8002336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <TIM_OC2_SetConfig+0x100>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <TIM_OC2_SetConfig+0x68>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <TIM_OC2_SetConfig+0x104>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10d      	bne.n	8002370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800235a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800236e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <TIM_OC2_SetConfig+0x100>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00f      	beq.n	8002398 <TIM_OC2_SetConfig+0xac>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <TIM_OC2_SetConfig+0x104>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00b      	beq.n	8002398 <TIM_OC2_SetConfig+0xac>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <TIM_OC2_SetConfig+0x108>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <TIM_OC2_SetConfig+0xac>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <TIM_OC2_SetConfig+0x10c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <TIM_OC2_SetConfig+0xac>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <TIM_OC2_SetConfig+0x110>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d113      	bne.n	80023c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800239e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	feff8fff 	.word	0xfeff8fff
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40010400 	.word	0x40010400
 80023f4:	40014000 	.word	0x40014000
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40014800 	.word	0x40014800

08002400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <TIM_OC3_SetConfig+0xf8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d003      	beq.n	8002466 <TIM_OC3_SetConfig+0x66>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a26      	ldr	r2, [pc, #152]	; (80024fc <TIM_OC3_SetConfig+0xfc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10d      	bne.n	8002482 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800246c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <TIM_OC3_SetConfig+0xf8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00f      	beq.n	80024aa <TIM_OC3_SetConfig+0xaa>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <TIM_OC3_SetConfig+0xfc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00b      	beq.n	80024aa <TIM_OC3_SetConfig+0xaa>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <TIM_OC3_SetConfig+0x100>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_OC3_SetConfig+0xaa>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <TIM_OC3_SetConfig+0x104>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_OC3_SetConfig+0xaa>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <TIM_OC3_SetConfig+0x108>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010400 	.word	0x40010400
 8002500:	40014000 	.word	0x40014000
 8002504:	40014400 	.word	0x40014400
 8002508:	40014800 	.word	0x40014800

0800250c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	031b      	lsls	r3, r3, #12
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <TIM_OC4_SetConfig+0xbc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00f      	beq.n	800258c <TIM_OC4_SetConfig+0x80>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <TIM_OC4_SetConfig+0xc0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00b      	beq.n	800258c <TIM_OC4_SetConfig+0x80>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <TIM_OC4_SetConfig+0xc4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <TIM_OC4_SetConfig+0x80>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <TIM_OC4_SetConfig+0xc8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_OC4_SetConfig+0x80>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <TIM_OC4_SetConfig+0xcc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d109      	bne.n	80025a0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	019b      	lsls	r3, r3, #6
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40010400 	.word	0x40010400
 80025d0:	40014000 	.word	0x40014000
 80025d4:	40014400 	.word	0x40014400
 80025d8:	40014800 	.word	0x40014800

080025dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800261c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <TIM_OC5_SetConfig+0xb0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00f      	beq.n	8002652 <TIM_OC5_SetConfig+0x76>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a16      	ldr	r2, [pc, #88]	; (8002690 <TIM_OC5_SetConfig+0xb4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00b      	beq.n	8002652 <TIM_OC5_SetConfig+0x76>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <TIM_OC5_SetConfig+0xb8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_OC5_SetConfig+0x76>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <TIM_OC5_SetConfig+0xbc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_OC5_SetConfig+0x76>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <TIM_OC5_SetConfig+0xc0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d109      	bne.n	8002666 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	621a      	str	r2, [r3, #32]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40010000 	.word	0x40010000
 8002690:	40010400 	.word	0x40010400
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400
 800269c:	40014800 	.word	0x40014800

080026a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <TIM_OC6_SetConfig+0xb4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00f      	beq.n	8002718 <TIM_OC6_SetConfig+0x78>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <TIM_OC6_SetConfig+0xb8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_OC6_SetConfig+0x78>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <TIM_OC6_SetConfig+0xbc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_OC6_SetConfig+0x78>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <TIM_OC6_SetConfig+0xc0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_OC6_SetConfig+0x78>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a14      	ldr	r2, [pc, #80]	; (8002764 <TIM_OC6_SetConfig+0xc4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d109      	bne.n	800272c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800271e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40010400 	.word	0x40010400
 800275c:	40014000 	.word	0x40014000
 8002760:	40014400 	.word	0x40014400
 8002764:	40014800 	.word	0x40014800

08002768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f023 030a 	bic.w	r3, r3, #10
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	621a      	str	r2, [r3, #32]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f023 0210 	bic.w	r2, r3, #16
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	621a      	str	r2, [r3, #32]
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <TIM_ITRx_SetConfig+0x38>)
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	f043 0307 	orr.w	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	ffcfff8f 	.word	0xffcfff8f

08002864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	431a      	orrs	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2201      	movs	r2, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	401a      	ands	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e045      	b.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002942:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002954:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002966:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010400 	.word	0x40010400

080029a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <MX_GPIO_Init+0x50>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <MX_GPIO_Init+0x50>)
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_GPIO_Init+0x50>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <MX_GPIO_Init+0x50>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <MX_GPIO_Init+0x50>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <MX_GPIO_Init+0x50>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]

}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	58024400 	.word	0x58024400

08002a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a3c:	f7fd fc4c 	bl	80002d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a40:	f000 f842 	bl	8002ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a44:	f7ff ffce 	bl	80029e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002a48:	f000 fa18 	bl	8002e7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002a4c:	481d      	ldr	r0, [pc, #116]	; (8002ac4 <main+0x8c>)
 8002a4e:	f7fe feed 	bl	800182c <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1); //output compare start interrupt
 8002a52:	2100      	movs	r1, #0
 8002a54:	481b      	ldr	r0, [pc, #108]	; (8002ac4 <main+0x8c>)
 8002a56:	f7fe ff13 	bl	8001880 <HAL_TIM_OC_Start_IT>
  init_stepper_control(&htim2);
 8002a5a:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <main+0x8c>)
 8002a5c:	f000 f8b8 	bl	8002bd0 <init_stepper_control>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	        set_speed(360);
 8002a60:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8002a64:	f000 f8ce 	bl	8002c04 <set_speed>
	  		set_feed_steps(360);
 8002a68:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8002a6c:	f000 f8dc 	bl	8002c28 <set_feed_steps>
	  		HAL_Delay(2000);
 8002a70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a74:	f7fd fcbe 	bl	80003f4 <HAL_Delay>
	  		set_speed(720);
 8002a78:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8002a7c:	f000 f8c2 	bl	8002c04 <set_speed>
	  		set_feed_steps(720);
 8002a80:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8002a84:	f000 f8d0 	bl	8002c28 <set_feed_steps>
	  		HAL_Delay(2000);
 8002a88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a8c:	f7fd fcb2 	bl	80003f4 <HAL_Delay>
	  		set_speed(1440);
 8002a90:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 8002a94:	f000 f8b6 	bl	8002c04 <set_speed>
	  		set_feed_steps(1440);
 8002a98:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 8002a9c:	f000 f8c4 	bl	8002c28 <set_feed_steps>
	  		HAL_Delay(2500);
 8002aa0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002aa4:	f7fd fca6 	bl	80003f4 <HAL_Delay>
	  		set_speed(2880);
 8002aa8:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8002aac:	f000 f8aa 	bl	8002c04 <set_speed>
	  		set_feed_steps(2880);
 8002ab0:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8002ab4:	f000 f8b8 	bl	8002c28 <set_feed_steps>
	  		HAL_Delay(3000);
 8002ab8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002abc:	f7fd fc9a 	bl	80003f4 <HAL_Delay>
	        set_speed(360);
 8002ac0:	e7ce      	b.n	8002a60 <main+0x28>
 8002ac2:	bf00      	nop
 8002ac4:	24000054 	.word	0x24000054

08002ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b09c      	sub	sp, #112	; 0x70
 8002acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	224c      	movs	r2, #76	; 0x4c
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 faf2 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2220      	movs	r2, #32
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 faec 	bl	80030c0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f7fd ff71 	bl	80009d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <SystemClock_Config+0xf0>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <SystemClock_Config+0xf0>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <SystemClock_Config+0xf0>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <SystemClock_Config+0xf4>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <SystemClock_Config+0xf4>)
 8002b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b12:	6193      	str	r3, [r2, #24]
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <SystemClock_Config+0xf4>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002b20:	bf00      	nop
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <SystemClock_Config+0xf4>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d1f8      	bne.n	8002b22 <SystemClock_Config+0x5a>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b30:	2302      	movs	r3, #2
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b40:	2300      	movs	r3, #0
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b44:	2304      	movs	r3, #4
 8002b46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002b48:	2332      	movs	r3, #50	; 0x32
 8002b4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b50:	2302      	movs	r3, #2
 8002b52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b54:	2302      	movs	r3, #2
 8002b56:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002b58:	230c      	movs	r3, #12
 8002b5a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd ff69 	bl	8000a40 <HAL_RCC_OscConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002b74:	f000 f824 	bl	8002bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b78:	233f      	movs	r3, #63	; 0x3f
 8002b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002b84:	2308      	movs	r3, #8
 8002b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002b88:	2340      	movs	r3, #64	; 0x40
 8002b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b8c:	2340      	movs	r3, #64	; 0x40
 8002b8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002b96:	2340      	movs	r3, #64	; 0x40
 8002b98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb06 	bl	80011b0 <HAL_RCC_ClockConfig>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8002baa:	f000 f809 	bl	8002bc0 <Error_Handler>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3770      	adds	r7, #112	; 0x70
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	58000400 	.word	0x58000400
 8002bbc:	58024800 	.word	0x58024800

08002bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <init_stepper_control>:
unsigned int dst_speed;
int direction;
TIM_HandleTypeDef *htim;

void init_stepper_control(TIM_HandleTypeDef *_htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	htim = _htim;
 8002bd8:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <init_stepper_control+0x30>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
	htim->Instance->CR1 &= ~(0x1); //CR1=timer control reg. 1
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <init_stepper_control+0x30>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <init_stepper_control+0x30>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
	                               //a&=b->a=a&b(bitwise operator).
	                               //~(uint32_t)-> bitwise NOT operator.
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	24000050 	.word	0x24000050

08002c04 <set_speed>:

void set_speed(unsigned int _val)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	dst_speed = _val;
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <set_speed+0x1c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	24000048 	.word	0x24000048
 8002c24:	00000000 	.word	0x00000000

08002c28 <set_feed_steps>:
{

}

void set_feed_steps(int _val)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	// 360 deg. = 200 pulse
	feed_step = (_val / 360.0) * 200 - 1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002c3a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8002cb0 <set_feed_steps+0x88>
 8002c3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c42:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002cb8 <set_feed_steps+0x90>
 8002c46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c56:	ee17 2a90 	vmov	r2, s15
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <set_feed_steps+0xa8>)
 8002c5c:	601a      	str	r2, [r3, #0]
	cur_step = 0;
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <set_feed_steps+0xac>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
	acceleration_feed = feed_step * 0.3;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <set_feed_steps+0xa8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c70:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002cc0 <set_feed_steps+0x98>
 8002c74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c7c:	ee17 2a90 	vmov	r2, s15
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <set_feed_steps+0xb0>)
 8002c82:	601a      	str	r2, [r3, #0]
	deceleration_feed = feed_step * 0.7; //30% offset
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <set_feed_steps+0xa8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c90:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002cc8 <set_feed_steps+0xa0>
 8002c94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c9c:	ee17 2a90 	vmov	r2, s15
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <set_feed_steps+0xb4>)
 8002ca2:	601a      	str	r2, [r3, #0]
	run();
 8002ca4:	f000 f81c 	bl	8002ce0 <run>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40768000 	.word	0x40768000
 8002cb8:	00000000 	.word	0x00000000
 8002cbc:	40690000 	.word	0x40690000
 8002cc0:	33333333 	.word	0x33333333
 8002cc4:	3fd33333 	.word	0x3fd33333
 8002cc8:	66666666 	.word	0x66666666
 8002ccc:	3fe66666 	.word	0x3fe66666
 8002cd0:	24000040 	.word	0x24000040
 8002cd4:	24000034 	.word	0x24000034
 8002cd8:	2400003c 	.word	0x2400003c
 8002cdc:	2400004c 	.word	0x2400004c

08002ce0 <run>:
		htim->Instance->CCR1 = ccr - 1;
	}
}

void run()
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	if (dst_speed != 0)
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <run+0x2c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <run+0x20>
	{
		htim->Instance->CR1 |= 0x1; //?
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <run+0x30>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <run+0x30>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
	}
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	24000048 	.word	0x24000048
 8002d10:	24000050 	.word	0x24000050

08002d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_MspInit+0x30>)
 8002d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d20:	4a08      	ldr	r2, [pc, #32]	; (8002d44 <HAL_MspInit+0x30>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_MspInit+0x30>)
 8002d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	58024400 	.word	0x58024400

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <MemManage_Handler+0x4>

08002d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9c:	f7fd fb0a 	bl	80003b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <TIM2_IRQHandler+0x10>)
 8002daa:	f7fe fe3c 	bl	8001a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	24000054 	.word	0x24000054

08002db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <SystemInit+0xac>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <SystemInit+0xac>)
 8002dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <SystemInit+0xb0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <SystemInit+0xb0>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <SystemInit+0xb0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <SystemInit+0xb0>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4921      	ldr	r1, [pc, #132]	; (8002e68 <SystemInit+0xb0>)
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <SystemInit+0xb4>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <SystemInit+0xb0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <SystemInit+0xb0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <SystemInit+0xb0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <SystemInit+0xb0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <SystemInit+0xb0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <SystemInit+0xb0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <SystemInit+0xb0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <SystemInit+0xb0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <SystemInit+0xb0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <SystemInit+0xb0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <SystemInit+0xb0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <SystemInit+0xb0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <SystemInit+0xb0>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <SystemInit+0xb0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <SystemInit+0xb8>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <SystemInit+0xbc>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4a:	d202      	bcs.n	8002e52 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <SystemInit+0xc0>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SystemInit+0xac>)
 8002e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e70:	5c001000 	.word	0x5c001000
 8002e74:	ffff0000 	.word	0xffff0000
 8002e78:	51008108 	.word	0x51008108

08002e7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	615a      	str	r2, [r3, #20]
 8002eac:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1; //PSC=4000. 0.01ms for 1 increment.
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002eb8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0; //ARR value
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ed6:	4823      	ldr	r0, [pc, #140]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002ed8:	f7fe fc7c 	bl	80017d4 <HAL_TIM_Base_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002ee2:	f7ff fe6d 	bl	8002bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002ef4:	f7fe ffce 	bl	8001e94 <HAL_TIM_ConfigClockSource>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002efe:	f7ff fe5f 	bl	8002bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f02:	4818      	ldr	r0, [pc, #96]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002f04:	f7fe fd5a 	bl	80019bc <HAL_TIM_PWM_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002f0e:	f7ff fe57 	bl	8002bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4810      	ldr	r0, [pc, #64]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002f22:	f7ff fce5 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002f2c:	f7ff fe48 	bl	8002bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f30:	2360      	movs	r3, #96	; 0x60
 8002f32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f40:	463b      	mov	r3, r7
 8002f42:	2200      	movs	r2, #0
 8002f44:	4619      	mov	r1, r3
 8002f46:	4807      	ldr	r0, [pc, #28]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002f48:	f7fe fe8c 	bl	8001c64 <HAL_TIM_PWM_ConfigChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002f52:	f7ff fe35 	bl	8002bc0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <MX_TIM2_Init+0xe8>)
 8002f58:	f000 f82c 	bl	8002fb4 <HAL_TIM_MspPostInit>

}
 8002f5c:	bf00      	nop
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	24000054 	.word	0x24000054

08002f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f78:	d116      	bne.n	8002fa8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_TIM_Base_MspInit+0x48>)
 8002f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f80:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <HAL_TIM_Base_MspInit+0x48>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_TIM_Base_MspInit+0x48>)
 8002f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	201c      	movs	r0, #28
 8002f9e:	f7fd fb32 	bl	8000606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fa2:	201c      	movs	r0, #28
 8002fa4:	f7fd fb49 	bl	800063a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	58024400 	.word	0x58024400

08002fb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d11e      	bne.n	8003014 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_TIM_MspPostInit+0x68>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_TIM_MspPostInit+0x68>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <HAL_TIM_MspPostInit+0x68>)
 8002fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003004:	2301      	movs	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	4619      	mov	r1, r3
 800300e:	4804      	ldr	r0, [pc, #16]	; (8003020 <HAL_TIM_MspPostInit+0x6c>)
 8003010:	f7fd fb2e 	bl	8000670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003014:	bf00      	nop
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400
 8003020:	58020000 	.word	0x58020000

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800305c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003028:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800302a:	e003      	b.n	8003034 <LoopCopyDataInit>

0800302c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800302e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003030:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003032:	3104      	adds	r1, #4

08003034 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003034:	480b      	ldr	r0, [pc, #44]	; (8003064 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003038:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800303a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800303c:	d3f6      	bcc.n	800302c <CopyDataInit>
  ldr  r2, =_sbss
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003040:	e002      	b.n	8003048 <LoopFillZerobss>

08003042 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003042:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003044:	f842 3b04 	str.w	r3, [r2], #4

08003048 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800304a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800304c:	d3f9      	bcc.n	8003042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800304e:	f7ff feb3 	bl	8002db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003052:	f000 f811 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7ff fcef 	bl	8002a38 <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800305c:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 8003060:	08003100 	.word	0x08003100
  ldr  r0, =_sdata
 8003064:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003068:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 800306c:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8003070:	24000094 	.word	0x24000094

08003074 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC3_IRQHandler>
	...

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4e0d      	ldr	r6, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1ba4      	subs	r4, r4, r6
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2500      	movs	r5, #0
 8003084:	42a5      	cmp	r5, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4e0b      	ldr	r6, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 f820 	bl	80030d0 <_init>
 8003090:	1ba4      	subs	r4, r4, r6
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2500      	movs	r5, #0
 8003096:	42a5      	cmp	r5, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a0:	4798      	blx	r3
 80030a2:	3501      	adds	r5, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030aa:	4798      	blx	r3
 80030ac:	3501      	adds	r5, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	080030f8 	.word	0x080030f8
 80030b4:	080030f8 	.word	0x080030f8
 80030b8:	080030f8 	.word	0x080030f8
 80030bc:	080030fc 	.word	0x080030fc

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
