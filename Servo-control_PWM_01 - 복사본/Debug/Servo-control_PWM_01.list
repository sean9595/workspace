
Servo-control_PWM_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  24000014  08007db4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400050c  08007db4  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a65  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000361c  00000000  00000000  00040aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001298  00000000  00000000  000440c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  00045360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000365fb  00000000  00000000  000464a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f95  00000000  00000000  0007ca9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00158aeb  00000000  00000000  0008da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e651b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e38  00000000  00000000  001e6598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d58 	.word	0x08007d58

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08007d58 	.word	0x08007d58

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f987 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f001 fa77 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f007 f895 	bl	800775c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	08007d80 	.word	0x08007d80
 8000640:	2400000c 	.word	0x2400000c
 8000644:	24000010 	.word	0x24000010

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f96f 	bl	8000956 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f939 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	2400000c 	.word	0x2400000c
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	24000030 	.word	0x24000030

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	24000030 	.word	0x24000030

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	4313      	orrs	r3, r2
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	05fa0000 	.word	0x05fa0000

08000798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <__NVIC_GetPriorityGrouping+0x18>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	f003 0307 	and.w	r3, r3, #7
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db0b      	blt.n	80007de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f003 021f 	and.w	r2, r3, #31
 80007cc:	4907      	ldr	r1, [pc, #28]	; (80007ec <__NVIC_EnableIRQ+0x38>)
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	095b      	lsrs	r3, r3, #5
 80007d4:	2001      	movs	r0, #1
 80007d6:	fa00 f202 	lsl.w	r2, r0, r2
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff8e 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff29 	bl	8000750 <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff40 	bl	8000798 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff33 	bl	80007b4 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa4 	bl	80008ac <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800097e:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <HAL_GPIO_Init+0x234>)
 8000980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000982:	e194      	b.n	8000cae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 8186 	beq.w	8000ca8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x3c>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b12      	cmp	r3, #18
 80009aa:	d123      	bne.n	80009f4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	08da      	lsrs	r2, r3, #3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3208      	adds	r2, #8
 80009b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	220f      	movs	r2, #15
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	08da      	lsrs	r2, r3, #3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3208      	adds	r2, #8
 80009ee:	69b9      	ldr	r1, [r7, #24]
 80009f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0203 	and.w	r2, r3, #3
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d00b      	beq.n	8000a48 <HAL_GPIO_Init+0xd8>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a3c:	2b11      	cmp	r3, #17
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b12      	cmp	r3, #18
 8000a46:	d130      	bne.n	8000aaa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	f003 0201 	and.w	r2, r3, #1
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80e0 	beq.w	8000ca8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_GPIO_Init+0x238>)
 8000aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aee:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <HAL_GPIO_Init+0x238>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_GPIO_Init+0x238>)
 8000afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b06:	4a29      	ldr	r2, [pc, #164]	; (8000bac <HAL_GPIO_Init+0x23c>)
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	4013      	ands	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <HAL_GPIO_Init+0x240>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d052      	beq.n	8000bd8 <HAL_GPIO_Init+0x268>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_GPIO_Init+0x244>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d031      	beq.n	8000b9e <HAL_GPIO_Init+0x22e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_GPIO_Init+0x248>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d02b      	beq.n	8000b9a <HAL_GPIO_Init+0x22a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_GPIO_Init+0x24c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d025      	beq.n	8000b96 <HAL_GPIO_Init+0x226>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <HAL_GPIO_Init+0x250>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d01f      	beq.n	8000b92 <HAL_GPIO_Init+0x222>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_GPIO_Init+0x254>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d019      	beq.n	8000b8e <HAL_GPIO_Init+0x21e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <HAL_GPIO_Init+0x258>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0x21a>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_GPIO_Init+0x25c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00d      	beq.n	8000b86 <HAL_GPIO_Init+0x216>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_GPIO_Init+0x260>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d007      	beq.n	8000b82 <HAL_GPIO_Init+0x212>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_GPIO_Init+0x264>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_GPIO_Init+0x20e>
 8000b7a:	2309      	movs	r3, #9
 8000b7c:	e02d      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b7e:	230a      	movs	r3, #10
 8000b80:	e02b      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b82:	2308      	movs	r3, #8
 8000b84:	e029      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b86:	2307      	movs	r3, #7
 8000b88:	e027      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b8a:	2306      	movs	r3, #6
 8000b8c:	e025      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b8e:	2305      	movs	r3, #5
 8000b90:	e023      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b92:	2304      	movs	r3, #4
 8000b94:	e021      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b96:	2303      	movs	r3, #3
 8000b98:	e01f      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	e01d      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e01b      	b.n	8000bda <HAL_GPIO_Init+0x26a>
 8000ba2:	bf00      	nop
 8000ba4:	58000080 	.word	0x58000080
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	58000400 	.word	0x58000400
 8000bb0:	58020000 	.word	0x58020000
 8000bb4:	58020400 	.word	0x58020400
 8000bb8:	58020800 	.word	0x58020800
 8000bbc:	58020c00 	.word	0x58020c00
 8000bc0:	58021000 	.word	0x58021000
 8000bc4:	58021400 	.word	0x58021400
 8000bc8:	58021800 	.word	0x58021800
 8000bcc:	58021c00 	.word	0x58021c00
 8000bd0:	58022000 	.word	0x58022000
 8000bd4:	58022400 	.word	0x58022400
 8000bd8:	2300      	movs	r3, #0
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bea:	4938      	ldr	r1, [pc, #224]	; (8000ccc <HAL_GPIO_Init+0x35c>)
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	3301      	adds	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f47f ae63 	bne.w	8000984 <HAL_GPIO_Init+0x14>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	58000400 	.word	0x58000400

08000cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000cec:	e003      	b.n	8000cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	041a      	lsls	r2, r3, #16
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	619a      	str	r2, [r3, #24]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d04:	b08f      	sub	sp, #60	; 0x3c
 8000d06:	af0a      	add	r7, sp, #40	; 0x28
 8000d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e116      	b.n	8000f42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d106      	bne.n	8000d34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f006 ff64 	bl	8007bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 f8ae 	bl	8006eb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	687e      	ldr	r6, [r7, #4]
 8000d60:	466d      	mov	r5, sp
 8000d62:	f106 0410 	add.w	r4, r6, #16
 8000d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d76:	1d33      	adds	r3, r6, #4
 8000d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d7a:	6838      	ldr	r0, [r7, #0]
 8000d7c:	f006 f838 	bl	8006df0 <USB_CoreInit>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2202      	movs	r2, #2
 8000d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e0d7      	b.n	8000f42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 f89c 	bl	8006ed6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e04a      	b.n	8000e3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	333d      	adds	r3, #61	; 0x3d
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	333c      	adds	r3, #60	; 0x3c
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	3342      	adds	r3, #66	; 0x42
 8000de0:	4602      	mov	r2, r0
 8000de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	333f      	adds	r3, #63	; 0x3f
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	3344      	adds	r3, #68	; 0x44
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	3348      	adds	r3, #72	; 0x48
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3350      	adds	r3, #80	; 0x50
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3af      	bcc.n	8000da4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e044      	b.n	8000ed4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	1a9b      	subs	r3, r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3b5      	bcc.n	8000e4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	687e      	ldr	r6, [r7, #4]
 8000ee6:	466d      	mov	r5, sp
 8000ee8:	f106 0410 	add.w	r4, r6, #16
 8000eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000efc:	1d33      	adds	r3, r6, #4
 8000efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f00:	6838      	ldr	r0, [r7, #0]
 8000f02:	f006 f813 	bl	8006f2c <USB_DevInit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e014      	b.n	8000f42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f80b 	bl	8000f4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 f9c3 	bl	80072c6 <USB_DevDisconnect>

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_PCDEx_ActivateLPM+0x44>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	10000003 	.word	0x10000003

08000f94 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_PWREx_ConfigSupply+0x6c>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d008      	beq.n	8000fba <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_PWREx_ConfigSupply+0x6c>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d001      	beq.n	8000fba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e01d      	b.n	8000ff6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_PWREx_ConfigSupply+0x6c>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f023 0207 	bic.w	r2, r3, #7
 8000fc2:	490f      	ldr	r1, [pc, #60]	; (8001000 <HAL_PWREx_ConfigSupply+0x6c>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fca:	f7ff fb87 	bl	80006dc <HAL_GetTick>
 8000fce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000fd0:	e009      	b.n	8000fe6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8000fd2:	f7ff fb83 	bl	80006dc <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe0:	d901      	bls.n	8000fe6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e007      	b.n	8000ff6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_PWREx_ConfigSupply+0x6c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff2:	d1ee      	bne.n	8000fd2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	58024800 	.word	0x58024800

08001004 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800100e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	58024800 	.word	0x58024800

08001024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e3a4      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 8087 	beq.w	8001152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001044:	4b9a      	ldr	r3, [pc, #616]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800104e:	4b98      	ldr	r3, [pc, #608]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	2b10      	cmp	r3, #16
 8001058:	d007      	beq.n	800106a <HAL_RCC_OscConfig+0x46>
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	2b18      	cmp	r3, #24
 800105e:	d110      	bne.n	8001082 <HAL_RCC_OscConfig+0x5e>
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d10b      	bne.n	8001082 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106a:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d06c      	beq.n	8001150 <HAL_RCC_OscConfig+0x12c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d168      	bne.n	8001150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e37e      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x76>
 800108c:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e02e      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x98>
 80010a2:	4b83      	ldr	r3, [pc, #524]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a82      	ldr	r2, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b80      	ldr	r3, [pc, #512]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e01d      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0xbc>
 80010c6:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a79      	ldr	r2, [pc, #484]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b77      	ldr	r3, [pc, #476]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a76      	ldr	r2, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 80010e0:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a72      	ldr	r2, [pc, #456]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff faec 	bl	80006dc <HAL_GetTick>
 8001104:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fae8 	bl	80006dc <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e332      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0xe4>
 8001126:	e014      	b.n	8001152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fad8 	bl	80006dc <HAL_GetTick>
 800112c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fad4 	bl	80006dc <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e31e      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x10c>
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80b0 	beq.w	80012c0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001160:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001168:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_RCC_OscConfig+0x162>
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b18      	cmp	r3, #24
 800117a:	d149      	bne.n	8001210 <HAL_RCC_OscConfig+0x1ec>
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d144      	bne.n	8001210 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x17a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e2f0      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 0219 	bic.w	r2, r3, #25
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	4941      	ldr	r1, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fa94 	bl	80006dc <HAL_GetTick>
 80011b4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fa90 	bl	80006dc <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e2da      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	f7ff faaf 	bl	8000738 <HAL_GetREVID>
 80011da:	4602      	mov	r2, r0
 80011dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d80a      	bhi.n	80011fa <HAL_RCC_OscConfig+0x1d6>
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	031b      	lsls	r3, r3, #12
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f8:	e062      	b.n	80012c0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	061b      	lsls	r3, r3, #24
 8001208:	4929      	ldr	r1, [pc, #164]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800120e:	e057      	b.n	80012c0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d038      	beq.n	800128a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 0219 	bic.w	r2, r3, #25
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4922      	ldr	r1, [pc, #136]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fa57 	bl	80006dc <HAL_GetTick>
 800122e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fa53 	bl	80006dc <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e29d      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	f7ff fa72 	bl	8000738 <HAL_GetREVID>
 8001254:	4602      	mov	r2, r0
 8001256:	f241 0303 	movw	r3, #4099	; 0x1003
 800125a:	429a      	cmp	r2, r3
 800125c:	d80a      	bhi.n	8001274 <HAL_RCC_OscConfig+0x250>
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	031b      	lsls	r3, r3, #12
 800126c:	4910      	ldr	r1, [pc, #64]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
 8001272:	e025      	b.n	80012c0 <HAL_RCC_OscConfig+0x29c>
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	061b      	lsls	r3, r3, #24
 8001282:	490b      	ldr	r1, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
 8001288:	e01a      	b.n	80012c0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_RCC_OscConfig+0x28c>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001296:	f7ff fa21 	bl	80006dc <HAL_GetTick>
 800129a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fa1d 	bl	80006dc <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d903      	bls.n	80012b4 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e267      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
 80012b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b4:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 808f 	beq.w	80013ec <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ce:	4b9a      	ldr	r3, [pc, #616]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012d6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012d8:	4b97      	ldr	r3, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d007      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2d0>
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b18      	cmp	r3, #24
 80012e8:	d12d      	bne.n	8001346 <HAL_RCC_OscConfig+0x322>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d128      	bne.n	8001346 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012f4:	4b90      	ldr	r3, [pc, #576]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x2e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b80      	cmp	r3, #128	; 0x80
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e239      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800130c:	f7ff fa14 	bl	8000738 <HAL_GetREVID>
 8001310:	4602      	mov	r2, r0
 8001312:	f241 0303 	movw	r3, #4099	; 0x1003
 8001316:	429a      	cmp	r2, r3
 8001318:	d80a      	bhi.n	8001330 <HAL_RCC_OscConfig+0x30c>
 800131a:	4b87      	ldr	r3, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	069b      	lsls	r3, r3, #26
 8001328:	4983      	ldr	r1, [pc, #524]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800132e:	e05d      	b.n	80013ec <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	497e      	ldr	r1, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001344:	e052      	b.n	80013ec <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d035      	beq.n	80013ba <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800134e:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a79      	ldr	r2, [pc, #484]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff f9bf 	bl	80006dc <HAL_GetTick>
 800135e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001362:	f7ff f9bb 	bl	80006dc <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e205      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001374:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001380:	f7ff f9da 	bl	8000738 <HAL_GetREVID>
 8001384:	4602      	mov	r2, r0
 8001386:	f241 0303 	movw	r3, #4099	; 0x1003
 800138a:	429a      	cmp	r2, r3
 800138c:	d80a      	bhi.n	80013a4 <HAL_RCC_OscConfig+0x380>
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	069b      	lsls	r3, r3, #26
 800139c:	4966      	ldr	r1, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
 80013a2:	e023      	b.n	80013ec <HAL_RCC_OscConfig+0x3c8>
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	4961      	ldr	r1, [pc, #388]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60cb      	str	r3, [r1, #12]
 80013b8:	e018      	b.n	80013ec <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a5e      	ldr	r2, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80013c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff f989 	bl	80006dc <HAL_GetTick>
 80013ca:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013ce:	f7ff f985 	bl	80006dc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1cf      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013e0:	4b55      	ldr	r3, [pc, #340]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d036      	beq.n	8001466 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d019      	beq.n	8001434 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff f966 	bl	80006dc <HAL_GetTick>
 8001410:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff f962 	bl	80006dc <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1ac      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x3f0>
 8001432:	e018      	b.n	8001466 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001438:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff f94c 	bl	80006dc <HAL_GetTick>
 8001444:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff f948 	bl	80006dc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e192      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d019      	beq.n	80014ae <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a2e      	ldr	r2, [pc, #184]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001484:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001486:	f7ff f929 	bl	80006dc <HAL_GetTick>
 800148a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800148e:	f7ff f925 	bl	80006dc <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e16f      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x46a>
 80014ac:	e018      	b.n	80014e0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80014b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f90f 	bl	80006dc <HAL_GetTick>
 80014be:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014c2:	f7ff f90b 	bl	80006dc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e155      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8086 	beq.w	80015fa <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_RCC_OscConfig+0x518>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_RCC_OscConfig+0x518>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80014fa:	f7ff f8ef 	bl	80006dc <HAL_GetTick>
 80014fe:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff f8eb 	bl	80006dc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e135      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x518>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10b      	bne.n	8001540 <HAL_RCC_OscConfig+0x51c>
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a02      	ldr	r2, [pc, #8]	; (8001538 <HAL_RCC_OscConfig+0x514>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	e032      	b.n	800159c <HAL_RCC_OscConfig+0x578>
 8001536:	bf00      	nop
 8001538:	58024400 	.word	0x58024400
 800153c:	58024800 	.word	0x58024800
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x53e>
 8001548:	4b8f      	ldr	r3, [pc, #572]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a8e      	ldr	r2, [pc, #568]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b8c      	ldr	r3, [pc, #560]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a8b      	ldr	r2, [pc, #556]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x578>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x560>
 800156a:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a86      	ldr	r2, [pc, #536]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
 8001576:	4b84      	ldr	r3, [pc, #528]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a83      	ldr	r2, [pc, #524]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x578>
 8001584:	4b80      	ldr	r3, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a7f      	ldr	r2, [pc, #508]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a7c      	ldr	r2, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001596:	f023 0304 	bic.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d015      	beq.n	80015d0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff f89a 	bl	80006dc <HAL_GetTick>
 80015a8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff f896 	bl	80006dc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0de      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015c2:	4b71      	ldr	r3, [pc, #452]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ee      	beq.n	80015ac <HAL_RCC_OscConfig+0x588>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff f884 	bl	80006dc <HAL_GetTick>
 80015d4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff f880 	bl	80006dc <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0c8      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015ee:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ee      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80bd 	beq.w	800177e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001604:	4b60      	ldr	r3, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800160c:	2b18      	cmp	r3, #24
 800160e:	f000 80b4 	beq.w	800177a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	2b02      	cmp	r3, #2
 8001618:	f040 8095 	bne.w	8001746 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a59      	ldr	r2, [pc, #356]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff f858 	bl	80006dc <HAL_GetTick>
 800162c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff f854 	bl	80006dc <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e09e      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001642:	4b51      	ldr	r3, [pc, #324]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164e:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001652:	4b4e      	ldr	r3, [pc, #312]	; (800178c <HAL_RCC_OscConfig+0x768>)
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	430a      	orrs	r2, r1
 8001662:	4949      	ldr	r1, [pc, #292]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001664:	4313      	orrs	r3, r2
 8001666:	628b      	str	r3, [r1, #40]	; 0x28
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	3b01      	subs	r3, #1
 800166e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	3b01      	subs	r3, #1
 8001678:	025b      	lsls	r3, r3, #9
 800167a:	b29b      	uxth	r3, r3
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	3b01      	subs	r3, #1
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	3b01      	subs	r3, #1
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001698:	493b      	ldr	r1, [pc, #236]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800169a:	4313      	orrs	r3, r2
 800169c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	4a39      	ldr	r2, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x76c>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016b6:	00d2      	lsls	r2, r2, #3
 80016b8:	4933      	ldr	r1, [pc, #204]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f023 020c 	bic.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	492f      	ldr	r1, [pc, #188]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f023 0202 	bic.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	492a      	ldr	r1, [pc, #168]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	4a28      	ldr	r2, [pc, #160]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	4a22      	ldr	r2, [pc, #136]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7fe ffdd 	bl	80006dc <HAL_GetTick>
 8001722:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7fe ffd9 	bl	80006dc <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e023      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x702>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800174c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7fe ffc3 	bl	80006dc <HAL_GetTick>
 8001756:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175a:	f7fe ffbf 	bl	80006dc <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e009      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x764>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x736>
 8001778:	e001      	b.n	800177e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58024400 	.word	0x58024400
 800178c:	fffffc0c 	.word	0xfffffc0c
 8001790:	ffff0007 	.word	0xffff0007

08001794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e18b      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b8a      	ldr	r3, [pc, #552]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d910      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 020f 	bic.w	r2, r3, #15
 80017be:	4985      	ldr	r1, [pc, #532]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b83      	ldr	r3, [pc, #524]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e173      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d010      	beq.n	8001806 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d908      	bls.n	8001806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4975      	ldr	r1, [pc, #468]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001802:	4313      	orrs	r3, r2
 8001804:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d010      	beq.n	8001834 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800181e:	429a      	cmp	r2, r3
 8001820:	d908      	bls.n	8001834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001822:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	496a      	ldr	r1, [pc, #424]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d010      	beq.n	8001862 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800184c:	429a      	cmp	r2, r3
 800184e:	d908      	bls.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001850:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	495e      	ldr	r1, [pc, #376]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 800185e:	4313      	orrs	r3, r2
 8001860:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d010      	beq.n	8001890 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800187a:	429a      	cmp	r2, r3
 800187c:	d908      	bls.n	8001890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4953      	ldr	r1, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 800188c:	4313      	orrs	r3, r2
 800188e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d010      	beq.n	80018be <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d908      	bls.n	80018be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f023 020f 	bic.w	r2, r3, #15
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4947      	ldr	r1, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d055      	beq.n	8001976 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4940      	ldr	r1, [pc, #256]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d121      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0e5      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d115      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d9      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cd      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0c5      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4925      	ldr	r1, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001942:	4313      	orrs	r3, r2
 8001944:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7fe fec9 	bl	80006dc <HAL_GetTick>
 800194a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194c:	e00a      	b.n	8001964 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7fe fec5 	bl	80006dc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0ad      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	429a      	cmp	r2, r3
 8001974:	d1eb      	bne.n	800194e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	429a      	cmp	r2, r3
 8001990:	d208      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f023 020f 	bic.w	r2, r3, #15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x244>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d214      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 020f 	bic.w	r2, r3, #15
 80019ba:	4906      	ldr	r1, [pc, #24]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_RCC_ClockConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e075      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x32c>
 80019d4:	52002000 	.word	0x52002000
 80019d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d208      	bcs.n	8001a0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4930      	ldr	r1, [pc, #192]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d208      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4925      	ldr	r1, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d208      	bcs.n	8001a66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d208      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a94:	f000 f81e 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a98:	4601      	mov	r1, r0
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x334>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x338>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa21 f303 	lsr.w	r3, r1, r3
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_RCC_ClockConfig+0x33c>)
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7fe fdc7 	bl	8000648 <HAL_InitTick>
 8001aba:	4603      	mov	r3, r0
 8001abc:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001abe:	7afb      	ldrb	r3, [r7, #11]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	08007d80 	.word	0x08007d80
 8001ad0:	2400000c 	.word	0x2400000c

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ada:	4baf      	ldr	r3, [pc, #700]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae2:	2b18      	cmp	r3, #24
 8001ae4:	f200 814e 	bhi.w	8001d84 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b55 	.word	0x08001b55
 8001af4:	08001d85 	.word	0x08001d85
 8001af8:	08001d85 	.word	0x08001d85
 8001afc:	08001d85 	.word	0x08001d85
 8001b00:	08001d85 	.word	0x08001d85
 8001b04:	08001d85 	.word	0x08001d85
 8001b08:	08001d85 	.word	0x08001d85
 8001b0c:	08001d85 	.word	0x08001d85
 8001b10:	08001b7b 	.word	0x08001b7b
 8001b14:	08001d85 	.word	0x08001d85
 8001b18:	08001d85 	.word	0x08001d85
 8001b1c:	08001d85 	.word	0x08001d85
 8001b20:	08001d85 	.word	0x08001d85
 8001b24:	08001d85 	.word	0x08001d85
 8001b28:	08001d85 	.word	0x08001d85
 8001b2c:	08001d85 	.word	0x08001d85
 8001b30:	08001b81 	.word	0x08001b81
 8001b34:	08001d85 	.word	0x08001d85
 8001b38:	08001d85 	.word	0x08001d85
 8001b3c:	08001d85 	.word	0x08001d85
 8001b40:	08001d85 	.word	0x08001d85
 8001b44:	08001d85 	.word	0x08001d85
 8001b48:	08001d85 	.word	0x08001d85
 8001b4c:	08001d85 	.word	0x08001d85
 8001b50:	08001b87 	.word	0x08001b87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b54:	4b90      	ldr	r3, [pc, #576]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b60:	4b8d      	ldr	r3, [pc, #564]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	4a8c      	ldr	r2, [pc, #560]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001b72:	e10a      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b74:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001b76:	61bb      	str	r3, [r7, #24]
    break;
 8001b78:	e107      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001b7c:	61bb      	str	r3, [r7, #24]
    break;
 8001b7e:	e104      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001b82:	61bb      	str	r3, [r7, #24]
    break;
 8001b84:	e101      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b86:	4b84      	ldr	r3, [pc, #528]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80da 	beq.w	8001d7e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d05a      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x1b2>
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d302      	bcc.n	8001bda <HAL_RCC_GetSysClockFreq+0x106>
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d078      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f6>
 8001bd8:	e099      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bda:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02d      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001be6:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c10:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c24:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001c40:	e087      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001dac <HAL_RCC_GetSysClockFreq+0x2d8>
 8001c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c64:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c68:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c84:	e065      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c90:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001db0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c98:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ca8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cc8:	e043      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001db4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cec:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cf0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d0c:	e021      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d18:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001db0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d30:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d34:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001da8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d50:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d76:	ee17 3a90 	vmov	r3, s15
 8001d7a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001d7c:	e005      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
    break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001d86:	61bb      	str	r3, [r7, #24]
    break;
 8001d88:	bf00      	nop
  }

  return sysclockfreq;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3724      	adds	r7, #36	; 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	03d09000 	.word	0x03d09000
 8001da0:	003d0900 	.word	0x003d0900
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	46000000 	.word	0x46000000
 8001dac:	4c742400 	.word	0x4c742400
 8001db0:	4a742400 	.word	0x4a742400
 8001db4:	4af42400 	.word	0x4af42400

08001db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dbc:	f001 f9e2 	bl	8003184 <HAL_RCCEx_GetD1SysClockFreq>
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x30>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_RCC_GetHCLKFreq+0x34>)
 8001dd8:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_RCC_GetHCLKFreq+0x34>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	58024400 	.word	0x58024400
 8001de8:	08007d80 	.word	0x08007d80
 8001dec:	24000010 	.word	0x24000010

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001df4:	f7ff ffe0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001df8:	4601      	mov	r1, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	58024400 	.word	0x58024400
 8001e18:	08007d80 	.word	0x08007d80

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001e20:	f7ff ffca 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e24:	4601      	mov	r1, r0
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	58024400 	.word	0x58024400
 8001e44:	08007d80 	.word	0x08007d80

08001e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e50:	2300      	movs	r3, #0
 8001e52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e54:	2300      	movs	r3, #0
 8001e56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d03d      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e6c:	d013      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e72:	d802      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e78:	e01f      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001e84:	d01c      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001e86:	e018      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e88:	4baf      	ldr	r3, [pc, #700]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	4aae      	ldr	r2, [pc, #696]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001e94:	e015      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 f98d 	bl	80031bc <RCCEx_PLL2_Config>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001ea6:	e00c      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3324      	adds	r3, #36	; 0x24
 8001eac:	2102      	movs	r1, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fa36 	bl	8003320 <RCCEx_PLL3_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001eb8:	e003      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001ec8:	4b9f      	ldr	r3, [pc, #636]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed4:	499c      	ldr	r1, [pc, #624]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	650b      	str	r3, [r1, #80]	; 0x50
 8001eda:	e001      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d03d      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d826      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f11 	.word	0x08001f11
 8001f00:	08001f1f 	.word	0x08001f1f
 8001f04:	08001f31 	.word	0x08001f31
 8001f08:	08001f49 	.word	0x08001f49
 8001f0c:	08001f49 	.word	0x08001f49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f10:	4b8d      	ldr	r3, [pc, #564]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	4a8c      	ldr	r2, [pc, #560]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 f949 	bl	80031bc <RCCEx_PLL2_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3324      	adds	r3, #36	; 0x24
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 f9f2 	bl	8003320 <RCCEx_PLL3_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f50:	4b7d      	ldr	r3, [pc, #500]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f54:	f023 0207 	bic.w	r2, r3, #7
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	497a      	ldr	r1, [pc, #488]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	650b      	str	r3, [r1, #80]	; 0x50
 8001f62:	e001      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03e      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d01c      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d804      	bhi.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d00d      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001f88:	e01e      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8001f8c:	d01f      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f92:	d01e      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001f94:	e018      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	4a6b      	ldr	r2, [pc, #428]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001fa2:	e017      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f906 	bl	80031bc <RCCEx_PLL2_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001fb4:	e00e      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3324      	adds	r3, #36	; 0x24
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 f9af 	bl	8003320 <RCCEx_PLL3_Config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001fc6:	e005      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	75fb      	strb	r3, [r7, #23]
      break;
 8001fcc:	e002      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8001fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	4958      	ldr	r1, [pc, #352]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	650b      	str	r3, [r1, #80]	; 0x50
 8001fec:	e001      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d044      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d01f      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800200a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800200e:	d805      	bhi.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002018:	d00e      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800201a:	e01f      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800201c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002020:	d01f      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002026:	d01e      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002028:	e018      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4a46      	ldr	r2, [pc, #280]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002036:	e017      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f001 f8bc 	bl	80031bc <RCCEx_PLL2_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002048:	e00e      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3324      	adds	r3, #36	; 0x24
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f965 	bl	8003320 <RCCEx_PLL3_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800205a:	e005      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
      break;
 8002060:	e002      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800207c:	4932      	ldr	r1, [pc, #200]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800207e:	4313      	orrs	r3, r2
 8002080:	658b      	str	r3, [r1, #88]	; 0x58
 8002082:	e001      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d044      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800209a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800209e:	d01f      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80020a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a4:	d805      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80020aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ae:	d00e      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x286>
 80020b0:	e01f      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80020b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020b6:	d01f      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80020b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020bc:	d01e      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80020be:	e018      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020cc:	e017      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 f871 	bl	80031bc <RCCEx_PLL2_Config>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80020de:	e00e      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3324      	adds	r3, #36	; 0x24
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f001 f91a 	bl	8003320 <RCCEx_PLL3_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020f0:	e005      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80020fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002114:	4313      	orrs	r3, r2
 8002116:	658b      	str	r3, [r1, #88]	; 0x58
 8002118:	e001      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d035      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b10      	cmp	r3, #16
 8002130:	d00c      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002132:	2b10      	cmp	r3, #16
 8002134:	d802      	bhi.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01b      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800213a:	e017      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800213c:	2b20      	cmp	r3, #32
 800213e:	d00c      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002140:	2b30      	cmp	r3, #48	; 0x30
 8002142:	d018      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002144:	e012      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002146:	bf00      	nop
 8002148:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800214c:	4baf      	ldr	r3, [pc, #700]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	4aae      	ldr	r2, [pc, #696]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002158:	e00e      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	2102      	movs	r1, #2
 8002160:	4618      	mov	r0, r3
 8002162:	f001 f82b 	bl	80031bc <RCCEx_PLL2_Config>
 8002166:	4603      	mov	r3, r0
 8002168:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800216a:	e005      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	75fb      	strb	r3, [r7, #23]
      break;
 8002170:	e002      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800217e:	4ba3      	ldr	r3, [pc, #652]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218a:	49a0      	ldr	r1, [pc, #640]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002190:	e001      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d042      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	d01f      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80021ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b0:	d805      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x376>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ba:	d00e      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x392>
 80021bc:	e01f      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80021be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021c2:	d01f      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021c8:	d01e      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80021ca:	e018      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021cc:	4b8f      	ldr	r3, [pc, #572]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	4a8e      	ldr	r2, [pc, #568]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80021d8:	e017      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 ffeb 	bl	80031bc <RCCEx_PLL2_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80021ea:	e00e      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3324      	adds	r3, #36	; 0x24
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 f894 	bl	8003320 <RCCEx_PLL3_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80021fc:	e005      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002210:	4b7e      	ldr	r3, [pc, #504]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002214:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	497b      	ldr	r1, [pc, #492]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	650b      	str	r3, [r1, #80]	; 0x50
 8002222:	e001      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d042      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800223c:	d01b      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800223e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002242:	d805      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d022      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800224e:	e01b      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002254:	d01d      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225a:	d01c      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800225c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002260:	d01b      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002262:	e011      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f000 ffa6 	bl	80031bc <RCCEx_PLL2_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002274:	e012      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3324      	adds	r3, #36	; 0x24
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f84f 	bl	8003320 <RCCEx_PLL3_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
      break;
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800228e:	bf00      	nop
 8002290:	e004      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800229a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80022a2:	4b5a      	ldr	r3, [pc, #360]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	4957      	ldr	r1, [pc, #348]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	650b      	str	r3, [r1, #80]	; 0x50
 80022b4:	e001      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d044      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d0:	d01b      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80022d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d6:	d805      	bhi.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d022      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80022dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80022e2:	e01b      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d01d      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80022ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ee:	d01c      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80022f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80022f4:	d01b      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80022f6:	e011      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 ff5c 	bl	80031bc <RCCEx_PLL2_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002308:	e012      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3324      	adds	r3, #36	; 0x24
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f001 f805 	bl	8003320 <RCCEx_PLL3_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800231a:	e009      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	75fb      	strb	r3, [r7, #23]
      break;
 8002320:	e006      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002322:	bf00      	nop
 8002324:	e004      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002326:	bf00      	nop
 8002328:	e002      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800232a:	bf00      	nop
 800232c:	e000      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800232e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002344:	4931      	ldr	r1, [pc, #196]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	658b      	str	r3, [r1, #88]	; 0x58
 800234a:	e001      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d02d      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002364:	d005      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236a:	d009      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002370:	e00f      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	4a25      	ldr	r2, [pc, #148]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	2101      	movs	r1, #1
 8002386:	4618      	mov	r0, r3
 8002388:	f000 ff18 	bl	80031bc <RCCEx_PLL2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ac:	4917      	ldr	r1, [pc, #92]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	650b      	str	r3, [r1, #80]	; 0x50
 80023b2:	e001      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d035      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d81b      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002411 	.word	0x08002411
 80023d8:	080023e5 	.word	0x080023e5
 80023dc:	080023f3 	.word	0x080023f3
 80023e0:	08002411 	.word	0x08002411
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80023f0:	e00f      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fedf 	bl	80031bc <RCCEx_PLL2_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002402:	e006      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
      break;
 8002408:	e003      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800240a:	bf00      	nop
 800240c:	58024400 	.word	0x58024400
      break;
 8002410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002418:	4bba      	ldr	r3, [pc, #744]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	f023 0203 	bic.w	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	49b7      	ldr	r1, [pc, #732]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	64cb      	str	r3, [r1, #76]	; 0x4c
 800242a:	e001      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8086 	beq.w	800254a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243e:	4bb2      	ldr	r3, [pc, #712]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4ab1      	ldr	r2, [pc, #708]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800244a:	f7fe f947 	bl	80006dc <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002450:	e009      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe f943 	bl	80006dc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d902      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	75fb      	strb	r3, [r7, #23]
        break;
 8002464:	e005      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002466:	4ba8      	ldr	r3, [pc, #672]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ef      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d166      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002478:	4ba2      	ldr	r3, [pc, #648]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800247a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002482:	4053      	eors	r3, r2
 8002484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248c:	4b9d      	ldr	r3, [pc, #628]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002496:	4b9b      	ldr	r3, [pc, #620]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a9a      	ldr	r2, [pc, #616]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a2:	4b98      	ldr	r3, [pc, #608]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a97      	ldr	r2, [pc, #604]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80024ae:	4a95      	ldr	r2, [pc, #596]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d115      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe f90c 	bl	80006dc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024c6:	e00b      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe f908 	bl	80006dc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d902      	bls.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	75fb      	strb	r3, [r7, #23]
            break;
 80024de:	e005      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e0:	4b88      	ldr	r3, [pc, #544]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ed      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d126      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002500:	d10d      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002502:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002510:	0919      	lsrs	r1, r3, #4
 8002512:	4b7e      	ldr	r3, [pc, #504]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002514:	400b      	ands	r3, r1
 8002516:	497b      	ldr	r1, [pc, #492]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	610b      	str	r3, [r1, #16]
 800251c:	e005      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800251e:	4b79      	ldr	r3, [pc, #484]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	4a78      	ldr	r2, [pc, #480]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002524:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002528:	6113      	str	r3, [r2, #16]
 800252a:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800252c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	4972      	ldr	r1, [pc, #456]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	670b      	str	r3, [r1, #112]	; 0x70
 800253e:	e004      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	75bb      	strb	r3, [r7, #22]
 8002544:	e001      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07d      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255a:	2b28      	cmp	r3, #40	; 0x28
 800255c:	d866      	bhi.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002633 	.word	0x08002633
 8002568:	0800262d 	.word	0x0800262d
 800256c:	0800262d 	.word	0x0800262d
 8002570:	0800262d 	.word	0x0800262d
 8002574:	0800262d 	.word	0x0800262d
 8002578:	0800262d 	.word	0x0800262d
 800257c:	0800262d 	.word	0x0800262d
 8002580:	0800262d 	.word	0x0800262d
 8002584:	08002609 	.word	0x08002609
 8002588:	0800262d 	.word	0x0800262d
 800258c:	0800262d 	.word	0x0800262d
 8002590:	0800262d 	.word	0x0800262d
 8002594:	0800262d 	.word	0x0800262d
 8002598:	0800262d 	.word	0x0800262d
 800259c:	0800262d 	.word	0x0800262d
 80025a0:	0800262d 	.word	0x0800262d
 80025a4:	0800261b 	.word	0x0800261b
 80025a8:	0800262d 	.word	0x0800262d
 80025ac:	0800262d 	.word	0x0800262d
 80025b0:	0800262d 	.word	0x0800262d
 80025b4:	0800262d 	.word	0x0800262d
 80025b8:	0800262d 	.word	0x0800262d
 80025bc:	0800262d 	.word	0x0800262d
 80025c0:	0800262d 	.word	0x0800262d
 80025c4:	08002633 	.word	0x08002633
 80025c8:	0800262d 	.word	0x0800262d
 80025cc:	0800262d 	.word	0x0800262d
 80025d0:	0800262d 	.word	0x0800262d
 80025d4:	0800262d 	.word	0x0800262d
 80025d8:	0800262d 	.word	0x0800262d
 80025dc:	0800262d 	.word	0x0800262d
 80025e0:	0800262d 	.word	0x0800262d
 80025e4:	08002633 	.word	0x08002633
 80025e8:	0800262d 	.word	0x0800262d
 80025ec:	0800262d 	.word	0x0800262d
 80025f0:	0800262d 	.word	0x0800262d
 80025f4:	0800262d 	.word	0x0800262d
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	0800262d 	.word	0x0800262d
 8002600:	0800262d 	.word	0x0800262d
 8002604:	08002633 	.word	0x08002633
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fdd4 	bl	80031bc <RCCEx_PLL2_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002618:	e00c      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3324      	adds	r3, #36	; 0x24
 800261e:	2101      	movs	r1, #1
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fe7d 	bl	8003320 <RCCEx_PLL3_Config>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800262a:	e003      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
      break;
 8002630:	e000      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002646:	492f      	ldr	r1, [pc, #188]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	654b      	str	r3, [r1, #84]	; 0x54
 800264c:	e001      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d037      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	2b05      	cmp	r3, #5
 8002664:	d820      	bhi.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	080026af 	.word	0x080026af
 8002670:	08002685 	.word	0x08002685
 8002674:	08002697 	.word	0x08002697
 8002678:	080026af 	.word	0x080026af
 800267c:	080026af 	.word	0x080026af
 8002680:	080026af 	.word	0x080026af
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fd96 	bl	80031bc <RCCEx_PLL2_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002694:	e00c      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3324      	adds	r3, #36	; 0x24
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fe3f 	bl	8003320 <RCCEx_PLL3_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80026a6:	e003      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	75fb      	strb	r3, [r7, #23]
      break;
 80026ac:	e000      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80026ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	4910      	ldr	r1, [pc, #64]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	654b      	str	r3, [r1, #84]	; 0x54
 80026c8:	e001      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d040      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d827      	bhi.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	0800273b 	.word	0x0800273b
 80026f0:	08002711 	.word	0x08002711
 80026f4:	08002723 	.word	0x08002723
 80026f8:	0800273b 	.word	0x0800273b
 80026fc:	0800273b 	.word	0x0800273b
 8002700:	0800273b 	.word	0x0800273b
 8002704:	58024400 	.word	0x58024400
 8002708:	58024800 	.word	0x58024800
 800270c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fd50 	bl	80031bc <RCCEx_PLL2_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002720:	e00c      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3324      	adds	r3, #36	; 0x24
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fdf9 	bl	8003320 <RCCEx_PLL3_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002732:	e003      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	75fb      	strb	r3, [r7, #23]
      break;
 8002738:	e000      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800273a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002742:	4bb3      	ldr	r3, [pc, #716]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	49af      	ldr	r1, [pc, #700]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	658b      	str	r3, [r1, #88]	; 0x58
 8002756:	e001      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d044      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800276e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002772:	d01b      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002778:	d805      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d022      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800277e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002784:	e01b      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278a:	d01d      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800278c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002790:	d01c      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002796:	d01b      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002798:	e011      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fd0b 	bl	80031bc <RCCEx_PLL2_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80027aa:	e012      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fdb4 	bl	8003320 <RCCEx_PLL3_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80027bc:	e009      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
      break;
 80027c2:	e006      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80027c4:	bf00      	nop
 80027c6:	e004      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80027c8:	bf00      	nop
 80027ca:	e002      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80027cc:	bf00      	nop
 80027ce:	e000      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80027d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027d8:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e6:	498a      	ldr	r1, [pc, #552]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	654b      	str	r3, [r1, #84]	; 0x54
 80027ec:	e001      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d044      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002808:	d01b      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800280a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280e:	d805      	bhi.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800281a:	e01b      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d01d      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002822:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002826:	d01c      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800282c:	d01b      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800282e:	e011      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fcc0 	bl	80031bc <RCCEx_PLL2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002840:	e012      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3324      	adds	r3, #36	; 0x24
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fd69 	bl	8003320 <RCCEx_PLL3_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002852:	e009      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	75fb      	strb	r3, [r7, #23]
      break;
 8002858:	e006      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800285a:	bf00      	nop
 800285c:	e004      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800287c:	4964      	ldr	r1, [pc, #400]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	658b      	str	r3, [r1, #88]	; 0x58
 8002882:	e001      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d044      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800289a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800289e:	d01b      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80028a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a4:	d805      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d022      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80028b0:	e01b      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80028b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b6:	d01d      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80028b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80028bc:	d01c      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80028be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80028c2:	d01b      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80028c4:	e011      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fc75 	bl	80031bc <RCCEx_PLL2_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80028d6:	e012      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3324      	adds	r3, #36	; 0x24
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fd1e 	bl	8003320 <RCCEx_PLL3_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80028e8:	e009      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
      break;
 80028ee:	e006      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80028f0:	bf00      	nop
 80028f2:	e004      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80028f4:	bf00      	nop
 80028f6:	e002      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80028fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002904:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002912:	493f      	ldr	r1, [pc, #252]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	658b      	str	r3, [r1, #88]	; 0x58
 8002918:	e001      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01b      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002934:	d10b      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3324      	adds	r3, #36	; 0x24
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fcef 	bl	8003320 <RCCEx_PLL3_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75bb      	strb	r3, [r7, #22]
 800294c:	e009      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295c:	492c      	ldr	r1, [pc, #176]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01b      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002978:	d10b      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3324      	adds	r3, #36	; 0x24
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fccd 	bl	8003320 <RCCEx_PLL3_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75bb      	strb	r3, [r7, #22]
 8002990:	e009      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a0:	491b      	ldr	r1, [pc, #108]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d032      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d00d      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80029be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c2:	d016      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d111      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fbf4 	bl	80031bc <RCCEx_PLL2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80029d8:	e00c      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3324      	adds	r3, #36	; 0x24
 80029de:	2102      	movs	r1, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fc9d 	bl	8003320 <RCCEx_PLL3_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80029ea:	e003      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
      break;
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80029f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a08:	4901      	ldr	r1, [pc, #4]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a0e:	e003      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002a10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a2e:	d00c      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002a30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a34:	d015      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a3a:	d10f      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	4a78      	ldr	r2, [pc, #480]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002a48:	e00c      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3324      	adds	r3, #36	; 0x24
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fc65 	bl	8003320 <RCCEx_PLL3_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002a5a:	e003      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a60:	e000      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6a:	4b6e      	ldr	r3, [pc, #440]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a78:	496a      	ldr	r1, [pc, #424]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	654b      	str	r3, [r1, #84]	; 0x54
 8002a7e:	e001      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d029      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d007      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002a9e:	e00f      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4a5f      	ldr	r2, [pc, #380]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002aac:	e00b      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fb81 	bl	80031bc <RCCEx_PLL2_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002abe:	e002      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002acc:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	4952      	ldr	r1, [pc, #328]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ade:	e001      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3324      	adds	r3, #36	; 0x24
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fc12 	bl	8003320 <RCCEx_PLL3_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02f      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d00c      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d802      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d011      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002b26:	e00d      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2c:	d00f      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b32:	d00e      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002b34:	e006      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002b42:	e007      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
      break;
 8002b48:	e004      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b5a:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	492f      	ldr	r1, [pc, #188]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	654b      	str	r3, [r1, #84]	; 0x54
 8002b6c:	e001      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b7e:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4926      	ldr	r1, [pc, #152]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002baa:	491e      	ldr	r1, [pc, #120]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	4a11      	ldr	r2, [pc, #68]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002be4:	6113      	str	r3, [r2, #16]
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da08      	bge.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	4906      	ldr	r1, [pc, #24]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002c10:	7dbb      	ldrb	r3, [r7, #22]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	58024400 	.word	0x58024400

08002c28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002c2c:	f7ff f8c4 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8002c30:	4601      	mov	r1, r0
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	08007d80 	.word	0x08007d80

08002c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c5c:	4b9d      	ldr	r3, [pc, #628]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002c66:	4b9b      	ldr	r3, [pc, #620]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	0b1b      	lsrs	r3, r3, #12
 8002c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c70:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002c72:	4b98      	ldr	r3, [pc, #608]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002c7c:	4b95      	ldr	r3, [pc, #596]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 810a 	beq.w	8002eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d05a      	beq.n	8002d5c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d302      	bcc.n	8002cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d078      	beq.n	8002da0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002cae:	e099      	b.n	8002de4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cb0:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d02d      	beq.n	8002d18 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cbc:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	4a84      	ldr	r2, [pc, #528]	; (8002ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce6:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8002edc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8002d16:	e087      	b.n	8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8002d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8002edc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002d5a:	e065      	b.n	8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8002ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8002d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6e:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8002edc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002d9e:	e043      	b.n	8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002daa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8002dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db2:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8002edc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002de2:	e021      	b.n	8002e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8002df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002edc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002e26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	0a5b      	lsrs	r3, r3, #9
 8002e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4e:	ee17 2a90 	vmov	r2, s15
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7c:	ee17 2a90 	vmov	r2, s15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	0e1b      	lsrs	r3, r3, #24
 8002e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eaa:	ee17 2a90 	vmov	r2, s15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	58024400 	.word	0x58024400
 8002ed8:	03d09000 	.word	0x03d09000
 8002edc:	46000000 	.word	0x46000000
 8002ee0:	4c742400 	.word	0x4c742400
 8002ee4:	4a742400 	.word	0x4a742400
 8002ee8:	4af42400 	.word	0x4af42400

08002eec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ef4:	4b9d      	ldr	r3, [pc, #628]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002efe:	4b9b      	ldr	r3, [pc, #620]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	0d1b      	lsrs	r3, r3, #20
 8002f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f08:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002f0a:	4b98      	ldr	r3, [pc, #608]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002f14:	4b95      	ldr	r3, [pc, #596]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 810a 	beq.w	800314c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d05a      	beq.n	8002ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d302      	bcc.n	8002f48 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d078      	beq.n	8003038 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002f46:	e099      	b.n	800307c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d02d      	beq.n	8002fb0 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f54:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	4a84      	ldr	r2, [pc, #528]	; (8003170 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	ee07 3a90 	vmov	s15, r3
 8002f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8002f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002faa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8002fae:	e087      	b.n	80030c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003178 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8002fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8002fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002ff2:	e065      	b.n	80030c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800317c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003016:	ed97 6a03 	vldr	s12, [r7, #12]
 800301a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800301e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800302a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003036:	e043      	b.n	80030c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003042:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003180 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304a:	4b48      	ldr	r3, [pc, #288]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800305a:	ed97 6a03 	vldr	s12, [r7, #12]
 800305e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800306a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800306e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800307a:	e021      	b.n	80030c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800317c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309e:	ed97 6a03 	vldr	s12, [r7, #12]
 80030a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003174 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	0a5b      	lsrs	r3, r3, #9
 80030c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80030da:	edd7 6a07 	vldr	s13, [r7, #28]
 80030de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e6:	ee17 2a90 	vmov	r2, s15
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003104:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003108:	edd7 6a07 	vldr	s13, [r7, #28]
 800310c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003114:	ee17 2a90 	vmov	r2, s15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	0e1b      	lsrs	r3, r3, #24
 8003122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003136:	edd7 6a07 	vldr	s13, [r7, #28]
 800313a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003142:	ee17 2a90 	vmov	r2, s15
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800314a:	e008      	b.n	800315e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
}
 800315e:	bf00      	nop
 8003160:	3724      	adds	r7, #36	; 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
 8003170:	03d09000 	.word	0x03d09000
 8003174:	46000000 	.word	0x46000000
 8003178:	4c742400 	.word	0x4c742400
 800317c:	4a742400 	.word	0x4a742400
 8003180:	4af42400 	.word	0x4af42400

08003184 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003188:	f7fe fca4 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 800318c:	4601      	mov	r1, r0
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	4a06      	ldr	r2, [pc, #24]	; (80031b4 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800319a:	5cd3      	ldrb	r3, [r2, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa21 f303 	lsr.w	r3, r1, r3
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80031a6:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	58024400 	.word	0x58024400
 80031b4:	08007d80 	.word	0x08007d80
 80031b8:	2400000c 	.word	0x2400000c

080031bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80031ca:	4b53      	ldr	r3, [pc, #332]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d101      	bne.n	80031da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e099      	b.n	800330e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80031da:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a4e      	ldr	r2, [pc, #312]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80031e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e6:	f7fd fa79 	bl	80006dc <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80031ec:	e008      	b.n	8003200 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80031ee:	f7fd fa75 	bl	80006dc <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e086      	b.n	800330e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800320c:	4b42      	ldr	r3, [pc, #264]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	031b      	lsls	r3, r3, #12
 800321a:	493f      	ldr	r1, [pc, #252]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	628b      	str	r3, [r1, #40]	; 0x28
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	3b01      	subs	r3, #1
 8003226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	3b01      	subs	r3, #1
 8003230:	025b      	lsls	r3, r3, #9
 8003232:	b29b      	uxth	r3, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	3b01      	subs	r3, #1
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	3b01      	subs	r3, #1
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003250:	4931      	ldr	r1, [pc, #196]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	492d      	ldr	r1, [pc, #180]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f023 0220 	bic.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4928      	ldr	r1, [pc, #160]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	4a26      	ldr	r2, [pc, #152]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003280:	f023 0310 	bic.w	r3, r3, #16
 8003284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <RCCEx_PLL2_Config+0x160>)
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	69d2      	ldr	r2, [r2, #28]
 8003292:	00d2      	lsls	r2, r2, #3
 8003294:	4920      	ldr	r1, [pc, #128]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032b8:	e00f      	b.n	80032da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032cc:	e005      	b.n	80032da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	4a11      	ldr	r2, [pc, #68]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 80032e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e6:	f7fd f9f9 	bl	80006dc <HAL_GetTick>
 80032ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032ec:	e008      	b.n	8003300 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80032ee:	f7fd f9f5 	bl	80006dc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <RCCEx_PLL2_Config+0x15c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
 800331c:	ffff0007 	.word	0xffff0007

08003320 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b03      	cmp	r3, #3
 8003338:	d101      	bne.n	800333e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e099      	b.n	8003472 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800333e:	4b4f      	ldr	r3, [pc, #316]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a4e      	ldr	r2, [pc, #312]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334a:	f7fd f9c7 	bl	80006dc <HAL_GetTick>
 800334e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003350:	e008      	b.n	8003364 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003352:	f7fd f9c3 	bl	80006dc <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e086      	b.n	8003472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003364:	4b45      	ldr	r3, [pc, #276]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003370:	4b42      	ldr	r3, [pc, #264]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	493f      	ldr	r1, [pc, #252]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	628b      	str	r3, [r1, #40]	; 0x28
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	3b01      	subs	r3, #1
 800338a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	025b      	lsls	r3, r3, #9
 8003396:	b29b      	uxth	r3, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033b4:	4931      	ldr	r1, [pc, #196]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80033ba:	4b30      	ldr	r3, [pc, #192]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	492d      	ldr	r1, [pc, #180]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	4928      	ldr	r1, [pc, #160]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <RCCEx_PLL3_Config+0x160>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	69d2      	ldr	r2, [r2, #28]
 80033f6:	00d2      	lsls	r2, r2, #3
 80033f8:	4920      	ldr	r1, [pc, #128]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80033fe:	4b1f      	ldr	r3, [pc, #124]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800341a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800341c:	e00f      	b.n	800343e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 800342a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003430:	e005      	b.n	800343e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4a11      	ldr	r2, [pc, #68]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344a:	f7fd f947 	bl	80006dc <HAL_GetTick>
 800344e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003450:	e008      	b.n	8003464 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003452:	f7fd f943 	bl	80006dc <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <RCCEx_PLL3_Config+0x15c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	58024400 	.word	0x58024400
 8003480:	ffff0007 	.word	0xffff0007

08003484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e01d      	b.n	80034d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f004 fa80 	bl	80079b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f000 fbd0 	bl	8003c68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e01d      	b.n	8003528 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f815 	bl	8003530 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f000 fba5 	bl	8003c68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff8c 	bl	8004474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_TIM_PWM_Start+0x98>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_TIM_PWM_Start+0x4a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_TIM_PWM_Start+0x9c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIM_PWM_Start+0x4a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIM_PWM_Start+0xa0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_PWM_Start+0x4a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIM_PWM_Start+0xa4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_PWM_Start+0x4a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_TIM_PWM_Start+0xa8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_TIM_PWM_Start+0x4e>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_TIM_PWM_Start+0x50>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_TIM_PWM_Start+0xac>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d00b      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x8e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d007      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010400 	.word	0x40010400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800
 80035f0:	00010007 	.word	0x00010007

080035f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0202 	mvn.w	r2, #2
 8003620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 faf8 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 faea 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fafb 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0204 	mvn.w	r2, #4
 8003674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 face 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fac0 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fad1 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0208 	mvn.w	r2, #8
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 faa4 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa96 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 faa7 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b10      	cmp	r3, #16
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b10      	cmp	r3, #16
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2208      	movs	r2, #8
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa7a 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa6c 	bl	8003c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa7d 	bl	8003c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0201 	mvn.w	r2, #1
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa46 	bl	8003c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fef4 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b2:	d10e      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d107      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fee7 	bl	80045a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d10e      	bne.n	80037fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fa2b 	bl	8003c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b20      	cmp	r3, #32
 800380a:	d10e      	bne.n	800382a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d107      	bne.n	800382a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 0220 	mvn.w	r2, #32
 8003822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fea7 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800384a:	2302      	movs	r3, #2
 800384c:	e105      	b.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x226>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b14      	cmp	r3, #20
 8003862:	f200 80f0 	bhi.w	8003a46 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003866:	a201      	add	r2, pc, #4	; (adr r2, 800386c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	080038c1 	.word	0x080038c1
 8003870:	08003a47 	.word	0x08003a47
 8003874:	08003a47 	.word	0x08003a47
 8003878:	08003a47 	.word	0x08003a47
 800387c:	08003901 	.word	0x08003901
 8003880:	08003a47 	.word	0x08003a47
 8003884:	08003a47 	.word	0x08003a47
 8003888:	08003a47 	.word	0x08003a47
 800388c:	08003943 	.word	0x08003943
 8003890:	08003a47 	.word	0x08003a47
 8003894:	08003a47 	.word	0x08003a47
 8003898:	08003a47 	.word	0x08003a47
 800389c:	08003983 	.word	0x08003983
 80038a0:	08003a47 	.word	0x08003a47
 80038a4:	08003a47 	.word	0x08003a47
 80038a8:	08003a47 	.word	0x08003a47
 80038ac:	080039c5 	.word	0x080039c5
 80038b0:	08003a47 	.word	0x08003a47
 80038b4:	08003a47 	.word	0x08003a47
 80038b8:	08003a47 	.word	0x08003a47
 80038bc:	08003a05 	.word	0x08003a05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fa68 	bl	8003d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0208 	orr.w	r2, r2, #8
 80038da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6999      	ldr	r1, [r3, #24]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	619a      	str	r2, [r3, #24]
      break;
 80038fe:	e0a3      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fad8 	bl	8003ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6999      	ldr	r1, [r3, #24]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	021a      	lsls	r2, r3, #8
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	619a      	str	r2, [r3, #24]
      break;
 8003940:	e082      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fb41 	bl	8003fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0208 	orr.w	r2, r2, #8
 800395c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0204 	bic.w	r2, r2, #4
 800396c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69d9      	ldr	r1, [r3, #28]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	61da      	str	r2, [r3, #28]
      break;
 8003980:	e062      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fba7 	bl	80040dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69d9      	ldr	r1, [r3, #28]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	021a      	lsls	r2, r3, #8
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	61da      	str	r2, [r3, #28]
      break;
 80039c2:	e041      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fbee 	bl	80041ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0208 	orr.w	r2, r2, #8
 80039de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a02:	e021      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fc30 	bl	8004270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	021a      	lsls	r2, r3, #8
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a44:	e000      	b.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003a46:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIM_ConfigClockSource+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e0b7      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x188>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4b57      	ldr	r3, [pc, #348]	; (8003bf4 <HAL_TIM_ConfigClockSource+0x190>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d02e      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0xae>
 8003ab4:	2b70      	cmp	r3, #112	; 0x70
 8003ab6:	d812      	bhi.n	8003ade <HAL_TIM_ConfigClockSource+0x7a>
 8003ab8:	2b30      	cmp	r3, #48	; 0x30
 8003aba:	f000 8084 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003abe:	2b30      	cmp	r3, #48	; 0x30
 8003ac0:	d806      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x6c>
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d07f      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d07d      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d07b      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ace:	e084      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003ad0:	2b50      	cmp	r3, #80	; 0x50
 8003ad2:	d048      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x102>
 8003ad4:	2b60      	cmp	r3, #96	; 0x60
 8003ad6:	d056      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x122>
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d064      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8003adc:	e07d      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003ade:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ae2:	d070      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003ae4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003ae8:	d809      	bhi.n	8003afe <HAL_TIM_ConfigClockSource+0x9a>
 8003aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aee:	d027      	beq.n	8003b40 <HAL_TIM_ConfigClockSource+0xdc>
 8003af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af4:	d067      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d06d      	beq.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003afc:	e06d      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003afe:	4a3e      	ldr	r2, [pc, #248]	; (8003bf8 <HAL_TIM_ConfigClockSource+0x194>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d060      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003b04:	4a3d      	ldr	r2, [pc, #244]	; (8003bfc <HAL_TIM_ConfigClockSource+0x198>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d05d      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <HAL_TIM_ConfigClockSource+0x19c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d05a      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003b10:	e063      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6899      	ldr	r1, [r3, #8]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f000 fc87 	bl	8004434 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	609a      	str	r2, [r3, #8]
      break;
 8003b3e:	e04c      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6899      	ldr	r1, [r3, #8]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f000 fc70 	bl	8004434 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b62:	609a      	str	r2, [r3, #8]
      break;
 8003b64:	e039      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 fbe0 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2150      	movs	r1, #80	; 0x50
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fc3a 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 8003b84:	e029      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 fbff 	bl	8004396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2160      	movs	r1, #96	; 0x60
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fc2a 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e019      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 fbc0 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2140      	movs	r1, #64	; 0x40
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fc1a 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e009      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f000 fc11 	bl	80043f8 <TIM_ITRx_SetConfig>
      break;
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003bd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	ffceff88 	.word	0xffceff88
 8003bf8:	00100030 	.word	0x00100030
 8003bfc:	00100040 	.word	0x00100040
 8003c00:	00100020 	.word	0x00100020

08003c04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a40      	ldr	r2, [pc, #256]	; (8003d7c <TIM_Base_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d00f      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3d      	ldr	r2, [pc, #244]	; (8003d80 <TIM_Base_SetConfig+0x118>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <TIM_Base_SetConfig+0x11c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <TIM_Base_SetConfig+0x120>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <TIM_Base_SetConfig+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <TIM_Base_SetConfig+0x114>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01f      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d01b      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	; (8003d80 <TIM_Base_SetConfig+0x118>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d017      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <TIM_Base_SetConfig+0x11c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <TIM_Base_SetConfig+0x120>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00f      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <TIM_Base_SetConfig+0x124>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <TIM_Base_SetConfig+0x128>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <TIM_Base_SetConfig+0x12c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x9a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <TIM_Base_SetConfig+0x130>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <TIM_Base_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <TIM_Base_SetConfig+0x124>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <TIM_Base_SetConfig+0x128>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <TIM_Base_SetConfig+0x12c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0xf8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0f      	ldr	r2, [pc, #60]	; (8003d98 <TIM_Base_SetConfig+0x130>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d103      	bne.n	8003d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40010400 	.word	0x40010400
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400
 8003d98:	40014800 	.word	0x40014800

08003d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <TIM_OC1_SetConfig+0x108>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 0302 	bic.w	r3, r3, #2
 8003de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <TIM_OC1_SetConfig+0x10c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <TIM_OC1_SetConfig+0x7c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <TIM_OC1_SetConfig+0x110>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_OC1_SetConfig+0x7c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <TIM_OC1_SetConfig+0x114>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_OC1_SetConfig+0x7c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <TIM_OC1_SetConfig+0x118>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC1_SetConfig+0x7c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <TIM_OC1_SetConfig+0x11c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10c      	bne.n	8003e32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0308 	bic.w	r3, r3, #8
 8003e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1c      	ldr	r2, [pc, #112]	; (8003ea8 <TIM_OC1_SetConfig+0x10c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00f      	beq.n	8003e5a <TIM_OC1_SetConfig+0xbe>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <TIM_OC1_SetConfig+0x110>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00b      	beq.n	8003e5a <TIM_OC1_SetConfig+0xbe>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <TIM_OC1_SetConfig+0x114>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <TIM_OC1_SetConfig+0xbe>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <TIM_OC1_SetConfig+0x118>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_OC1_SetConfig+0xbe>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <TIM_OC1_SetConfig+0x11c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d111      	bne.n	8003e7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	621a      	str	r2, [r3, #32]
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	fffeff8f 	.word	0xfffeff8f
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800

08003ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0210 	bic.w	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <TIM_OC2_SetConfig+0xfc>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0320 	bic.w	r3, r3, #32
 8003f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <TIM_OC2_SetConfig+0x100>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC2_SetConfig+0x68>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <TIM_OC2_SetConfig+0x104>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10d      	bne.n	8003f40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <TIM_OC2_SetConfig+0x100>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00f      	beq.n	8003f68 <TIM_OC2_SetConfig+0xac>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <TIM_OC2_SetConfig+0x104>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <TIM_OC2_SetConfig+0xac>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <TIM_OC2_SetConfig+0x108>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d007      	beq.n	8003f68 <TIM_OC2_SetConfig+0xac>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <TIM_OC2_SetConfig+0x10c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_OC2_SetConfig+0xac>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <TIM_OC2_SetConfig+0x110>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d113      	bne.n	8003f90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	feff8fff 	.word	0xfeff8fff
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a27      	ldr	r2, [pc, #156]	; (80040c8 <TIM_OC3_SetConfig+0xf8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_OC3_SetConfig+0x66>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <TIM_OC3_SetConfig+0xfc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10d      	bne.n	8004052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800403c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <TIM_OC3_SetConfig+0xf8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_OC3_SetConfig+0xaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <TIM_OC3_SetConfig+0xfc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_OC3_SetConfig+0xaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <TIM_OC3_SetConfig+0x100>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_OC3_SetConfig+0xaa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <TIM_OC3_SetConfig+0x104>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC3_SetConfig+0xaa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_OC3_SetConfig+0x108>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d113      	bne.n	80040a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010400 	.word	0x40010400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	031b      	lsls	r3, r3, #12
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a18      	ldr	r2, [pc, #96]	; (8004198 <TIM_OC4_SetConfig+0xbc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_OC4_SetConfig+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <TIM_OC4_SetConfig+0xc0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC4_SetConfig+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <TIM_OC4_SetConfig+0xc4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC4_SetConfig+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <TIM_OC4_SetConfig+0xc8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC4_SetConfig+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <TIM_OC4_SetConfig+0xcc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d109      	bne.n	8004170 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800

080041ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a17      	ldr	r2, [pc, #92]	; (800425c <TIM_OC5_SetConfig+0xb0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_OC5_SetConfig+0x76>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a16      	ldr	r2, [pc, #88]	; (8004260 <TIM_OC5_SetConfig+0xb4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_OC5_SetConfig+0x76>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <TIM_OC5_SetConfig+0xb8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_OC5_SetConfig+0x76>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <TIM_OC5_SetConfig+0xbc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_OC5_SetConfig+0x76>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <TIM_OC5_SetConfig+0xc0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d109      	bne.n	8004236 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40010000 	.word	0x40010000
 8004260:	40010400 	.word	0x40010400
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	051b      	lsls	r3, r3, #20
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a18      	ldr	r2, [pc, #96]	; (8004324 <TIM_OC6_SetConfig+0xb4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_OC6_SetConfig+0x78>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <TIM_OC6_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC6_SetConfig+0x78>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <TIM_OC6_SetConfig+0xbc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC6_SetConfig+0x78>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <TIM_OC6_SetConfig+0xc0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC6_SetConfig+0x78>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a14      	ldr	r2, [pc, #80]	; (8004334 <TIM_OC6_SetConfig+0xc4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40010400 	.word	0x40010400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0201 	bic.w	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 030a 	bic.w	r3, r3, #10
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0210 	bic.w	r2, r3, #16
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <TIM_ITRx_SetConfig+0x38>)
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	f043 0307 	orr.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	609a      	str	r2, [r3, #8]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	ffcfff8f 	.word	0xffcfff8f

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e045      	b.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e042      	b.n	800464c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f003 fa93 	bl	8007b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2224      	movs	r2, #36	; 0x24
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f82e 	bl	8004658 <UART_SetConfig>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e022      	b.n	800464c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f002 f99c 	bl	800694c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004632:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f002 fa23 	bl	8006a90 <UART_CheckIdleState>
 800464a:	4603      	mov	r3, r0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	0000      	movs	r0, r0
	...

08004658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800465c:	b08e      	sub	sp, #56	; 0x38
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004662:	2300      	movs	r3, #0
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4313      	orrs	r3, r2
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468e:	4313      	orrs	r3, r2
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4bc1      	ldr	r3, [pc, #772]	; (80049a0 <UART_SetConfig+0x348>)
 800469a:	4013      	ands	r3, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046a2:	430b      	orrs	r3, r1
 80046a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4ab7      	ldr	r2, [pc, #732]	; (80049a4 <UART_SetConfig+0x34c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046d2:	4313      	orrs	r3, r2
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4bb2      	ldr	r3, [pc, #712]	; (80049a8 <UART_SetConfig+0x350>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f023 010f 	bic.w	r1, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4aa9      	ldr	r2, [pc, #676]	; (80049ac <UART_SetConfig+0x354>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d177      	bne.n	80047fa <UART_SetConfig+0x1a2>
 800470a:	4ba9      	ldr	r3, [pc, #676]	; (80049b0 <UART_SetConfig+0x358>)
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004712:	2b28      	cmp	r3, #40	; 0x28
 8004714:	d86c      	bhi.n	80047f0 <UART_SetConfig+0x198>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0xc4>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	080047c1 	.word	0x080047c1
 8004720:	080047f1 	.word	0x080047f1
 8004724:	080047f1 	.word	0x080047f1
 8004728:	080047f1 	.word	0x080047f1
 800472c:	080047f1 	.word	0x080047f1
 8004730:	080047f1 	.word	0x080047f1
 8004734:	080047f1 	.word	0x080047f1
 8004738:	080047f1 	.word	0x080047f1
 800473c:	080047c9 	.word	0x080047c9
 8004740:	080047f1 	.word	0x080047f1
 8004744:	080047f1 	.word	0x080047f1
 8004748:	080047f1 	.word	0x080047f1
 800474c:	080047f1 	.word	0x080047f1
 8004750:	080047f1 	.word	0x080047f1
 8004754:	080047f1 	.word	0x080047f1
 8004758:	080047f1 	.word	0x080047f1
 800475c:	080047d1 	.word	0x080047d1
 8004760:	080047f1 	.word	0x080047f1
 8004764:	080047f1 	.word	0x080047f1
 8004768:	080047f1 	.word	0x080047f1
 800476c:	080047f1 	.word	0x080047f1
 8004770:	080047f1 	.word	0x080047f1
 8004774:	080047f1 	.word	0x080047f1
 8004778:	080047f1 	.word	0x080047f1
 800477c:	080047d9 	.word	0x080047d9
 8004780:	080047f1 	.word	0x080047f1
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080047f1 	.word	0x080047f1
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080047f1 	.word	0x080047f1
 8004794:	080047f1 	.word	0x080047f1
 8004798:	080047f1 	.word	0x080047f1
 800479c:	080047e1 	.word	0x080047e1
 80047a0:	080047f1 	.word	0x080047f1
 80047a4:	080047f1 	.word	0x080047f1
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047f1 	.word	0x080047f1
 80047b4:	080047f1 	.word	0x080047f1
 80047b8:	080047f1 	.word	0x080047f1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047c6:	e233      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ce:	e22f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d6:	e22b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047de:	e227      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047e0:	2320      	movs	r3, #32
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e6:	e223      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047e8:	2340      	movs	r3, #64	; 0x40
 80047ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ee:	e21f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f6:	bf00      	nop
 80047f8:	e21a      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a6d      	ldr	r2, [pc, #436]	; (80049b4 <UART_SetConfig+0x35c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d132      	bne.n	800486a <UART_SetConfig+0x212>
 8004804:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <UART_SetConfig+0x358>)
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	2b05      	cmp	r3, #5
 800480e:	d827      	bhi.n	8004860 <UART_SetConfig+0x208>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x1c0>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	08004831 	.word	0x08004831
 800481c:	08004839 	.word	0x08004839
 8004820:	08004841 	.word	0x08004841
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004836:	e1fb      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800483e:	e1f7      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004846:	e1f3      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484e:	e1ef      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004850:	2320      	movs	r3, #32
 8004852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004856:	e1eb      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485e:	e1e7      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004866:	bf00      	nop
 8004868:	e1e2      	b.n	8004c30 <UART_SetConfig+0x5d8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <UART_SetConfig+0x360>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d132      	bne.n	80048da <UART_SetConfig+0x282>
 8004874:	4b4e      	ldr	r3, [pc, #312]	; (80049b0 <UART_SetConfig+0x358>)
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	2b05      	cmp	r3, #5
 800487e:	d827      	bhi.n	80048d0 <UART_SetConfig+0x278>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x230>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048b1 	.word	0x080048b1
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048a6:	e1c3      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ae:	e1bf      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e1bb      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048be:	e1b7      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048c0:	2320      	movs	r3, #32
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c6:	e1b3      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048c8:	2340      	movs	r3, #64	; 0x40
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ce:	e1af      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	bf00      	nop
 80048d8:	e1aa      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a37      	ldr	r2, [pc, #220]	; (80049bc <UART_SetConfig+0x364>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d132      	bne.n	800494a <UART_SetConfig+0x2f2>
 80048e4:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <UART_SetConfig+0x358>)
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d827      	bhi.n	8004940 <UART_SetConfig+0x2e8>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0x2a0>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004911 	.word	0x08004911
 80048fc:	08004919 	.word	0x08004919
 8004900:	08004921 	.word	0x08004921
 8004904:	08004929 	.word	0x08004929
 8004908:	08004931 	.word	0x08004931
 800490c:	08004939 	.word	0x08004939
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004916:	e18b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004918:	2304      	movs	r3, #4
 800491a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491e:	e187      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004920:	2308      	movs	r3, #8
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004926:	e183      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004928:	2310      	movs	r3, #16
 800492a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492e:	e17f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004930:	2320      	movs	r3, #32
 8004932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004936:	e17b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493e:	e177      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	bf00      	nop
 8004948:	e172      	b.n	8004c30 <UART_SetConfig+0x5d8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <UART_SetConfig+0x368>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d144      	bne.n	80049de <UART_SetConfig+0x386>
 8004954:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <UART_SetConfig+0x358>)
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	2b05      	cmp	r3, #5
 800495e:	d839      	bhi.n	80049d4 <UART_SetConfig+0x37c>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x310>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004981 	.word	0x08004981
 800496c:	08004989 	.word	0x08004989
 8004970:	08004991 	.word	0x08004991
 8004974:	08004999 	.word	0x08004999
 8004978:	080049c5 	.word	0x080049c5
 800497c:	080049cd 	.word	0x080049cd
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004986:	e153      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498e:	e14f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004996:	e14b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499e:	e147      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80049a0:	cfff69f3 	.word	0xcfff69f3
 80049a4:	58000c00 	.word	0x58000c00
 80049a8:	11fff4ff 	.word	0x11fff4ff
 80049ac:	40011000 	.word	0x40011000
 80049b0:	58024400 	.word	0x58024400
 80049b4:	40004400 	.word	0x40004400
 80049b8:	40004800 	.word	0x40004800
 80049bc:	40004c00 	.word	0x40004c00
 80049c0:	40005000 	.word	0x40005000
 80049c4:	2320      	movs	r3, #32
 80049c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ca:	e131      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80049cc:	2340      	movs	r3, #64	; 0x40
 80049ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049d2:	e12d      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049da:	bf00      	nop
 80049dc:	e128      	b.n	8004c30 <UART_SetConfig+0x5d8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4ac3      	ldr	r2, [pc, #780]	; (8004cf0 <UART_SetConfig+0x698>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d178      	bne.n	8004ada <UART_SetConfig+0x482>
 80049e8:	4bc2      	ldr	r3, [pc, #776]	; (8004cf4 <UART_SetConfig+0x69c>)
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f0:	2b28      	cmp	r3, #40	; 0x28
 80049f2:	d86d      	bhi.n	8004ad0 <UART_SetConfig+0x478>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x3a4>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004aa1 	.word	0x08004aa1
 8004a00:	08004ad1 	.word	0x08004ad1
 8004a04:	08004ad1 	.word	0x08004ad1
 8004a08:	08004ad1 	.word	0x08004ad1
 8004a0c:	08004ad1 	.word	0x08004ad1
 8004a10:	08004ad1 	.word	0x08004ad1
 8004a14:	08004ad1 	.word	0x08004ad1
 8004a18:	08004ad1 	.word	0x08004ad1
 8004a1c:	08004aa9 	.word	0x08004aa9
 8004a20:	08004ad1 	.word	0x08004ad1
 8004a24:	08004ad1 	.word	0x08004ad1
 8004a28:	08004ad1 	.word	0x08004ad1
 8004a2c:	08004ad1 	.word	0x08004ad1
 8004a30:	08004ad1 	.word	0x08004ad1
 8004a34:	08004ad1 	.word	0x08004ad1
 8004a38:	08004ad1 	.word	0x08004ad1
 8004a3c:	08004ab1 	.word	0x08004ab1
 8004a40:	08004ad1 	.word	0x08004ad1
 8004a44:	08004ad1 	.word	0x08004ad1
 8004a48:	08004ad1 	.word	0x08004ad1
 8004a4c:	08004ad1 	.word	0x08004ad1
 8004a50:	08004ad1 	.word	0x08004ad1
 8004a54:	08004ad1 	.word	0x08004ad1
 8004a58:	08004ad1 	.word	0x08004ad1
 8004a5c:	08004ab9 	.word	0x08004ab9
 8004a60:	08004ad1 	.word	0x08004ad1
 8004a64:	08004ad1 	.word	0x08004ad1
 8004a68:	08004ad1 	.word	0x08004ad1
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004ad1 	.word	0x08004ad1
 8004a74:	08004ad1 	.word	0x08004ad1
 8004a78:	08004ad1 	.word	0x08004ad1
 8004a7c:	08004ac1 	.word	0x08004ac1
 8004a80:	08004ad1 	.word	0x08004ad1
 8004a84:	08004ad1 	.word	0x08004ad1
 8004a88:	08004ad1 	.word	0x08004ad1
 8004a8c:	08004ad1 	.word	0x08004ad1
 8004a90:	08004ad1 	.word	0x08004ad1
 8004a94:	08004ad1 	.word	0x08004ad1
 8004a98:	08004ad1 	.word	0x08004ad1
 8004a9c:	08004ac9 	.word	0x08004ac9
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aa6:	e0c3      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aae:	e0bf      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab6:	e0bb      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004abe:	e0b7      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ac6:	e0b3      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ace:	e0af      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ad6:	bf00      	nop
 8004ad8:	e0aa      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a86      	ldr	r2, [pc, #536]	; (8004cf8 <UART_SetConfig+0x6a0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d132      	bne.n	8004b4a <UART_SetConfig+0x4f2>
 8004ae4:	4b83      	ldr	r3, [pc, #524]	; (8004cf4 <UART_SetConfig+0x69c>)
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d827      	bhi.n	8004b40 <UART_SetConfig+0x4e8>
 8004af0:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <UART_SetConfig+0x4a0>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b11 	.word	0x08004b11
 8004afc:	08004b19 	.word	0x08004b19
 8004b00:	08004b21 	.word	0x08004b21
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b39 	.word	0x08004b39
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e08b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b1e:	e087      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b20:	2308      	movs	r3, #8
 8004b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b26:	e083      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b2e:	e07f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b30:	2320      	movs	r3, #32
 8004b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b36:	e07b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3e:	e077      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b46:	bf00      	nop
 8004b48:	e072      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6b      	ldr	r2, [pc, #428]	; (8004cfc <UART_SetConfig+0x6a4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d132      	bne.n	8004bba <UART_SetConfig+0x562>
 8004b54:	4b67      	ldr	r3, [pc, #412]	; (8004cf4 <UART_SetConfig+0x69c>)
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	2b05      	cmp	r3, #5
 8004b5e:	d827      	bhi.n	8004bb0 <UART_SetConfig+0x558>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0x510>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	08004b91 	.word	0x08004b91
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b86:	e053      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b8e:	e04f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b96:	e04b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9e:	e047      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba6:	e043      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bae:	e03f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bb6:	bf00      	nop
 8004bb8:	e03a      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a50      	ldr	r2, [pc, #320]	; (8004d00 <UART_SetConfig+0x6a8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d132      	bne.n	8004c2a <UART_SetConfig+0x5d2>
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <UART_SetConfig+0x69c>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	2b05      	cmp	r3, #5
 8004bce:	d827      	bhi.n	8004c20 <UART_SetConfig+0x5c8>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x580>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004bf1 	.word	0x08004bf1
 8004bdc:	08004bf9 	.word	0x08004bf9
 8004be0:	08004c01 	.word	0x08004c01
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c11 	.word	0x08004c11
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bf6:	e01b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfe:	e017      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004c00:	2308      	movs	r3, #8
 8004c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c06:	e013      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004c10:	2320      	movs	r3, #32
 8004c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004c18:	2340      	movs	r3, #64	; 0x40
 8004c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1e:	e007      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <UART_SetConfig+0x5d8>
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a32      	ldr	r2, [pc, #200]	; (8004d00 <UART_SetConfig+0x6a8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f040 86f7 	bne.w	8005a2a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	f000 80c0 	beq.w	8004dc6 <UART_SetConfig+0x76e>
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	dc04      	bgt.n	8004c54 <UART_SetConfig+0x5fc>
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d00c      	beq.n	8004c68 <UART_SetConfig+0x610>
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d065      	beq.n	8004d1e <UART_SetConfig+0x6c6>
 8004c52:	e27a      	b.n	800514a <UART_SetConfig+0xaf2>
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	f000 81b0 	beq.w	8004fba <UART_SetConfig+0x962>
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	f000 821e 	beq.w	800509c <UART_SetConfig+0xa44>
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	f000 8104 	beq.w	8004e6e <UART_SetConfig+0x816>
 8004c66:	e270      	b.n	800514a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004c68:	f7fd ffde 	bl	8002c28 <HAL_RCCEx_GetD3PCLK1Freq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d04e      	beq.n	8004d14 <UART_SetConfig+0x6bc>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d048      	beq.n	8004d10 <UART_SetConfig+0x6b8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d042      	beq.n	8004d0c <UART_SetConfig+0x6b4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d03c      	beq.n	8004d08 <UART_SetConfig+0x6b0>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d036      	beq.n	8004d04 <UART_SetConfig+0x6ac>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d026      	beq.n	8004cec <UART_SetConfig+0x694>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d020      	beq.n	8004ce8 <UART_SetConfig+0x690>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	2b07      	cmp	r3, #7
 8004cac:	d01a      	beq.n	8004ce4 <UART_SetConfig+0x68c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d014      	beq.n	8004ce0 <UART_SetConfig+0x688>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	d00e      	beq.n	8004cdc <UART_SetConfig+0x684>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b0a      	cmp	r3, #10
 8004cc4:	d008      	beq.n	8004cd8 <UART_SetConfig+0x680>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b0b      	cmp	r3, #11
 8004ccc:	d102      	bne.n	8004cd4 <UART_SetConfig+0x67c>
 8004cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cd2:	e020      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e01e      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	e01c      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	e01a      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	e018      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	e016      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	e014      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004cec:	230a      	movs	r3, #10
 8004cee:	e012      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004cf0:	40011400 	.word	0x40011400
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	40007800 	.word	0x40007800
 8004cfc:	40007c00 	.word	0x40007c00
 8004d00:	58000c00 	.word	0x58000c00
 8004d04:	2308      	movs	r3, #8
 8004d06:	e006      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004d08:	2306      	movs	r3, #6
 8004d0a:	e004      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	e002      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e000      	b.n	8004d16 <UART_SetConfig+0x6be>
 8004d14:	2301      	movs	r3, #1
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d1c:	e219      	b.n	8005152 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d1e:	f107 0314 	add.w	r3, r7, #20
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd ff96 	bl	8002c54 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d044      	beq.n	8004dbc <UART_SetConfig+0x764>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d03e      	beq.n	8004db8 <UART_SetConfig+0x760>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d038      	beq.n	8004db4 <UART_SetConfig+0x75c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d032      	beq.n	8004db0 <UART_SetConfig+0x758>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d02c      	beq.n	8004dac <UART_SetConfig+0x754>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d026      	beq.n	8004da8 <UART_SetConfig+0x750>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d020      	beq.n	8004da4 <UART_SetConfig+0x74c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b07      	cmp	r3, #7
 8004d68:	d01a      	beq.n	8004da0 <UART_SetConfig+0x748>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d014      	beq.n	8004d9c <UART_SetConfig+0x744>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b09      	cmp	r3, #9
 8004d78:	d00e      	beq.n	8004d98 <UART_SetConfig+0x740>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b0a      	cmp	r3, #10
 8004d80:	d008      	beq.n	8004d94 <UART_SetConfig+0x73c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b0b      	cmp	r3, #11
 8004d88:	d102      	bne.n	8004d90 <UART_SetConfig+0x738>
 8004d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d8e:	e016      	b.n	8004dbe <UART_SetConfig+0x766>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e014      	b.n	8004dbe <UART_SetConfig+0x766>
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	e012      	b.n	8004dbe <UART_SetConfig+0x766>
 8004d98:	2340      	movs	r3, #64	; 0x40
 8004d9a:	e010      	b.n	8004dbe <UART_SetConfig+0x766>
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	e00e      	b.n	8004dbe <UART_SetConfig+0x766>
 8004da0:	2310      	movs	r3, #16
 8004da2:	e00c      	b.n	8004dbe <UART_SetConfig+0x766>
 8004da4:	230c      	movs	r3, #12
 8004da6:	e00a      	b.n	8004dbe <UART_SetConfig+0x766>
 8004da8:	230a      	movs	r3, #10
 8004daa:	e008      	b.n	8004dbe <UART_SetConfig+0x766>
 8004dac:	2308      	movs	r3, #8
 8004dae:	e006      	b.n	8004dbe <UART_SetConfig+0x766>
 8004db0:	2306      	movs	r3, #6
 8004db2:	e004      	b.n	8004dbe <UART_SetConfig+0x766>
 8004db4:	2304      	movs	r3, #4
 8004db6:	e002      	b.n	8004dbe <UART_SetConfig+0x766>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e000      	b.n	8004dbe <UART_SetConfig+0x766>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dc4:	e1c5      	b.n	8005152 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f88e 	bl	8002eec <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d044      	beq.n	8004e64 <UART_SetConfig+0x80c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d03e      	beq.n	8004e60 <UART_SetConfig+0x808>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d038      	beq.n	8004e5c <UART_SetConfig+0x804>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d032      	beq.n	8004e58 <UART_SetConfig+0x800>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d02c      	beq.n	8004e54 <UART_SetConfig+0x7fc>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	d026      	beq.n	8004e50 <UART_SetConfig+0x7f8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d020      	beq.n	8004e4c <UART_SetConfig+0x7f4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b07      	cmp	r3, #7
 8004e10:	d01a      	beq.n	8004e48 <UART_SetConfig+0x7f0>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d014      	beq.n	8004e44 <UART_SetConfig+0x7ec>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b09      	cmp	r3, #9
 8004e20:	d00e      	beq.n	8004e40 <UART_SetConfig+0x7e8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b0a      	cmp	r3, #10
 8004e28:	d008      	beq.n	8004e3c <UART_SetConfig+0x7e4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b0b      	cmp	r3, #11
 8004e30:	d102      	bne.n	8004e38 <UART_SetConfig+0x7e0>
 8004e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e36:	e016      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	e012      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e40:	2340      	movs	r3, #64	; 0x40
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e44:	2320      	movs	r3, #32
 8004e46:	e00e      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	e00c      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	e00a      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e50:	230a      	movs	r3, #10
 8004e52:	e008      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e54:	2308      	movs	r3, #8
 8004e56:	e006      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e58:	2306      	movs	r3, #6
 8004e5a:	e004      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	e002      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e000      	b.n	8004e66 <UART_SetConfig+0x80e>
 8004e64:	2301      	movs	r3, #1
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e6c:	e171      	b.n	8005152 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e6e:	4b7a      	ldr	r3, [pc, #488]	; (8005058 <UART_SetConfig+0xa00>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d054      	beq.n	8004f24 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e7a:	4b77      	ldr	r3, [pc, #476]	; (8005058 <UART_SetConfig+0xa00>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	4a75      	ldr	r2, [pc, #468]	; (800505c <UART_SetConfig+0xa04>)
 8004e86:	40da      	lsrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d044      	beq.n	8004f1a <UART_SetConfig+0x8c2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d03e      	beq.n	8004f16 <UART_SetConfig+0x8be>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d038      	beq.n	8004f12 <UART_SetConfig+0x8ba>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d032      	beq.n	8004f0e <UART_SetConfig+0x8b6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d02c      	beq.n	8004f0a <UART_SetConfig+0x8b2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d026      	beq.n	8004f06 <UART_SetConfig+0x8ae>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d020      	beq.n	8004f02 <UART_SetConfig+0x8aa>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2b07      	cmp	r3, #7
 8004ec6:	d01a      	beq.n	8004efe <UART_SetConfig+0x8a6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d014      	beq.n	8004efa <UART_SetConfig+0x8a2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2b09      	cmp	r3, #9
 8004ed6:	d00e      	beq.n	8004ef6 <UART_SetConfig+0x89e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2b0a      	cmp	r3, #10
 8004ede:	d008      	beq.n	8004ef2 <UART_SetConfig+0x89a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2b0b      	cmp	r3, #11
 8004ee6:	d102      	bne.n	8004eee <UART_SetConfig+0x896>
 8004ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eec:	e016      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e014      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	e012      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004ef6:	2340      	movs	r3, #64	; 0x40
 8004ef8:	e010      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004efa:	2320      	movs	r3, #32
 8004efc:	e00e      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004efe:	2310      	movs	r3, #16
 8004f00:	e00c      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f02:	230c      	movs	r3, #12
 8004f04:	e00a      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f06:	230a      	movs	r3, #10
 8004f08:	e008      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	e006      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e004      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f12:	2304      	movs	r3, #4
 8004f14:	e002      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e000      	b.n	8004f1c <UART_SetConfig+0x8c4>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004f22:	e116      	b.n	8005152 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d043      	beq.n	8004fb4 <UART_SetConfig+0x95c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d03d      	beq.n	8004fb0 <UART_SetConfig+0x958>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d037      	beq.n	8004fac <UART_SetConfig+0x954>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d031      	beq.n	8004fa8 <UART_SetConfig+0x950>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d02b      	beq.n	8004fa4 <UART_SetConfig+0x94c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d025      	beq.n	8004fa0 <UART_SetConfig+0x948>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b06      	cmp	r3, #6
 8004f5a:	d01f      	beq.n	8004f9c <UART_SetConfig+0x944>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b07      	cmp	r3, #7
 8004f62:	d019      	beq.n	8004f98 <UART_SetConfig+0x940>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d013      	beq.n	8004f94 <UART_SetConfig+0x93c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d00d      	beq.n	8004f90 <UART_SetConfig+0x938>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b0a      	cmp	r3, #10
 8004f7a:	d007      	beq.n	8004f8c <UART_SetConfig+0x934>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b0b      	cmp	r3, #11
 8004f82:	d101      	bne.n	8004f88 <UART_SetConfig+0x930>
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <UART_SetConfig+0xa08>)
 8004f86:	e016      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <UART_SetConfig+0xa04>)
 8004f8a:	e014      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <UART_SetConfig+0xa0c>)
 8004f8e:	e012      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004f90:	4b35      	ldr	r3, [pc, #212]	; (8005068 <UART_SetConfig+0xa10>)
 8004f92:	e010      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004f94:	4b35      	ldr	r3, [pc, #212]	; (800506c <UART_SetConfig+0xa14>)
 8004f96:	e00e      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004f98:	4b35      	ldr	r3, [pc, #212]	; (8005070 <UART_SetConfig+0xa18>)
 8004f9a:	e00c      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004f9c:	4b35      	ldr	r3, [pc, #212]	; (8005074 <UART_SetConfig+0xa1c>)
 8004f9e:	e00a      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <UART_SetConfig+0xa20>)
 8004fa2:	e008      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004fa4:	4b35      	ldr	r3, [pc, #212]	; (800507c <UART_SetConfig+0xa24>)
 8004fa6:	e006      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004fa8:	4b35      	ldr	r3, [pc, #212]	; (8005080 <UART_SetConfig+0xa28>)
 8004faa:	e004      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004fac:	4b35      	ldr	r3, [pc, #212]	; (8005084 <UART_SetConfig+0xa2c>)
 8004fae:	e002      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004fb0:	4b35      	ldr	r3, [pc, #212]	; (8005088 <UART_SetConfig+0xa30>)
 8004fb2:	e000      	b.n	8004fb6 <UART_SetConfig+0x95e>
 8004fb4:	4b29      	ldr	r3, [pc, #164]	; (800505c <UART_SetConfig+0xa04>)
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb8:	e0cb      	b.n	8005152 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d046      	beq.n	8005050 <UART_SetConfig+0x9f8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d040      	beq.n	800504c <UART_SetConfig+0x9f4>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d03a      	beq.n	8005048 <UART_SetConfig+0x9f0>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d034      	beq.n	8005044 <UART_SetConfig+0x9ec>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d02e      	beq.n	8005040 <UART_SetConfig+0x9e8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d028      	beq.n	800503c <UART_SetConfig+0x9e4>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b06      	cmp	r3, #6
 8004ff0:	d022      	beq.n	8005038 <UART_SetConfig+0x9e0>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b07      	cmp	r3, #7
 8004ff8:	d01c      	beq.n	8005034 <UART_SetConfig+0x9dc>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d016      	beq.n	8005030 <UART_SetConfig+0x9d8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b09      	cmp	r3, #9
 8005008:	d00f      	beq.n	800502a <UART_SetConfig+0x9d2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b0a      	cmp	r3, #10
 8005010:	d008      	beq.n	8005024 <UART_SetConfig+0x9cc>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b0b      	cmp	r3, #11
 8005018:	d102      	bne.n	8005020 <UART_SetConfig+0x9c8>
 800501a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800501e:	e018      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <UART_SetConfig+0xa18>)
 8005022:	e016      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005024:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005028:	e013      	b.n	8005052 <UART_SetConfig+0x9fa>
 800502a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800502e:	e010      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <UART_SetConfig+0xa34>)
 8005032:	e00e      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <UART_SetConfig+0xa08>)
 8005036:	e00c      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <UART_SetConfig+0xa38>)
 800503a:	e00a      	b.n	8005052 <UART_SetConfig+0x9fa>
 800503c:	4b15      	ldr	r3, [pc, #84]	; (8005094 <UART_SetConfig+0xa3c>)
 800503e:	e008      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <UART_SetConfig+0xa0c>)
 8005042:	e006      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005044:	4b14      	ldr	r3, [pc, #80]	; (8005098 <UART_SetConfig+0xa40>)
 8005046:	e004      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <UART_SetConfig+0xa10>)
 800504a:	e002      	b.n	8005052 <UART_SetConfig+0x9fa>
 800504c:	4b07      	ldr	r3, [pc, #28]	; (800506c <UART_SetConfig+0xa14>)
 800504e:	e000      	b.n	8005052 <UART_SetConfig+0x9fa>
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <UART_SetConfig+0xa18>)
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005054:	e07d      	b.n	8005152 <UART_SetConfig+0xafa>
 8005056:	bf00      	nop
 8005058:	58024400 	.word	0x58024400
 800505c:	03d09000 	.word	0x03d09000
 8005060:	0003d090 	.word	0x0003d090
 8005064:	0007a120 	.word	0x0007a120
 8005068:	000f4240 	.word	0x000f4240
 800506c:	001e8480 	.word	0x001e8480
 8005070:	003d0900 	.word	0x003d0900
 8005074:	00516155 	.word	0x00516155
 8005078:	0061a800 	.word	0x0061a800
 800507c:	007a1200 	.word	0x007a1200
 8005080:	00a2c2aa 	.word	0x00a2c2aa
 8005084:	00f42400 	.word	0x00f42400
 8005088:	01e84800 	.word	0x01e84800
 800508c:	0001e848 	.word	0x0001e848
 8005090:	00051615 	.word	0x00051615
 8005094:	00061a80 	.word	0x00061a80
 8005098:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d04e      	beq.n	8005142 <UART_SetConfig+0xaea>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d047      	beq.n	800513c <UART_SetConfig+0xae4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d040      	beq.n	8005136 <UART_SetConfig+0xade>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d039      	beq.n	8005130 <UART_SetConfig+0xad8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d032      	beq.n	800512a <UART_SetConfig+0xad2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	d02b      	beq.n	8005124 <UART_SetConfig+0xacc>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d024      	beq.n	800511e <UART_SetConfig+0xac6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b07      	cmp	r3, #7
 80050da:	d01d      	beq.n	8005118 <UART_SetConfig+0xac0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d016      	beq.n	8005112 <UART_SetConfig+0xaba>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b09      	cmp	r3, #9
 80050ea:	d00f      	beq.n	800510c <UART_SetConfig+0xab4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b0a      	cmp	r3, #10
 80050f2:	d008      	beq.n	8005106 <UART_SetConfig+0xaae>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b0b      	cmp	r3, #11
 80050fa:	d101      	bne.n	8005100 <UART_SetConfig+0xaa8>
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	e022      	b.n	8005146 <UART_SetConfig+0xaee>
 8005100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005104:	e01f      	b.n	8005146 <UART_SetConfig+0xaee>
 8005106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800510a:	e01c      	b.n	8005146 <UART_SetConfig+0xaee>
 800510c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005110:	e019      	b.n	8005146 <UART_SetConfig+0xaee>
 8005112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005116:	e016      	b.n	8005146 <UART_SetConfig+0xaee>
 8005118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800511c:	e013      	b.n	8005146 <UART_SetConfig+0xaee>
 800511e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005122:	e010      	b.n	8005146 <UART_SetConfig+0xaee>
 8005124:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005128:	e00d      	b.n	8005146 <UART_SetConfig+0xaee>
 800512a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512e:	e00a      	b.n	8005146 <UART_SetConfig+0xaee>
 8005130:	f241 5355 	movw	r3, #5461	; 0x1555
 8005134:	e007      	b.n	8005146 <UART_SetConfig+0xaee>
 8005136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800513a:	e004      	b.n	8005146 <UART_SetConfig+0xaee>
 800513c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005140:	e001      	b.n	8005146 <UART_SetConfig+0xaee>
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005148:	e003      	b.n	8005152 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8005150:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	f001 83e4 	beq.w	8006922 <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	429a      	cmp	r2, r3
 8005168:	d305      	bcc.n	8005176 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005172:	429a      	cmp	r2, r3
 8005174:	d904      	bls.n	8005180 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517c:	f001 bbd1 	b.w	8006922 <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 8005180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005184:	2b08      	cmp	r3, #8
 8005186:	f000 8153 	beq.w	8005430 <UART_SetConfig+0xdd8>
 800518a:	2b08      	cmp	r3, #8
 800518c:	dc06      	bgt.n	800519c <UART_SetConfig+0xb44>
 800518e:	2b02      	cmp	r3, #2
 8005190:	d00f      	beq.n	80051b2 <UART_SetConfig+0xb5a>
 8005192:	2b04      	cmp	r3, #4
 8005194:	f000 80ab 	beq.w	80052ee <UART_SetConfig+0xc96>
 8005198:	f000 bc30 	b.w	80059fc <UART_SetConfig+0x13a4>
 800519c:	2b20      	cmp	r3, #32
 800519e:	f000 832d 	beq.w	80057fc <UART_SetConfig+0x11a4>
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	f000 83a5 	beq.w	80058f2 <UART_SetConfig+0x129a>
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	f000 81e2 	beq.w	8005572 <UART_SetConfig+0xf1a>
 80051ae:	f000 bc25 	b.w	80059fc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b2:	f7fd fd39 	bl	8002c28 <HAL_RCCEx_GetD3PCLK1Freq>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f04f 0100 	mov.w	r1, #0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d067      	beq.n	8005296 <UART_SetConfig+0xc3e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d05e      	beq.n	800528c <UART_SetConfig+0xc34>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d055      	beq.n	8005282 <UART_SetConfig+0xc2a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d04c      	beq.n	8005278 <UART_SetConfig+0xc20>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d043      	beq.n	800526e <UART_SetConfig+0xc16>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d03a      	beq.n	8005264 <UART_SetConfig+0xc0c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d031      	beq.n	800525a <UART_SetConfig+0xc02>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b07      	cmp	r3, #7
 80051fc:	d028      	beq.n	8005250 <UART_SetConfig+0xbf8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b08      	cmp	r3, #8
 8005204:	d01f      	beq.n	8005246 <UART_SetConfig+0xbee>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b09      	cmp	r3, #9
 800520c:	d016      	beq.n	800523c <UART_SetConfig+0xbe4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b0a      	cmp	r3, #10
 8005214:	d00d      	beq.n	8005232 <UART_SetConfig+0xbda>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b0b      	cmp	r3, #11
 800521c:	d104      	bne.n	8005228 <UART_SetConfig+0xbd0>
 800521e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005222:	f04f 0400 	mov.w	r4, #0
 8005226:	e03a      	b.n	800529e <UART_SetConfig+0xc46>
 8005228:	f04f 0301 	mov.w	r3, #1
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	e035      	b.n	800529e <UART_SetConfig+0xc46>
 8005232:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005236:	f04f 0400 	mov.w	r4, #0
 800523a:	e030      	b.n	800529e <UART_SetConfig+0xc46>
 800523c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005240:	f04f 0400 	mov.w	r4, #0
 8005244:	e02b      	b.n	800529e <UART_SetConfig+0xc46>
 8005246:	f04f 0320 	mov.w	r3, #32
 800524a:	f04f 0400 	mov.w	r4, #0
 800524e:	e026      	b.n	800529e <UART_SetConfig+0xc46>
 8005250:	f04f 0310 	mov.w	r3, #16
 8005254:	f04f 0400 	mov.w	r4, #0
 8005258:	e021      	b.n	800529e <UART_SetConfig+0xc46>
 800525a:	f04f 030c 	mov.w	r3, #12
 800525e:	f04f 0400 	mov.w	r4, #0
 8005262:	e01c      	b.n	800529e <UART_SetConfig+0xc46>
 8005264:	f04f 030a 	mov.w	r3, #10
 8005268:	f04f 0400 	mov.w	r4, #0
 800526c:	e017      	b.n	800529e <UART_SetConfig+0xc46>
 800526e:	f04f 0308 	mov.w	r3, #8
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	e012      	b.n	800529e <UART_SetConfig+0xc46>
 8005278:	f04f 0306 	mov.w	r3, #6
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	e00d      	b.n	800529e <UART_SetConfig+0xc46>
 8005282:	f04f 0304 	mov.w	r3, #4
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	e008      	b.n	800529e <UART_SetConfig+0xc46>
 800528c:	f04f 0302 	mov.w	r3, #2
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	e003      	b.n	800529e <UART_SetConfig+0xc46>
 8005296:	f04f 0301 	mov.w	r3, #1
 800529a:	f04f 0400 	mov.w	r4, #0
 800529e:	461a      	mov	r2, r3
 80052a0:	4623      	mov	r3, r4
 80052a2:	f7fb f819 	bl	80002d8 <__aeabi_uldivmod>
 80052a6:	4603      	mov	r3, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	4619      	mov	r1, r3
 80052ac:	4622      	mov	r2, r4
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	0214      	lsls	r4, r2, #8
 80052b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80052bc:	020b      	lsls	r3, r1, #8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	0852      	lsrs	r2, r2, #1
 80052c4:	4611      	mov	r1, r2
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	eb13 0b01 	adds.w	fp, r3, r1
 80052ce:	eb44 0c02 	adc.w	ip, r4, r2
 80052d2:	4658      	mov	r0, fp
 80052d4:	4661      	mov	r1, ip
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f04f 0400 	mov.w	r4, #0
 80052de:	461a      	mov	r2, r3
 80052e0:	4623      	mov	r3, r4
 80052e2:	f7fa fff9 	bl	80002d8 <__aeabi_uldivmod>
 80052e6:	4603      	mov	r3, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80052ec:	e38a      	b.n	8005a04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ee:	f107 0314 	add.w	r3, r7, #20
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fcae 	bl	8002c54 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d067      	beq.n	80053d8 <UART_SetConfig+0xd80>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b01      	cmp	r3, #1
 800530e:	d05e      	beq.n	80053ce <UART_SetConfig+0xd76>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b02      	cmp	r3, #2
 8005316:	d055      	beq.n	80053c4 <UART_SetConfig+0xd6c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b03      	cmp	r3, #3
 800531e:	d04c      	beq.n	80053ba <UART_SetConfig+0xd62>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b04      	cmp	r3, #4
 8005326:	d043      	beq.n	80053b0 <UART_SetConfig+0xd58>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b05      	cmp	r3, #5
 800532e:	d03a      	beq.n	80053a6 <UART_SetConfig+0xd4e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b06      	cmp	r3, #6
 8005336:	d031      	beq.n	800539c <UART_SetConfig+0xd44>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b07      	cmp	r3, #7
 800533e:	d028      	beq.n	8005392 <UART_SetConfig+0xd3a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b08      	cmp	r3, #8
 8005346:	d01f      	beq.n	8005388 <UART_SetConfig+0xd30>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b09      	cmp	r3, #9
 800534e:	d016      	beq.n	800537e <UART_SetConfig+0xd26>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b0a      	cmp	r3, #10
 8005356:	d00d      	beq.n	8005374 <UART_SetConfig+0xd1c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	2b0b      	cmp	r3, #11
 800535e:	d104      	bne.n	800536a <UART_SetConfig+0xd12>
 8005360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	e03a      	b.n	80053e0 <UART_SetConfig+0xd88>
 800536a:	f04f 0301 	mov.w	r3, #1
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	e035      	b.n	80053e0 <UART_SetConfig+0xd88>
 8005374:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005378:	f04f 0400 	mov.w	r4, #0
 800537c:	e030      	b.n	80053e0 <UART_SetConfig+0xd88>
 800537e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	e02b      	b.n	80053e0 <UART_SetConfig+0xd88>
 8005388:	f04f 0320 	mov.w	r3, #32
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	e026      	b.n	80053e0 <UART_SetConfig+0xd88>
 8005392:	f04f 0310 	mov.w	r3, #16
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	e021      	b.n	80053e0 <UART_SetConfig+0xd88>
 800539c:	f04f 030c 	mov.w	r3, #12
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	e01c      	b.n	80053e0 <UART_SetConfig+0xd88>
 80053a6:	f04f 030a 	mov.w	r3, #10
 80053aa:	f04f 0400 	mov.w	r4, #0
 80053ae:	e017      	b.n	80053e0 <UART_SetConfig+0xd88>
 80053b0:	f04f 0308 	mov.w	r3, #8
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	e012      	b.n	80053e0 <UART_SetConfig+0xd88>
 80053ba:	f04f 0306 	mov.w	r3, #6
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	e00d      	b.n	80053e0 <UART_SetConfig+0xd88>
 80053c4:	f04f 0304 	mov.w	r3, #4
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	e008      	b.n	80053e0 <UART_SetConfig+0xd88>
 80053ce:	f04f 0302 	mov.w	r3, #2
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	e003      	b.n	80053e0 <UART_SetConfig+0xd88>
 80053d8:	f04f 0301 	mov.w	r3, #1
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	f7fa ff78 	bl	80002d8 <__aeabi_uldivmod>
 80053e8:	4603      	mov	r3, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4619      	mov	r1, r3
 80053ee:	4622      	mov	r2, r4
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	0214      	lsls	r4, r2, #8
 80053fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053fe:	020b      	lsls	r3, r1, #8
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6852      	ldr	r2, [r2, #4]
 8005404:	0852      	lsrs	r2, r2, #1
 8005406:	4611      	mov	r1, r2
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	eb13 0b01 	adds.w	fp, r3, r1
 8005410:	eb44 0c02 	adc.w	ip, r4, r2
 8005414:	4658      	mov	r0, fp
 8005416:	4661      	mov	r1, ip
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	461a      	mov	r2, r3
 8005422:	4623      	mov	r3, r4
 8005424:	f7fa ff58 	bl	80002d8 <__aeabi_uldivmod>
 8005428:	4603      	mov	r3, r0
 800542a:	460c      	mov	r4, r1
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800542e:	e2e9      	b.n	8005a04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005430:	f107 0308 	add.w	r3, r7, #8
 8005434:	4618      	mov	r0, r3
 8005436:	f7fd fd59 	bl	8002eec <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4618      	mov	r0, r3
 800543e:	f04f 0100 	mov.w	r1, #0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d067      	beq.n	800551a <UART_SetConfig+0xec2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b01      	cmp	r3, #1
 8005450:	d05e      	beq.n	8005510 <UART_SetConfig+0xeb8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b02      	cmp	r3, #2
 8005458:	d055      	beq.n	8005506 <UART_SetConfig+0xeae>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b03      	cmp	r3, #3
 8005460:	d04c      	beq.n	80054fc <UART_SetConfig+0xea4>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b04      	cmp	r3, #4
 8005468:	d043      	beq.n	80054f2 <UART_SetConfig+0xe9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b05      	cmp	r3, #5
 8005470:	d03a      	beq.n	80054e8 <UART_SetConfig+0xe90>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b06      	cmp	r3, #6
 8005478:	d031      	beq.n	80054de <UART_SetConfig+0xe86>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b07      	cmp	r3, #7
 8005480:	d028      	beq.n	80054d4 <UART_SetConfig+0xe7c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b08      	cmp	r3, #8
 8005488:	d01f      	beq.n	80054ca <UART_SetConfig+0xe72>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b09      	cmp	r3, #9
 8005490:	d016      	beq.n	80054c0 <UART_SetConfig+0xe68>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b0a      	cmp	r3, #10
 8005498:	d00d      	beq.n	80054b6 <UART_SetConfig+0xe5e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b0b      	cmp	r3, #11
 80054a0:	d104      	bne.n	80054ac <UART_SetConfig+0xe54>
 80054a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a6:	f04f 0400 	mov.w	r4, #0
 80054aa:	e03a      	b.n	8005522 <UART_SetConfig+0xeca>
 80054ac:	f04f 0301 	mov.w	r3, #1
 80054b0:	f04f 0400 	mov.w	r4, #0
 80054b4:	e035      	b.n	8005522 <UART_SetConfig+0xeca>
 80054b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054ba:	f04f 0400 	mov.w	r4, #0
 80054be:	e030      	b.n	8005522 <UART_SetConfig+0xeca>
 80054c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054c4:	f04f 0400 	mov.w	r4, #0
 80054c8:	e02b      	b.n	8005522 <UART_SetConfig+0xeca>
 80054ca:	f04f 0320 	mov.w	r3, #32
 80054ce:	f04f 0400 	mov.w	r4, #0
 80054d2:	e026      	b.n	8005522 <UART_SetConfig+0xeca>
 80054d4:	f04f 0310 	mov.w	r3, #16
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	e021      	b.n	8005522 <UART_SetConfig+0xeca>
 80054de:	f04f 030c 	mov.w	r3, #12
 80054e2:	f04f 0400 	mov.w	r4, #0
 80054e6:	e01c      	b.n	8005522 <UART_SetConfig+0xeca>
 80054e8:	f04f 030a 	mov.w	r3, #10
 80054ec:	f04f 0400 	mov.w	r4, #0
 80054f0:	e017      	b.n	8005522 <UART_SetConfig+0xeca>
 80054f2:	f04f 0308 	mov.w	r3, #8
 80054f6:	f04f 0400 	mov.w	r4, #0
 80054fa:	e012      	b.n	8005522 <UART_SetConfig+0xeca>
 80054fc:	f04f 0306 	mov.w	r3, #6
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	e00d      	b.n	8005522 <UART_SetConfig+0xeca>
 8005506:	f04f 0304 	mov.w	r3, #4
 800550a:	f04f 0400 	mov.w	r4, #0
 800550e:	e008      	b.n	8005522 <UART_SetConfig+0xeca>
 8005510:	f04f 0302 	mov.w	r3, #2
 8005514:	f04f 0400 	mov.w	r4, #0
 8005518:	e003      	b.n	8005522 <UART_SetConfig+0xeca>
 800551a:	f04f 0301 	mov.w	r3, #1
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	461a      	mov	r2, r3
 8005524:	4623      	mov	r3, r4
 8005526:	f7fa fed7 	bl	80002d8 <__aeabi_uldivmod>
 800552a:	4603      	mov	r3, r0
 800552c:	460c      	mov	r4, r1
 800552e:	4619      	mov	r1, r3
 8005530:	4622      	mov	r2, r4
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	0214      	lsls	r4, r2, #8
 800553c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005540:	020b      	lsls	r3, r1, #8
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6852      	ldr	r2, [r2, #4]
 8005546:	0852      	lsrs	r2, r2, #1
 8005548:	4611      	mov	r1, r2
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	eb13 0b01 	adds.w	fp, r3, r1
 8005552:	eb44 0c02 	adc.w	ip, r4, r2
 8005556:	4658      	mov	r0, fp
 8005558:	4661      	mov	r1, ip
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f04f 0400 	mov.w	r4, #0
 8005562:	461a      	mov	r2, r3
 8005564:	4623      	mov	r3, r4
 8005566:	f7fa feb7 	bl	80002d8 <__aeabi_uldivmod>
 800556a:	4603      	mov	r3, r0
 800556c:	460c      	mov	r4, r1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005570:	e248      	b.n	8005a04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005572:	4b97      	ldr	r3, [pc, #604]	; (80057d0 <UART_SetConfig+0x1178>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a3 	beq.w	80056c6 <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005580:	4b93      	ldr	r3, [pc, #588]	; (80057d0 <UART_SetConfig+0x1178>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	4a92      	ldr	r2, [pc, #584]	; (80057d4 <UART_SetConfig+0x117c>)
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
 8005590:	4618      	mov	r0, r3
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d067      	beq.n	800566e <UART_SetConfig+0x1016>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d05e      	beq.n	8005664 <UART_SetConfig+0x100c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d055      	beq.n	800565a <UART_SetConfig+0x1002>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d04c      	beq.n	8005650 <UART_SetConfig+0xff8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d043      	beq.n	8005646 <UART_SetConfig+0xfee>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d03a      	beq.n	800563c <UART_SetConfig+0xfe4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d031      	beq.n	8005632 <UART_SetConfig+0xfda>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b07      	cmp	r3, #7
 80055d4:	d028      	beq.n	8005628 <UART_SetConfig+0xfd0>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d01f      	beq.n	800561e <UART_SetConfig+0xfc6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d016      	beq.n	8005614 <UART_SetConfig+0xfbc>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b0a      	cmp	r3, #10
 80055ec:	d00d      	beq.n	800560a <UART_SetConfig+0xfb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b0b      	cmp	r3, #11
 80055f4:	d104      	bne.n	8005600 <UART_SetConfig+0xfa8>
 80055f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055fa:	f04f 0400 	mov.w	r4, #0
 80055fe:	e03a      	b.n	8005676 <UART_SetConfig+0x101e>
 8005600:	f04f 0301 	mov.w	r3, #1
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	e035      	b.n	8005676 <UART_SetConfig+0x101e>
 800560a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800560e:	f04f 0400 	mov.w	r4, #0
 8005612:	e030      	b.n	8005676 <UART_SetConfig+0x101e>
 8005614:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	e02b      	b.n	8005676 <UART_SetConfig+0x101e>
 800561e:	f04f 0320 	mov.w	r3, #32
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	e026      	b.n	8005676 <UART_SetConfig+0x101e>
 8005628:	f04f 0310 	mov.w	r3, #16
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	e021      	b.n	8005676 <UART_SetConfig+0x101e>
 8005632:	f04f 030c 	mov.w	r3, #12
 8005636:	f04f 0400 	mov.w	r4, #0
 800563a:	e01c      	b.n	8005676 <UART_SetConfig+0x101e>
 800563c:	f04f 030a 	mov.w	r3, #10
 8005640:	f04f 0400 	mov.w	r4, #0
 8005644:	e017      	b.n	8005676 <UART_SetConfig+0x101e>
 8005646:	f04f 0308 	mov.w	r3, #8
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	e012      	b.n	8005676 <UART_SetConfig+0x101e>
 8005650:	f04f 0306 	mov.w	r3, #6
 8005654:	f04f 0400 	mov.w	r4, #0
 8005658:	e00d      	b.n	8005676 <UART_SetConfig+0x101e>
 800565a:	f04f 0304 	mov.w	r3, #4
 800565e:	f04f 0400 	mov.w	r4, #0
 8005662:	e008      	b.n	8005676 <UART_SetConfig+0x101e>
 8005664:	f04f 0302 	mov.w	r3, #2
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	e003      	b.n	8005676 <UART_SetConfig+0x101e>
 800566e:	f04f 0301 	mov.w	r3, #1
 8005672:	f04f 0400 	mov.w	r4, #0
 8005676:	461a      	mov	r2, r3
 8005678:	4623      	mov	r3, r4
 800567a:	f7fa fe2d 	bl	80002d8 <__aeabi_uldivmod>
 800567e:	4603      	mov	r3, r0
 8005680:	460c      	mov	r4, r1
 8005682:	4619      	mov	r1, r3
 8005684:	4622      	mov	r2, r4
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	f04f 0400 	mov.w	r4, #0
 800568e:	0214      	lsls	r4, r2, #8
 8005690:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005694:	020b      	lsls	r3, r1, #8
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6852      	ldr	r2, [r2, #4]
 800569a:	0852      	lsrs	r2, r2, #1
 800569c:	4611      	mov	r1, r2
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	eb13 0b01 	adds.w	fp, r3, r1
 80056a6:	eb44 0c02 	adc.w	ip, r4, r2
 80056aa:	4658      	mov	r0, fp
 80056ac:	4661      	mov	r1, ip
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f04f 0400 	mov.w	r4, #0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4623      	mov	r3, r4
 80056ba:	f7fa fe0d 	bl	80002d8 <__aeabi_uldivmod>
 80056be:	4603      	mov	r3, r0
 80056c0:	460c      	mov	r4, r1
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80056c4:	e19e      	b.n	8005a04 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d05b      	beq.n	8005786 <UART_SetConfig+0x112e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d053      	beq.n	800577e <UART_SetConfig+0x1126>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d04b      	beq.n	8005776 <UART_SetConfig+0x111e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d043      	beq.n	800576e <UART_SetConfig+0x1116>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d03b      	beq.n	8005766 <UART_SetConfig+0x110e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b05      	cmp	r3, #5
 80056f4:	d033      	beq.n	800575e <UART_SetConfig+0x1106>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b06      	cmp	r3, #6
 80056fc:	d02b      	beq.n	8005756 <UART_SetConfig+0x10fe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b07      	cmp	r3, #7
 8005704:	d023      	beq.n	800574e <UART_SetConfig+0x10f6>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b08      	cmp	r3, #8
 800570c:	d01b      	beq.n	8005746 <UART_SetConfig+0x10ee>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b09      	cmp	r3, #9
 8005714:	d013      	beq.n	800573e <UART_SetConfig+0x10e6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b0a      	cmp	r3, #10
 800571c:	d00b      	beq.n	8005736 <UART_SetConfig+0x10de>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b0b      	cmp	r3, #11
 8005724:	d103      	bne.n	800572e <UART_SetConfig+0x10d6>
 8005726:	4b2b      	ldr	r3, [pc, #172]	; (80057d4 <UART_SetConfig+0x117c>)
 8005728:	f04f 0400 	mov.w	r4, #0
 800572c:	e02e      	b.n	800578c <UART_SetConfig+0x1134>
 800572e:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <UART_SetConfig+0x1180>)
 8005730:	f04f 0403 	mov.w	r4, #3
 8005734:	e02a      	b.n	800578c <UART_SetConfig+0x1134>
 8005736:	4b29      	ldr	r3, [pc, #164]	; (80057dc <UART_SetConfig+0x1184>)
 8005738:	f04f 0400 	mov.w	r4, #0
 800573c:	e026      	b.n	800578c <UART_SetConfig+0x1134>
 800573e:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <UART_SetConfig+0x1188>)
 8005740:	f04f 0400 	mov.w	r4, #0
 8005744:	e022      	b.n	800578c <UART_SetConfig+0x1134>
 8005746:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <UART_SetConfig+0x118c>)
 8005748:	f04f 0400 	mov.w	r4, #0
 800574c:	e01e      	b.n	800578c <UART_SetConfig+0x1134>
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <UART_SetConfig+0x1190>)
 8005750:	f04f 0400 	mov.w	r4, #0
 8005754:	e01a      	b.n	800578c <UART_SetConfig+0x1134>
 8005756:	a41a      	add	r4, pc, #104	; (adr r4, 80057c0 <UART_SetConfig+0x1168>)
 8005758:	e9d4 3400 	ldrd	r3, r4, [r4]
 800575c:	e016      	b.n	800578c <UART_SetConfig+0x1134>
 800575e:	4b23      	ldr	r3, [pc, #140]	; (80057ec <UART_SetConfig+0x1194>)
 8005760:	f04f 0400 	mov.w	r4, #0
 8005764:	e012      	b.n	800578c <UART_SetConfig+0x1134>
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <UART_SetConfig+0x1198>)
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	e00e      	b.n	800578c <UART_SetConfig+0x1134>
 800576e:	a416      	add	r4, pc, #88	; (adr r4, 80057c8 <UART_SetConfig+0x1170>)
 8005770:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005774:	e00a      	b.n	800578c <UART_SetConfig+0x1134>
 8005776:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <UART_SetConfig+0x119c>)
 8005778:	f04f 0400 	mov.w	r4, #0
 800577c:	e006      	b.n	800578c <UART_SetConfig+0x1134>
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <UART_SetConfig+0x11a0>)
 8005780:	f04f 0401 	mov.w	r4, #1
 8005784:	e002      	b.n	800578c <UART_SetConfig+0x1134>
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <UART_SetConfig+0x1180>)
 8005788:	f04f 0403 	mov.w	r4, #3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6852      	ldr	r2, [r2, #4]
 8005790:	0852      	lsrs	r2, r2, #1
 8005792:	4611      	mov	r1, r2
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	eb13 0b01 	adds.w	fp, r3, r1
 800579c:	eb44 0c02 	adc.w	ip, r4, r2
 80057a0:	4658      	mov	r0, fp
 80057a2:	4661      	mov	r1, ip
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	461a      	mov	r2, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	f7fa fd92 	bl	80002d8 <__aeabi_uldivmod>
 80057b4:	4603      	mov	r3, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80057ba:	e123      	b.n	8005a04 <UART_SetConfig+0x13ac>
 80057bc:	f3af 8000 	nop.w
 80057c0:	51615500 	.word	0x51615500
 80057c4:	00000000 	.word	0x00000000
 80057c8:	a2c2aa00 	.word	0xa2c2aa00
 80057cc:	00000000 	.word	0x00000000
 80057d0:	58024400 	.word	0x58024400
 80057d4:	03d09000 	.word	0x03d09000
 80057d8:	d0900000 	.word	0xd0900000
 80057dc:	07a12000 	.word	0x07a12000
 80057e0:	0f424000 	.word	0x0f424000
 80057e4:	1e848000 	.word	0x1e848000
 80057e8:	3d090000 	.word	0x3d090000
 80057ec:	61a80000 	.word	0x61a80000
 80057f0:	7a120000 	.word	0x7a120000
 80057f4:	f4240000 	.word	0xf4240000
 80057f8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05b      	beq.n	80058bc <UART_SetConfig+0x1264>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b01      	cmp	r3, #1
 800580a:	d053      	beq.n	80058b4 <UART_SetConfig+0x125c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b02      	cmp	r3, #2
 8005812:	d04b      	beq.n	80058ac <UART_SetConfig+0x1254>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2b03      	cmp	r3, #3
 800581a:	d043      	beq.n	80058a4 <UART_SetConfig+0x124c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	2b04      	cmp	r3, #4
 8005822:	d03b      	beq.n	800589c <UART_SetConfig+0x1244>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b05      	cmp	r3, #5
 800582a:	d033      	beq.n	8005894 <UART_SetConfig+0x123c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b06      	cmp	r3, #6
 8005832:	d02b      	beq.n	800588c <UART_SetConfig+0x1234>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	2b07      	cmp	r3, #7
 800583a:	d023      	beq.n	8005884 <UART_SetConfig+0x122c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b08      	cmp	r3, #8
 8005842:	d01b      	beq.n	800587c <UART_SetConfig+0x1224>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b09      	cmp	r3, #9
 800584a:	d013      	beq.n	8005874 <UART_SetConfig+0x121c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2b0a      	cmp	r3, #10
 8005852:	d00b      	beq.n	800586c <UART_SetConfig+0x1214>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	2b0b      	cmp	r3, #11
 800585a:	d103      	bne.n	8005864 <UART_SetConfig+0x120c>
 800585c:	4bc0      	ldr	r3, [pc, #768]	; (8005b60 <UART_SetConfig+0x1508>)
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	e02e      	b.n	80058c2 <UART_SetConfig+0x126a>
 8005864:	4bbf      	ldr	r3, [pc, #764]	; (8005b64 <UART_SetConfig+0x150c>)
 8005866:	f04f 0400 	mov.w	r4, #0
 800586a:	e02a      	b.n	80058c2 <UART_SetConfig+0x126a>
 800586c:	4bbe      	ldr	r3, [pc, #760]	; (8005b68 <UART_SetConfig+0x1510>)
 800586e:	f04f 0400 	mov.w	r4, #0
 8005872:	e026      	b.n	80058c2 <UART_SetConfig+0x126a>
 8005874:	4bbd      	ldr	r3, [pc, #756]	; (8005b6c <UART_SetConfig+0x1514>)
 8005876:	f04f 0400 	mov.w	r4, #0
 800587a:	e022      	b.n	80058c2 <UART_SetConfig+0x126a>
 800587c:	4bbc      	ldr	r3, [pc, #752]	; (8005b70 <UART_SetConfig+0x1518>)
 800587e:	f04f 0400 	mov.w	r4, #0
 8005882:	e01e      	b.n	80058c2 <UART_SetConfig+0x126a>
 8005884:	4bbb      	ldr	r3, [pc, #748]	; (8005b74 <UART_SetConfig+0x151c>)
 8005886:	f04f 0400 	mov.w	r4, #0
 800588a:	e01a      	b.n	80058c2 <UART_SetConfig+0x126a>
 800588c:	a4b0      	add	r4, pc, #704	; (adr r4, 8005b50 <UART_SetConfig+0x14f8>)
 800588e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005892:	e016      	b.n	80058c2 <UART_SetConfig+0x126a>
 8005894:	4bb8      	ldr	r3, [pc, #736]	; (8005b78 <UART_SetConfig+0x1520>)
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	e012      	b.n	80058c2 <UART_SetConfig+0x126a>
 800589c:	4bb7      	ldr	r3, [pc, #732]	; (8005b7c <UART_SetConfig+0x1524>)
 800589e:	f04f 0400 	mov.w	r4, #0
 80058a2:	e00e      	b.n	80058c2 <UART_SetConfig+0x126a>
 80058a4:	a4ac      	add	r4, pc, #688	; (adr r4, 8005b58 <UART_SetConfig+0x1500>)
 80058a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058aa:	e00a      	b.n	80058c2 <UART_SetConfig+0x126a>
 80058ac:	4bb4      	ldr	r3, [pc, #720]	; (8005b80 <UART_SetConfig+0x1528>)
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	e006      	b.n	80058c2 <UART_SetConfig+0x126a>
 80058b4:	4bb3      	ldr	r3, [pc, #716]	; (8005b84 <UART_SetConfig+0x152c>)
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	e002      	b.n	80058c2 <UART_SetConfig+0x126a>
 80058bc:	4ba9      	ldr	r3, [pc, #676]	; (8005b64 <UART_SetConfig+0x150c>)
 80058be:	f04f 0400 	mov.w	r4, #0
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6852      	ldr	r2, [r2, #4]
 80058c6:	0852      	lsrs	r2, r2, #1
 80058c8:	4611      	mov	r1, r2
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	eb13 0b01 	adds.w	fp, r3, r1
 80058d2:	eb44 0c02 	adc.w	ip, r4, r2
 80058d6:	4658      	mov	r0, fp
 80058d8:	4661      	mov	r1, ip
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f04f 0400 	mov.w	r4, #0
 80058e2:	461a      	mov	r2, r3
 80058e4:	4623      	mov	r3, r4
 80058e6:	f7fa fcf7 	bl	80002d8 <__aeabi_uldivmod>
 80058ea:	4603      	mov	r3, r0
 80058ec:	460c      	mov	r4, r1
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80058f0:	e088      	b.n	8005a04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d064      	beq.n	80059c4 <UART_SetConfig+0x136c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d05b      	beq.n	80059ba <UART_SetConfig+0x1362>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b02      	cmp	r3, #2
 8005908:	d052      	beq.n	80059b0 <UART_SetConfig+0x1358>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b03      	cmp	r3, #3
 8005910:	d04a      	beq.n	80059a8 <UART_SetConfig+0x1350>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b04      	cmp	r3, #4
 8005918:	d041      	beq.n	800599e <UART_SetConfig+0x1346>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b05      	cmp	r3, #5
 8005920:	d039      	beq.n	8005996 <UART_SetConfig+0x133e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b06      	cmp	r3, #6
 8005928:	d031      	beq.n	800598e <UART_SetConfig+0x1336>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b07      	cmp	r3, #7
 8005930:	d028      	beq.n	8005984 <UART_SetConfig+0x132c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b08      	cmp	r3, #8
 8005938:	d01f      	beq.n	800597a <UART_SetConfig+0x1322>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	2b09      	cmp	r3, #9
 8005940:	d016      	beq.n	8005970 <UART_SetConfig+0x1318>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b0a      	cmp	r3, #10
 8005948:	d00d      	beq.n	8005966 <UART_SetConfig+0x130e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b0b      	cmp	r3, #11
 8005950:	d104      	bne.n	800595c <UART_SetConfig+0x1304>
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	e037      	b.n	80059cc <UART_SetConfig+0x1374>
 800595c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	e032      	b.n	80059cc <UART_SetConfig+0x1374>
 8005966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	e02d      	b.n	80059cc <UART_SetConfig+0x1374>
 8005970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005974:	f04f 0400 	mov.w	r4, #0
 8005978:	e028      	b.n	80059cc <UART_SetConfig+0x1374>
 800597a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	e023      	b.n	80059cc <UART_SetConfig+0x1374>
 8005984:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	e01e      	b.n	80059cc <UART_SetConfig+0x1374>
 800598e:	4b7e      	ldr	r3, [pc, #504]	; (8005b88 <UART_SetConfig+0x1530>)
 8005990:	f04f 0400 	mov.w	r4, #0
 8005994:	e01a      	b.n	80059cc <UART_SetConfig+0x1374>
 8005996:	4b7d      	ldr	r3, [pc, #500]	; (8005b8c <UART_SetConfig+0x1534>)
 8005998:	f04f 0400 	mov.w	r4, #0
 800599c:	e016      	b.n	80059cc <UART_SetConfig+0x1374>
 800599e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059a2:	f04f 0400 	mov.w	r4, #0
 80059a6:	e011      	b.n	80059cc <UART_SetConfig+0x1374>
 80059a8:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <UART_SetConfig+0x1538>)
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	e00d      	b.n	80059cc <UART_SetConfig+0x1374>
 80059b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059b4:	f04f 0400 	mov.w	r4, #0
 80059b8:	e008      	b.n	80059cc <UART_SetConfig+0x1374>
 80059ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059be:	f04f 0400 	mov.w	r4, #0
 80059c2:	e003      	b.n	80059cc <UART_SetConfig+0x1374>
 80059c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6852      	ldr	r2, [r2, #4]
 80059d0:	0852      	lsrs	r2, r2, #1
 80059d2:	4611      	mov	r1, r2
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	eb13 0b01 	adds.w	fp, r3, r1
 80059dc:	eb44 0c02 	adc.w	ip, r4, r2
 80059e0:	4658      	mov	r0, fp
 80059e2:	4661      	mov	r1, ip
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	461a      	mov	r2, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	f7fa fc72 	bl	80002d8 <__aeabi_uldivmod>
 80059f4:	4603      	mov	r3, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80059fa:	e003      	b.n	8005a04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8005a02:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0a:	d309      	bcc.n	8005a20 <UART_SetConfig+0x13c8>
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a12:	d205      	bcs.n	8005a20 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1a:	60da      	str	r2, [r3, #12]
 8005a1c:	f000 bf81 	b.w	8006922 <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a26:	f000 bf7c 	b.w	8006922 <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	f040 83d8 	bne.w	80061e6 <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 8005a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	f200 83b1 	bhi.w	80061a2 <UART_SetConfig+0x1b4a>
 8005a40:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x13f0>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005b95 	.word	0x08005b95
 8005a4c:	08005c4b 	.word	0x08005c4b
 8005a50:	080061a3 	.word	0x080061a3
 8005a54:	080061a3 	.word	0x080061a3
 8005a58:	08005d01 	.word	0x08005d01
 8005a5c:	080061a3 	.word	0x080061a3
 8005a60:	080061a3 	.word	0x080061a3
 8005a64:	080061a3 	.word	0x080061a3
 8005a68:	08005dbd 	.word	0x08005dbd
 8005a6c:	080061a3 	.word	0x080061a3
 8005a70:	080061a3 	.word	0x080061a3
 8005a74:	080061a3 	.word	0x080061a3
 8005a78:	080061a3 	.word	0x080061a3
 8005a7c:	080061a3 	.word	0x080061a3
 8005a80:	080061a3 	.word	0x080061a3
 8005a84:	080061a3 	.word	0x080061a3
 8005a88:	08005e79 	.word	0x08005e79
 8005a8c:	080061a3 	.word	0x080061a3
 8005a90:	080061a3 	.word	0x080061a3
 8005a94:	080061a3 	.word	0x080061a3
 8005a98:	080061a3 	.word	0x080061a3
 8005a9c:	080061a3 	.word	0x080061a3
 8005aa0:	080061a3 	.word	0x080061a3
 8005aa4:	080061a3 	.word	0x080061a3
 8005aa8:	080061a3 	.word	0x080061a3
 8005aac:	080061a3 	.word	0x080061a3
 8005ab0:	080061a3 	.word	0x080061a3
 8005ab4:	080061a3 	.word	0x080061a3
 8005ab8:	080061a3 	.word	0x080061a3
 8005abc:	080061a3 	.word	0x080061a3
 8005ac0:	080061a3 	.word	0x080061a3
 8005ac4:	080061a3 	.word	0x080061a3
 8005ac8:	08005feb 	.word	0x08005feb
 8005acc:	080061a3 	.word	0x080061a3
 8005ad0:	080061a3 	.word	0x080061a3
 8005ad4:	080061a3 	.word	0x080061a3
 8005ad8:	080061a3 	.word	0x080061a3
 8005adc:	080061a3 	.word	0x080061a3
 8005ae0:	080061a3 	.word	0x080061a3
 8005ae4:	080061a3 	.word	0x080061a3
 8005ae8:	080061a3 	.word	0x080061a3
 8005aec:	080061a3 	.word	0x080061a3
 8005af0:	080061a3 	.word	0x080061a3
 8005af4:	080061a3 	.word	0x080061a3
 8005af8:	080061a3 	.word	0x080061a3
 8005afc:	080061a3 	.word	0x080061a3
 8005b00:	080061a3 	.word	0x080061a3
 8005b04:	080061a3 	.word	0x080061a3
 8005b08:	080061a3 	.word	0x080061a3
 8005b0c:	080061a3 	.word	0x080061a3
 8005b10:	080061a3 	.word	0x080061a3
 8005b14:	080061a3 	.word	0x080061a3
 8005b18:	080061a3 	.word	0x080061a3
 8005b1c:	080061a3 	.word	0x080061a3
 8005b20:	080061a3 	.word	0x080061a3
 8005b24:	080061a3 	.word	0x080061a3
 8005b28:	080061a3 	.word	0x080061a3
 8005b2c:	080061a3 	.word	0x080061a3
 8005b30:	080061a3 	.word	0x080061a3
 8005b34:	080061a3 	.word	0x080061a3
 8005b38:	080061a3 	.word	0x080061a3
 8005b3c:	080061a3 	.word	0x080061a3
 8005b40:	080061a3 	.word	0x080061a3
 8005b44:	080061a3 	.word	0x080061a3
 8005b48:	080060e1 	.word	0x080060e1
 8005b4c:	f3af 8000 	nop.w
 8005b50:	05161500 	.word	0x05161500
 8005b54:	00000000 	.word	0x00000000
 8005b58:	0a2c2a00 	.word	0x0a2c2a00
 8005b5c:	00000000 	.word	0x00000000
 8005b60:	003d0900 	.word	0x003d0900
 8005b64:	3d090000 	.word	0x3d090000
 8005b68:	007a1200 	.word	0x007a1200
 8005b6c:	00f42400 	.word	0x00f42400
 8005b70:	01e84800 	.word	0x01e84800
 8005b74:	03d09000 	.word	0x03d09000
 8005b78:	061a8000 	.word	0x061a8000
 8005b7c:	07a12000 	.word	0x07a12000
 8005b80:	0f424000 	.word	0x0f424000
 8005b84:	1e848000 	.word	0x1e848000
 8005b88:	000aaa00 	.word	0x000aaa00
 8005b8c:	000ccc00 	.word	0x000ccc00
 8005b90:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b94:	f7fc f92c 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d044      	beq.n	8005c2c <UART_SetConfig+0x15d4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d03e      	beq.n	8005c28 <UART_SetConfig+0x15d0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d038      	beq.n	8005c24 <UART_SetConfig+0x15cc>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d032      	beq.n	8005c20 <UART_SetConfig+0x15c8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d02c      	beq.n	8005c1c <UART_SetConfig+0x15c4>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d026      	beq.n	8005c18 <UART_SetConfig+0x15c0>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d020      	beq.n	8005c14 <UART_SetConfig+0x15bc>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b07      	cmp	r3, #7
 8005bd8:	d01a      	beq.n	8005c10 <UART_SetConfig+0x15b8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d014      	beq.n	8005c0c <UART_SetConfig+0x15b4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	d00e      	beq.n	8005c08 <UART_SetConfig+0x15b0>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b0a      	cmp	r3, #10
 8005bf0:	d008      	beq.n	8005c04 <UART_SetConfig+0x15ac>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b0b      	cmp	r3, #11
 8005bf8:	d102      	bne.n	8005c00 <UART_SetConfig+0x15a8>
 8005bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bfe:	e016      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e014      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	e012      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	e010      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	e00e      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c10:	2310      	movs	r3, #16
 8005c12:	e00c      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c14:	230c      	movs	r3, #12
 8005c16:	e00a      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c18:	230a      	movs	r3, #10
 8005c1a:	e008      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	e006      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c20:	2306      	movs	r3, #6
 8005c22:	e004      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c24:	2304      	movs	r3, #4
 8005c26:	e002      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e000      	b.n	8005c2e <UART_SetConfig+0x15d6>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	005a      	lsls	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c48:	e2af      	b.n	80061aa <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c4a:	f7fc f8e7 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d044      	beq.n	8005ce2 <UART_SetConfig+0x168a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d03e      	beq.n	8005cde <UART_SetConfig+0x1686>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d038      	beq.n	8005cda <UART_SetConfig+0x1682>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d032      	beq.n	8005cd6 <UART_SetConfig+0x167e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d02c      	beq.n	8005cd2 <UART_SetConfig+0x167a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d026      	beq.n	8005cce <UART_SetConfig+0x1676>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b06      	cmp	r3, #6
 8005c86:	d020      	beq.n	8005cca <UART_SetConfig+0x1672>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	2b07      	cmp	r3, #7
 8005c8e:	d01a      	beq.n	8005cc6 <UART_SetConfig+0x166e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d014      	beq.n	8005cc2 <UART_SetConfig+0x166a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2b09      	cmp	r3, #9
 8005c9e:	d00e      	beq.n	8005cbe <UART_SetConfig+0x1666>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	2b0a      	cmp	r3, #10
 8005ca6:	d008      	beq.n	8005cba <UART_SetConfig+0x1662>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2b0b      	cmp	r3, #11
 8005cae:	d102      	bne.n	8005cb6 <UART_SetConfig+0x165e>
 8005cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cb4:	e016      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e014      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	e012      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	e010      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cc2:	2320      	movs	r3, #32
 8005cc4:	e00e      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cc6:	2310      	movs	r3, #16
 8005cc8:	e00c      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	e00a      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cce:	230a      	movs	r3, #10
 8005cd0:	e008      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	e006      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cd6:	2306      	movs	r3, #6
 8005cd8:	e004      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cda:	2304      	movs	r3, #4
 8005cdc:	e002      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e000      	b.n	8005ce4 <UART_SetConfig+0x168c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	005a      	lsls	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	441a      	add	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cfe:	e254      	b.n	80061aa <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fc ffa5 	bl	8002c54 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d044      	beq.n	8005d9e <UART_SetConfig+0x1746>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d03e      	beq.n	8005d9a <UART_SetConfig+0x1742>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d038      	beq.n	8005d96 <UART_SetConfig+0x173e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d032      	beq.n	8005d92 <UART_SetConfig+0x173a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d02c      	beq.n	8005d8e <UART_SetConfig+0x1736>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d026      	beq.n	8005d8a <UART_SetConfig+0x1732>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d020      	beq.n	8005d86 <UART_SetConfig+0x172e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	d01a      	beq.n	8005d82 <UART_SetConfig+0x172a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d014      	beq.n	8005d7e <UART_SetConfig+0x1726>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b09      	cmp	r3, #9
 8005d5a:	d00e      	beq.n	8005d7a <UART_SetConfig+0x1722>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b0a      	cmp	r3, #10
 8005d62:	d008      	beq.n	8005d76 <UART_SetConfig+0x171e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b0b      	cmp	r3, #11
 8005d6a:	d102      	bne.n	8005d72 <UART_SetConfig+0x171a>
 8005d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d70:	e016      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e014      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	e012      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	e010      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d7e:	2320      	movs	r3, #32
 8005d80:	e00e      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d82:	2310      	movs	r3, #16
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d86:	230c      	movs	r3, #12
 8005d88:	e00a      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d8a:	230a      	movs	r3, #10
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	e006      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d92:	2306      	movs	r3, #6
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d96:	2304      	movs	r3, #4
 8005d98:	e002      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e000      	b.n	8005da0 <UART_SetConfig+0x1748>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	005a      	lsls	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dba:	e1f6      	b.n	80061aa <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dbc:	f107 0308 	add.w	r3, r7, #8
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fd f893 	bl	8002eec <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d044      	beq.n	8005e5a <UART_SetConfig+0x1802>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d03e      	beq.n	8005e56 <UART_SetConfig+0x17fe>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d038      	beq.n	8005e52 <UART_SetConfig+0x17fa>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d032      	beq.n	8005e4e <UART_SetConfig+0x17f6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d02c      	beq.n	8005e4a <UART_SetConfig+0x17f2>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d026      	beq.n	8005e46 <UART_SetConfig+0x17ee>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d020      	beq.n	8005e42 <UART_SetConfig+0x17ea>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b07      	cmp	r3, #7
 8005e06:	d01a      	beq.n	8005e3e <UART_SetConfig+0x17e6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d014      	beq.n	8005e3a <UART_SetConfig+0x17e2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b09      	cmp	r3, #9
 8005e16:	d00e      	beq.n	8005e36 <UART_SetConfig+0x17de>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b0a      	cmp	r3, #10
 8005e1e:	d008      	beq.n	8005e32 <UART_SetConfig+0x17da>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b0b      	cmp	r3, #11
 8005e26:	d102      	bne.n	8005e2e <UART_SetConfig+0x17d6>
 8005e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e2c:	e016      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e014      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	e012      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	e010      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	e00e      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e3e:	2310      	movs	r3, #16
 8005e40:	e00c      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e42:	230c      	movs	r3, #12
 8005e44:	e00a      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e46:	230a      	movs	r3, #10
 8005e48:	e008      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	e006      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e4e:	2306      	movs	r3, #6
 8005e50:	e004      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e52:	2304      	movs	r3, #4
 8005e54:	e002      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e000      	b.n	8005e5c <UART_SetConfig+0x1804>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	005a      	lsls	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e76:	e198      	b.n	80061aa <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e78:	4b87      	ldr	r3, [pc, #540]	; (8006098 <UART_SetConfig+0x1a40>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05e      	beq.n	8005f42 <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e84:	4b84      	ldr	r3, [pc, #528]	; (8006098 <UART_SetConfig+0x1a40>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	4a83      	ldr	r2, [pc, #524]	; (800609c <UART_SetConfig+0x1a44>)
 8005e90:	40da      	lsrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d044      	beq.n	8005f24 <UART_SetConfig+0x18cc>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d03e      	beq.n	8005f20 <UART_SetConfig+0x18c8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d038      	beq.n	8005f1c <UART_SetConfig+0x18c4>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d032      	beq.n	8005f18 <UART_SetConfig+0x18c0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d02c      	beq.n	8005f14 <UART_SetConfig+0x18bc>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d026      	beq.n	8005f10 <UART_SetConfig+0x18b8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b06      	cmp	r3, #6
 8005ec8:	d020      	beq.n	8005f0c <UART_SetConfig+0x18b4>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	d01a      	beq.n	8005f08 <UART_SetConfig+0x18b0>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d014      	beq.n	8005f04 <UART_SetConfig+0x18ac>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d00e      	beq.n	8005f00 <UART_SetConfig+0x18a8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b0a      	cmp	r3, #10
 8005ee8:	d008      	beq.n	8005efc <UART_SetConfig+0x18a4>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b0b      	cmp	r3, #11
 8005ef0:	d102      	bne.n	8005ef8 <UART_SetConfig+0x18a0>
 8005ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ef6:	e016      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e014      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	e012      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f00:	2340      	movs	r3, #64	; 0x40
 8005f02:	e010      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f04:	2320      	movs	r3, #32
 8005f06:	e00e      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	e00c      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	e00a      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f10:	230a      	movs	r3, #10
 8005f12:	e008      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f14:	2308      	movs	r3, #8
 8005f16:	e006      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f18:	2306      	movs	r3, #6
 8005f1a:	e004      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	e002      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e000      	b.n	8005f26 <UART_SetConfig+0x18ce>
 8005f24:	2301      	movs	r3, #1
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	005a      	lsls	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	441a      	add	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005f40:	e133      	b.n	80061aa <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d043      	beq.n	8005fd2 <UART_SetConfig+0x197a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d03d      	beq.n	8005fce <UART_SetConfig+0x1976>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d037      	beq.n	8005fca <UART_SetConfig+0x1972>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d031      	beq.n	8005fc6 <UART_SetConfig+0x196e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d02b      	beq.n	8005fc2 <UART_SetConfig+0x196a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d025      	beq.n	8005fbe <UART_SetConfig+0x1966>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b06      	cmp	r3, #6
 8005f78:	d01f      	beq.n	8005fba <UART_SetConfig+0x1962>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b07      	cmp	r3, #7
 8005f80:	d019      	beq.n	8005fb6 <UART_SetConfig+0x195e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d013      	beq.n	8005fb2 <UART_SetConfig+0x195a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	d00d      	beq.n	8005fae <UART_SetConfig+0x1956>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b0a      	cmp	r3, #10
 8005f98:	d007      	beq.n	8005faa <UART_SetConfig+0x1952>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b0b      	cmp	r3, #11
 8005fa0:	d101      	bne.n	8005fa6 <UART_SetConfig+0x194e>
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <UART_SetConfig+0x1a48>)
 8005fa4:	e016      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fa6:	4b3f      	ldr	r3, [pc, #252]	; (80060a4 <UART_SetConfig+0x1a4c>)
 8005fa8:	e014      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005faa:	4b3f      	ldr	r3, [pc, #252]	; (80060a8 <UART_SetConfig+0x1a50>)
 8005fac:	e012      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fae:	4b3f      	ldr	r3, [pc, #252]	; (80060ac <UART_SetConfig+0x1a54>)
 8005fb0:	e010      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fb2:	4b3f      	ldr	r3, [pc, #252]	; (80060b0 <UART_SetConfig+0x1a58>)
 8005fb4:	e00e      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fb6:	4b3f      	ldr	r3, [pc, #252]	; (80060b4 <UART_SetConfig+0x1a5c>)
 8005fb8:	e00c      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fba:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <UART_SetConfig+0x1a60>)
 8005fbc:	e00a      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <UART_SetConfig+0x1a64>)
 8005fc0:	e008      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fc2:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <UART_SetConfig+0x1a68>)
 8005fc4:	e006      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fc6:	4b3f      	ldr	r3, [pc, #252]	; (80060c4 <UART_SetConfig+0x1a6c>)
 8005fc8:	e004      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fca:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <UART_SetConfig+0x1a70>)
 8005fcc:	e002      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fce:	4b33      	ldr	r3, [pc, #204]	; (800609c <UART_SetConfig+0x1a44>)
 8005fd0:	e000      	b.n	8005fd4 <UART_SetConfig+0x197c>
 8005fd2:	4b34      	ldr	r3, [pc, #208]	; (80060a4 <UART_SetConfig+0x1a4c>)
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	0852      	lsrs	r2, r2, #1
 8005fda:	441a      	add	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fe8:	e0df      	b.n	80061aa <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d045      	beq.n	800607e <UART_SetConfig+0x1a26>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d03f      	beq.n	800607a <UART_SetConfig+0x1a22>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d039      	beq.n	8006076 <UART_SetConfig+0x1a1e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b03      	cmp	r3, #3
 8006008:	d033      	beq.n	8006072 <UART_SetConfig+0x1a1a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b04      	cmp	r3, #4
 8006010:	d02d      	beq.n	800606e <UART_SetConfig+0x1a16>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b05      	cmp	r3, #5
 8006018:	d027      	beq.n	800606a <UART_SetConfig+0x1a12>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b06      	cmp	r3, #6
 8006020:	d021      	beq.n	8006066 <UART_SetConfig+0x1a0e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b07      	cmp	r3, #7
 8006028:	d01b      	beq.n	8006062 <UART_SetConfig+0x1a0a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b08      	cmp	r3, #8
 8006030:	d015      	beq.n	800605e <UART_SetConfig+0x1a06>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b09      	cmp	r3, #9
 8006038:	d00f      	beq.n	800605a <UART_SetConfig+0x1a02>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b0a      	cmp	r3, #10
 8006040:	d008      	beq.n	8006054 <UART_SetConfig+0x19fc>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b0b      	cmp	r3, #11
 8006048:	d102      	bne.n	8006050 <UART_SetConfig+0x19f8>
 800604a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800604e:	e017      	b.n	8006080 <UART_SetConfig+0x1a28>
 8006050:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <UART_SetConfig+0x1a5c>)
 8006052:	e015      	b.n	8006080 <UART_SetConfig+0x1a28>
 8006054:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006058:	e012      	b.n	8006080 <UART_SetConfig+0x1a28>
 800605a:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <UART_SetConfig+0x1a74>)
 800605c:	e010      	b.n	8006080 <UART_SetConfig+0x1a28>
 800605e:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <UART_SetConfig+0x1a78>)
 8006060:	e00e      	b.n	8006080 <UART_SetConfig+0x1a28>
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <UART_SetConfig+0x1a48>)
 8006064:	e00c      	b.n	8006080 <UART_SetConfig+0x1a28>
 8006066:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <UART_SetConfig+0x1a7c>)
 8006068:	e00a      	b.n	8006080 <UART_SetConfig+0x1a28>
 800606a:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <UART_SetConfig+0x1a80>)
 800606c:	e008      	b.n	8006080 <UART_SetConfig+0x1a28>
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <UART_SetConfig+0x1a50>)
 8006070:	e006      	b.n	8006080 <UART_SetConfig+0x1a28>
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <UART_SetConfig+0x1a84>)
 8006074:	e004      	b.n	8006080 <UART_SetConfig+0x1a28>
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <UART_SetConfig+0x1a54>)
 8006078:	e002      	b.n	8006080 <UART_SetConfig+0x1a28>
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <UART_SetConfig+0x1a58>)
 800607c:	e000      	b.n	8006080 <UART_SetConfig+0x1a28>
 800607e:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <UART_SetConfig+0x1a5c>)
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6852      	ldr	r2, [r2, #4]
 8006084:	0852      	lsrs	r2, r2, #1
 8006086:	441a      	add	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	b29b      	uxth	r3, r3
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006094:	e089      	b.n	80061aa <UART_SetConfig+0x1b52>
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400
 800609c:	03d09000 	.word	0x03d09000
 80060a0:	0007a120 	.word	0x0007a120
 80060a4:	07a12000 	.word	0x07a12000
 80060a8:	000f4240 	.word	0x000f4240
 80060ac:	001e8480 	.word	0x001e8480
 80060b0:	003d0900 	.word	0x003d0900
 80060b4:	007a1200 	.word	0x007a1200
 80060b8:	00a2c2aa 	.word	0x00a2c2aa
 80060bc:	00c35000 	.word	0x00c35000
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	01458554 	.word	0x01458554
 80060c8:	01e84800 	.word	0x01e84800
 80060cc:	0001e848 	.word	0x0001e848
 80060d0:	0003d090 	.word	0x0003d090
 80060d4:	000a2c2a 	.word	0x000a2c2a
 80060d8:	000c3500 	.word	0x000c3500
 80060dc:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d04f      	beq.n	8006188 <UART_SetConfig+0x1b30>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d048      	beq.n	8006182 <UART_SetConfig+0x1b2a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d041      	beq.n	800617c <UART_SetConfig+0x1b24>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d03a      	beq.n	8006176 <UART_SetConfig+0x1b1e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2b04      	cmp	r3, #4
 8006106:	d033      	beq.n	8006170 <UART_SetConfig+0x1b18>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	2b05      	cmp	r3, #5
 800610e:	d02c      	beq.n	800616a <UART_SetConfig+0x1b12>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b06      	cmp	r3, #6
 8006116:	d025      	beq.n	8006164 <UART_SetConfig+0x1b0c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	2b07      	cmp	r3, #7
 800611e:	d01e      	beq.n	800615e <UART_SetConfig+0x1b06>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2b08      	cmp	r3, #8
 8006126:	d017      	beq.n	8006158 <UART_SetConfig+0x1b00>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b09      	cmp	r3, #9
 800612e:	d010      	beq.n	8006152 <UART_SetConfig+0x1afa>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2b0a      	cmp	r3, #10
 8006136:	d009      	beq.n	800614c <UART_SetConfig+0x1af4>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b0b      	cmp	r3, #11
 800613e:	d102      	bne.n	8006146 <UART_SetConfig+0x1aee>
 8006140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006144:	e022      	b.n	800618c <UART_SetConfig+0x1b34>
 8006146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800614a:	e01f      	b.n	800618c <UART_SetConfig+0x1b34>
 800614c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006150:	e01c      	b.n	800618c <UART_SetConfig+0x1b34>
 8006152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006156:	e019      	b.n	800618c <UART_SetConfig+0x1b34>
 8006158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800615c:	e016      	b.n	800618c <UART_SetConfig+0x1b34>
 800615e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006162:	e013      	b.n	800618c <UART_SetConfig+0x1b34>
 8006164:	f241 5354 	movw	r3, #5460	; 0x1554
 8006168:	e010      	b.n	800618c <UART_SetConfig+0x1b34>
 800616a:	f641 1398 	movw	r3, #6552	; 0x1998
 800616e:	e00d      	b.n	800618c <UART_SetConfig+0x1b34>
 8006170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006174:	e00a      	b.n	800618c <UART_SetConfig+0x1b34>
 8006176:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800617a:	e007      	b.n	800618c <UART_SetConfig+0x1b34>
 800617c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006180:	e004      	b.n	800618c <UART_SetConfig+0x1b34>
 8006182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006186:	e001      	b.n	800618c <UART_SetConfig+0x1b34>
 8006188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	0852      	lsrs	r2, r2, #1
 8006192:	441a      	add	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	b29b      	uxth	r3, r3
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a0:	e003      	b.n	80061aa <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d916      	bls.n	80061de <UART_SetConfig+0x1b86>
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d212      	bcs.n	80061de <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f023 030f 	bic.w	r3, r3, #15
 80061c0:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061d0:	4313      	orrs	r3, r2
 80061d2:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80061da:	60da      	str	r2, [r3, #12]
 80061dc:	e3a1      	b.n	8006922 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e4:	e39d      	b.n	8006922 <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 80061e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	f200 8386 	bhi.w	80068fc <UART_SetConfig+0x22a4>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x1ba0>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	080062fd 	.word	0x080062fd
 80061fc:	080063b1 	.word	0x080063b1
 8006200:	080068fd 	.word	0x080068fd
 8006204:	080068fd 	.word	0x080068fd
 8006208:	08006465 	.word	0x08006465
 800620c:	080068fd 	.word	0x080068fd
 8006210:	080068fd 	.word	0x080068fd
 8006214:	080068fd 	.word	0x080068fd
 8006218:	0800651f 	.word	0x0800651f
 800621c:	080068fd 	.word	0x080068fd
 8006220:	080068fd 	.word	0x080068fd
 8006224:	080068fd 	.word	0x080068fd
 8006228:	080068fd 	.word	0x080068fd
 800622c:	080068fd 	.word	0x080068fd
 8006230:	080068fd 	.word	0x080068fd
 8006234:	080068fd 	.word	0x080068fd
 8006238:	080065d9 	.word	0x080065d9
 800623c:	080068fd 	.word	0x080068fd
 8006240:	080068fd 	.word	0x080068fd
 8006244:	080068fd 	.word	0x080068fd
 8006248:	080068fd 	.word	0x080068fd
 800624c:	080068fd 	.word	0x080068fd
 8006250:	080068fd 	.word	0x080068fd
 8006254:	080068fd 	.word	0x080068fd
 8006258:	080068fd 	.word	0x080068fd
 800625c:	080068fd 	.word	0x080068fd
 8006260:	080068fd 	.word	0x080068fd
 8006264:	080068fd 	.word	0x080068fd
 8006268:	080068fd 	.word	0x080068fd
 800626c:	080068fd 	.word	0x080068fd
 8006270:	080068fd 	.word	0x080068fd
 8006274:	080068fd 	.word	0x080068fd
 8006278:	08006749 	.word	0x08006749
 800627c:	080068fd 	.word	0x080068fd
 8006280:	080068fd 	.word	0x080068fd
 8006284:	080068fd 	.word	0x080068fd
 8006288:	080068fd 	.word	0x080068fd
 800628c:	080068fd 	.word	0x080068fd
 8006290:	080068fd 	.word	0x080068fd
 8006294:	080068fd 	.word	0x080068fd
 8006298:	080068fd 	.word	0x080068fd
 800629c:	080068fd 	.word	0x080068fd
 80062a0:	080068fd 	.word	0x080068fd
 80062a4:	080068fd 	.word	0x080068fd
 80062a8:	080068fd 	.word	0x080068fd
 80062ac:	080068fd 	.word	0x080068fd
 80062b0:	080068fd 	.word	0x080068fd
 80062b4:	080068fd 	.word	0x080068fd
 80062b8:	080068fd 	.word	0x080068fd
 80062bc:	080068fd 	.word	0x080068fd
 80062c0:	080068fd 	.word	0x080068fd
 80062c4:	080068fd 	.word	0x080068fd
 80062c8:	080068fd 	.word	0x080068fd
 80062cc:	080068fd 	.word	0x080068fd
 80062d0:	080068fd 	.word	0x080068fd
 80062d4:	080068fd 	.word	0x080068fd
 80062d8:	080068fd 	.word	0x080068fd
 80062dc:	080068fd 	.word	0x080068fd
 80062e0:	080068fd 	.word	0x080068fd
 80062e4:	080068fd 	.word	0x080068fd
 80062e8:	080068fd 	.word	0x080068fd
 80062ec:	080068fd 	.word	0x080068fd
 80062f0:	080068fd 	.word	0x080068fd
 80062f4:	080068fd 	.word	0x080068fd
 80062f8:	0800683d 	.word	0x0800683d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fc:	f7fb fd78 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8006300:	4602      	mov	r2, r0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d044      	beq.n	8006394 <UART_SetConfig+0x1d3c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	2b01      	cmp	r3, #1
 8006310:	d03e      	beq.n	8006390 <UART_SetConfig+0x1d38>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2b02      	cmp	r3, #2
 8006318:	d038      	beq.n	800638c <UART_SetConfig+0x1d34>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b03      	cmp	r3, #3
 8006320:	d032      	beq.n	8006388 <UART_SetConfig+0x1d30>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b04      	cmp	r3, #4
 8006328:	d02c      	beq.n	8006384 <UART_SetConfig+0x1d2c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b05      	cmp	r3, #5
 8006330:	d026      	beq.n	8006380 <UART_SetConfig+0x1d28>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	2b06      	cmp	r3, #6
 8006338:	d020      	beq.n	800637c <UART_SetConfig+0x1d24>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b07      	cmp	r3, #7
 8006340:	d01a      	beq.n	8006378 <UART_SetConfig+0x1d20>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	2b08      	cmp	r3, #8
 8006348:	d014      	beq.n	8006374 <UART_SetConfig+0x1d1c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b09      	cmp	r3, #9
 8006350:	d00e      	beq.n	8006370 <UART_SetConfig+0x1d18>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	2b0a      	cmp	r3, #10
 8006358:	d008      	beq.n	800636c <UART_SetConfig+0x1d14>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b0b      	cmp	r3, #11
 8006360:	d102      	bne.n	8006368 <UART_SetConfig+0x1d10>
 8006362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006366:	e016      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006368:	2301      	movs	r3, #1
 800636a:	e014      	b.n	8006396 <UART_SetConfig+0x1d3e>
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	e012      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006370:	2340      	movs	r3, #64	; 0x40
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006374:	2320      	movs	r3, #32
 8006376:	e00e      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006378:	2310      	movs	r3, #16
 800637a:	e00c      	b.n	8006396 <UART_SetConfig+0x1d3e>
 800637c:	230c      	movs	r3, #12
 800637e:	e00a      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006380:	230a      	movs	r3, #10
 8006382:	e008      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006384:	2308      	movs	r3, #8
 8006386:	e006      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006388:	2306      	movs	r3, #6
 800638a:	e004      	b.n	8006396 <UART_SetConfig+0x1d3e>
 800638c:	2304      	movs	r3, #4
 800638e:	e002      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006390:	2302      	movs	r3, #2
 8006392:	e000      	b.n	8006396 <UART_SetConfig+0x1d3e>
 8006394:	2301      	movs	r3, #1
 8006396:	fbb2 f2f3 	udiv	r2, r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ae:	e2a9      	b.n	8006904 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b0:	f7fb fd34 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d044      	beq.n	8006448 <UART_SetConfig+0x1df0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d03e      	beq.n	8006444 <UART_SetConfig+0x1dec>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d038      	beq.n	8006440 <UART_SetConfig+0x1de8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d032      	beq.n	800643c <UART_SetConfig+0x1de4>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d02c      	beq.n	8006438 <UART_SetConfig+0x1de0>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d026      	beq.n	8006434 <UART_SetConfig+0x1ddc>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d020      	beq.n	8006430 <UART_SetConfig+0x1dd8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b07      	cmp	r3, #7
 80063f4:	d01a      	beq.n	800642c <UART_SetConfig+0x1dd4>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d014      	beq.n	8006428 <UART_SetConfig+0x1dd0>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b09      	cmp	r3, #9
 8006404:	d00e      	beq.n	8006424 <UART_SetConfig+0x1dcc>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b0a      	cmp	r3, #10
 800640c:	d008      	beq.n	8006420 <UART_SetConfig+0x1dc8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2b0b      	cmp	r3, #11
 8006414:	d102      	bne.n	800641c <UART_SetConfig+0x1dc4>
 8006416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800641a:	e016      	b.n	800644a <UART_SetConfig+0x1df2>
 800641c:	2301      	movs	r3, #1
 800641e:	e014      	b.n	800644a <UART_SetConfig+0x1df2>
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	e012      	b.n	800644a <UART_SetConfig+0x1df2>
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	e010      	b.n	800644a <UART_SetConfig+0x1df2>
 8006428:	2320      	movs	r3, #32
 800642a:	e00e      	b.n	800644a <UART_SetConfig+0x1df2>
 800642c:	2310      	movs	r3, #16
 800642e:	e00c      	b.n	800644a <UART_SetConfig+0x1df2>
 8006430:	230c      	movs	r3, #12
 8006432:	e00a      	b.n	800644a <UART_SetConfig+0x1df2>
 8006434:	230a      	movs	r3, #10
 8006436:	e008      	b.n	800644a <UART_SetConfig+0x1df2>
 8006438:	2308      	movs	r3, #8
 800643a:	e006      	b.n	800644a <UART_SetConfig+0x1df2>
 800643c:	2306      	movs	r3, #6
 800643e:	e004      	b.n	800644a <UART_SetConfig+0x1df2>
 8006440:	2304      	movs	r3, #4
 8006442:	e002      	b.n	800644a <UART_SetConfig+0x1df2>
 8006444:	2302      	movs	r3, #2
 8006446:	e000      	b.n	800644a <UART_SetConfig+0x1df2>
 8006448:	2301      	movs	r3, #1
 800644a:	fbb2 f2f3 	udiv	r2, r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	085b      	lsrs	r3, r3, #1
 8006454:	441a      	add	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	fbb2 f3f3 	udiv	r3, r2, r3
 800645e:	b29b      	uxth	r3, r3
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006462:	e24f      	b.n	8006904 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4618      	mov	r0, r3
 800646a:	f7fc fbf3 	bl	8002c54 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d044      	beq.n	8006502 <UART_SetConfig+0x1eaa>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b01      	cmp	r3, #1
 800647e:	d03e      	beq.n	80064fe <UART_SetConfig+0x1ea6>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2b02      	cmp	r3, #2
 8006486:	d038      	beq.n	80064fa <UART_SetConfig+0x1ea2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b03      	cmp	r3, #3
 800648e:	d032      	beq.n	80064f6 <UART_SetConfig+0x1e9e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	2b04      	cmp	r3, #4
 8006496:	d02c      	beq.n	80064f2 <UART_SetConfig+0x1e9a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2b05      	cmp	r3, #5
 800649e:	d026      	beq.n	80064ee <UART_SetConfig+0x1e96>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	2b06      	cmp	r3, #6
 80064a6:	d020      	beq.n	80064ea <UART_SetConfig+0x1e92>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2b07      	cmp	r3, #7
 80064ae:	d01a      	beq.n	80064e6 <UART_SetConfig+0x1e8e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d014      	beq.n	80064e2 <UART_SetConfig+0x1e8a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b09      	cmp	r3, #9
 80064be:	d00e      	beq.n	80064de <UART_SetConfig+0x1e86>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b0a      	cmp	r3, #10
 80064c6:	d008      	beq.n	80064da <UART_SetConfig+0x1e82>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b0b      	cmp	r3, #11
 80064ce:	d102      	bne.n	80064d6 <UART_SetConfig+0x1e7e>
 80064d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064d4:	e016      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e014      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	e012      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064de:	2340      	movs	r3, #64	; 0x40
 80064e0:	e010      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064e2:	2320      	movs	r3, #32
 80064e4:	e00e      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064e6:	2310      	movs	r3, #16
 80064e8:	e00c      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064ea:	230c      	movs	r3, #12
 80064ec:	e00a      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064ee:	230a      	movs	r3, #10
 80064f0:	e008      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064f2:	2308      	movs	r3, #8
 80064f4:	e006      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064f6:	2306      	movs	r3, #6
 80064f8:	e004      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064fa:	2304      	movs	r3, #4
 80064fc:	e002      	b.n	8006504 <UART_SetConfig+0x1eac>
 80064fe:	2302      	movs	r3, #2
 8006500:	e000      	b.n	8006504 <UART_SetConfig+0x1eac>
 8006502:	2301      	movs	r3, #1
 8006504:	fbb2 f2f3 	udiv	r2, r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	b29b      	uxth	r3, r3
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800651c:	e1f2      	b.n	8006904 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f7fc fce2 	bl	8002eec <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d044      	beq.n	80065bc <UART_SetConfig+0x1f64>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b01      	cmp	r3, #1
 8006538:	d03e      	beq.n	80065b8 <UART_SetConfig+0x1f60>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2b02      	cmp	r3, #2
 8006540:	d038      	beq.n	80065b4 <UART_SetConfig+0x1f5c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b03      	cmp	r3, #3
 8006548:	d032      	beq.n	80065b0 <UART_SetConfig+0x1f58>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	2b04      	cmp	r3, #4
 8006550:	d02c      	beq.n	80065ac <UART_SetConfig+0x1f54>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	2b05      	cmp	r3, #5
 8006558:	d026      	beq.n	80065a8 <UART_SetConfig+0x1f50>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	2b06      	cmp	r3, #6
 8006560:	d020      	beq.n	80065a4 <UART_SetConfig+0x1f4c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b07      	cmp	r3, #7
 8006568:	d01a      	beq.n	80065a0 <UART_SetConfig+0x1f48>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b08      	cmp	r3, #8
 8006570:	d014      	beq.n	800659c <UART_SetConfig+0x1f44>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2b09      	cmp	r3, #9
 8006578:	d00e      	beq.n	8006598 <UART_SetConfig+0x1f40>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b0a      	cmp	r3, #10
 8006580:	d008      	beq.n	8006594 <UART_SetConfig+0x1f3c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	2b0b      	cmp	r3, #11
 8006588:	d102      	bne.n	8006590 <UART_SetConfig+0x1f38>
 800658a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800658e:	e016      	b.n	80065be <UART_SetConfig+0x1f66>
 8006590:	2301      	movs	r3, #1
 8006592:	e014      	b.n	80065be <UART_SetConfig+0x1f66>
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	e012      	b.n	80065be <UART_SetConfig+0x1f66>
 8006598:	2340      	movs	r3, #64	; 0x40
 800659a:	e010      	b.n	80065be <UART_SetConfig+0x1f66>
 800659c:	2320      	movs	r3, #32
 800659e:	e00e      	b.n	80065be <UART_SetConfig+0x1f66>
 80065a0:	2310      	movs	r3, #16
 80065a2:	e00c      	b.n	80065be <UART_SetConfig+0x1f66>
 80065a4:	230c      	movs	r3, #12
 80065a6:	e00a      	b.n	80065be <UART_SetConfig+0x1f66>
 80065a8:	230a      	movs	r3, #10
 80065aa:	e008      	b.n	80065be <UART_SetConfig+0x1f66>
 80065ac:	2308      	movs	r3, #8
 80065ae:	e006      	b.n	80065be <UART_SetConfig+0x1f66>
 80065b0:	2306      	movs	r3, #6
 80065b2:	e004      	b.n	80065be <UART_SetConfig+0x1f66>
 80065b4:	2304      	movs	r3, #4
 80065b6:	e002      	b.n	80065be <UART_SetConfig+0x1f66>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e000      	b.n	80065be <UART_SetConfig+0x1f66>
 80065bc:	2301      	movs	r3, #1
 80065be:	fbb2 f2f3 	udiv	r2, r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065d6:	e195      	b.n	8006904 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d8:	4b87      	ldr	r3, [pc, #540]	; (80067f8 <UART_SetConfig+0x21a0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d05d      	beq.n	80066a0 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e4:	4b84      	ldr	r3, [pc, #528]	; (80067f8 <UART_SetConfig+0x21a0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	08db      	lsrs	r3, r3, #3
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	4a83      	ldr	r2, [pc, #524]	; (80067fc <UART_SetConfig+0x21a4>)
 80065f0:	40da      	lsrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d044      	beq.n	8006684 <UART_SetConfig+0x202c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d03e      	beq.n	8006680 <UART_SetConfig+0x2028>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b02      	cmp	r3, #2
 8006608:	d038      	beq.n	800667c <UART_SetConfig+0x2024>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b03      	cmp	r3, #3
 8006610:	d032      	beq.n	8006678 <UART_SetConfig+0x2020>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	2b04      	cmp	r3, #4
 8006618:	d02c      	beq.n	8006674 <UART_SetConfig+0x201c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b05      	cmp	r3, #5
 8006620:	d026      	beq.n	8006670 <UART_SetConfig+0x2018>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b06      	cmp	r3, #6
 8006628:	d020      	beq.n	800666c <UART_SetConfig+0x2014>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b07      	cmp	r3, #7
 8006630:	d01a      	beq.n	8006668 <UART_SetConfig+0x2010>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	2b08      	cmp	r3, #8
 8006638:	d014      	beq.n	8006664 <UART_SetConfig+0x200c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b09      	cmp	r3, #9
 8006640:	d00e      	beq.n	8006660 <UART_SetConfig+0x2008>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	2b0a      	cmp	r3, #10
 8006648:	d008      	beq.n	800665c <UART_SetConfig+0x2004>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b0b      	cmp	r3, #11
 8006650:	d102      	bne.n	8006658 <UART_SetConfig+0x2000>
 8006652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006656:	e016      	b.n	8006686 <UART_SetConfig+0x202e>
 8006658:	2301      	movs	r3, #1
 800665a:	e014      	b.n	8006686 <UART_SetConfig+0x202e>
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	e012      	b.n	8006686 <UART_SetConfig+0x202e>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	e010      	b.n	8006686 <UART_SetConfig+0x202e>
 8006664:	2320      	movs	r3, #32
 8006666:	e00e      	b.n	8006686 <UART_SetConfig+0x202e>
 8006668:	2310      	movs	r3, #16
 800666a:	e00c      	b.n	8006686 <UART_SetConfig+0x202e>
 800666c:	230c      	movs	r3, #12
 800666e:	e00a      	b.n	8006686 <UART_SetConfig+0x202e>
 8006670:	230a      	movs	r3, #10
 8006672:	e008      	b.n	8006686 <UART_SetConfig+0x202e>
 8006674:	2308      	movs	r3, #8
 8006676:	e006      	b.n	8006686 <UART_SetConfig+0x202e>
 8006678:	2306      	movs	r3, #6
 800667a:	e004      	b.n	8006686 <UART_SetConfig+0x202e>
 800667c:	2304      	movs	r3, #4
 800667e:	e002      	b.n	8006686 <UART_SetConfig+0x202e>
 8006680:	2302      	movs	r3, #2
 8006682:	e000      	b.n	8006686 <UART_SetConfig+0x202e>
 8006684:	2301      	movs	r3, #1
 8006686:	fbb2 f2f3 	udiv	r2, r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	441a      	add	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800669e:	e131      	b.n	8006904 <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d043      	beq.n	8006730 <UART_SetConfig+0x20d8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d03d      	beq.n	800672c <UART_SetConfig+0x20d4>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d037      	beq.n	8006728 <UART_SetConfig+0x20d0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d031      	beq.n	8006724 <UART_SetConfig+0x20cc>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d02b      	beq.n	8006720 <UART_SetConfig+0x20c8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d025      	beq.n	800671c <UART_SetConfig+0x20c4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d01f      	beq.n	8006718 <UART_SetConfig+0x20c0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	2b07      	cmp	r3, #7
 80066de:	d019      	beq.n	8006714 <UART_SetConfig+0x20bc>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d013      	beq.n	8006710 <UART_SetConfig+0x20b8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d00d      	beq.n	800670c <UART_SetConfig+0x20b4>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b0a      	cmp	r3, #10
 80066f6:	d007      	beq.n	8006708 <UART_SetConfig+0x20b0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b0b      	cmp	r3, #11
 80066fe:	d101      	bne.n	8006704 <UART_SetConfig+0x20ac>
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <UART_SetConfig+0x21a8>)
 8006702:	e016      	b.n	8006732 <UART_SetConfig+0x20da>
 8006704:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <UART_SetConfig+0x21a4>)
 8006706:	e014      	b.n	8006732 <UART_SetConfig+0x20da>
 8006708:	4b3e      	ldr	r3, [pc, #248]	; (8006804 <UART_SetConfig+0x21ac>)
 800670a:	e012      	b.n	8006732 <UART_SetConfig+0x20da>
 800670c:	4b3e      	ldr	r3, [pc, #248]	; (8006808 <UART_SetConfig+0x21b0>)
 800670e:	e010      	b.n	8006732 <UART_SetConfig+0x20da>
 8006710:	4b3e      	ldr	r3, [pc, #248]	; (800680c <UART_SetConfig+0x21b4>)
 8006712:	e00e      	b.n	8006732 <UART_SetConfig+0x20da>
 8006714:	4b3e      	ldr	r3, [pc, #248]	; (8006810 <UART_SetConfig+0x21b8>)
 8006716:	e00c      	b.n	8006732 <UART_SetConfig+0x20da>
 8006718:	4b3e      	ldr	r3, [pc, #248]	; (8006814 <UART_SetConfig+0x21bc>)
 800671a:	e00a      	b.n	8006732 <UART_SetConfig+0x20da>
 800671c:	4b3e      	ldr	r3, [pc, #248]	; (8006818 <UART_SetConfig+0x21c0>)
 800671e:	e008      	b.n	8006732 <UART_SetConfig+0x20da>
 8006720:	4b3e      	ldr	r3, [pc, #248]	; (800681c <UART_SetConfig+0x21c4>)
 8006722:	e006      	b.n	8006732 <UART_SetConfig+0x20da>
 8006724:	4b3e      	ldr	r3, [pc, #248]	; (8006820 <UART_SetConfig+0x21c8>)
 8006726:	e004      	b.n	8006732 <UART_SetConfig+0x20da>
 8006728:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <UART_SetConfig+0x21cc>)
 800672a:	e002      	b.n	8006732 <UART_SetConfig+0x20da>
 800672c:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <UART_SetConfig+0x21d0>)
 800672e:	e000      	b.n	8006732 <UART_SetConfig+0x20da>
 8006730:	4b32      	ldr	r3, [pc, #200]	; (80067fc <UART_SetConfig+0x21a4>)
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6852      	ldr	r2, [r2, #4]
 8006736:	0852      	lsrs	r2, r2, #1
 8006738:	441a      	add	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006742:	b29b      	uxth	r3, r3
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006746:	e0dd      	b.n	8006904 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d046      	beq.n	80067de <UART_SetConfig+0x2186>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	2b01      	cmp	r3, #1
 8006756:	d040      	beq.n	80067da <UART_SetConfig+0x2182>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	2b02      	cmp	r3, #2
 800675e:	d03a      	beq.n	80067d6 <UART_SetConfig+0x217e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b03      	cmp	r3, #3
 8006766:	d034      	beq.n	80067d2 <UART_SetConfig+0x217a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b04      	cmp	r3, #4
 800676e:	d02e      	beq.n	80067ce <UART_SetConfig+0x2176>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	2b05      	cmp	r3, #5
 8006776:	d028      	beq.n	80067ca <UART_SetConfig+0x2172>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b06      	cmp	r3, #6
 800677e:	d022      	beq.n	80067c6 <UART_SetConfig+0x216e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b07      	cmp	r3, #7
 8006786:	d01c      	beq.n	80067c2 <UART_SetConfig+0x216a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2b08      	cmp	r3, #8
 800678e:	d016      	beq.n	80067be <UART_SetConfig+0x2166>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b09      	cmp	r3, #9
 8006796:	d00f      	beq.n	80067b8 <UART_SetConfig+0x2160>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b0a      	cmp	r3, #10
 800679e:	d008      	beq.n	80067b2 <UART_SetConfig+0x215a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	2b0b      	cmp	r3, #11
 80067a6:	d102      	bne.n	80067ae <UART_SetConfig+0x2156>
 80067a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80067ac:	e018      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067ae:	4b18      	ldr	r3, [pc, #96]	; (8006810 <UART_SetConfig+0x21b8>)
 80067b0:	e016      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80067b6:	e013      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067bc:	e010      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067be:	4b1b      	ldr	r3, [pc, #108]	; (800682c <UART_SetConfig+0x21d4>)
 80067c0:	e00e      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <UART_SetConfig+0x21a8>)
 80067c4:	e00c      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <UART_SetConfig+0x21d8>)
 80067c8:	e00a      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <UART_SetConfig+0x21dc>)
 80067cc:	e008      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <UART_SetConfig+0x21ac>)
 80067d0:	e006      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067d2:	4b19      	ldr	r3, [pc, #100]	; (8006838 <UART_SetConfig+0x21e0>)
 80067d4:	e004      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <UART_SetConfig+0x21b0>)
 80067d8:	e002      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <UART_SetConfig+0x21b4>)
 80067dc:	e000      	b.n	80067e0 <UART_SetConfig+0x2188>
 80067de:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <UART_SetConfig+0x21b8>)
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6852      	ldr	r2, [r2, #4]
 80067e4:	0852      	lsrs	r2, r2, #1
 80067e6:	441a      	add	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067f4:	e086      	b.n	8006904 <UART_SetConfig+0x22ac>
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400
 80067fc:	03d09000 	.word	0x03d09000
 8006800:	0003d090 	.word	0x0003d090
 8006804:	0007a120 	.word	0x0007a120
 8006808:	000f4240 	.word	0x000f4240
 800680c:	001e8480 	.word	0x001e8480
 8006810:	003d0900 	.word	0x003d0900
 8006814:	00516155 	.word	0x00516155
 8006818:	0061a800 	.word	0x0061a800
 800681c:	007a1200 	.word	0x007a1200
 8006820:	00a2c2aa 	.word	0x00a2c2aa
 8006824:	00f42400 	.word	0x00f42400
 8006828:	01e84800 	.word	0x01e84800
 800682c:	0001e848 	.word	0x0001e848
 8006830:	00051615 	.word	0x00051615
 8006834:	00061a80 	.word	0x00061a80
 8006838:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d04e      	beq.n	80068e2 <UART_SetConfig+0x228a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2b01      	cmp	r3, #1
 800684a:	d047      	beq.n	80068dc <UART_SetConfig+0x2284>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b02      	cmp	r3, #2
 8006852:	d040      	beq.n	80068d6 <UART_SetConfig+0x227e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b03      	cmp	r3, #3
 800685a:	d039      	beq.n	80068d0 <UART_SetConfig+0x2278>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b04      	cmp	r3, #4
 8006862:	d032      	beq.n	80068ca <UART_SetConfig+0x2272>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b05      	cmp	r3, #5
 800686a:	d02b      	beq.n	80068c4 <UART_SetConfig+0x226c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b06      	cmp	r3, #6
 8006872:	d024      	beq.n	80068be <UART_SetConfig+0x2266>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b07      	cmp	r3, #7
 800687a:	d01d      	beq.n	80068b8 <UART_SetConfig+0x2260>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b08      	cmp	r3, #8
 8006882:	d016      	beq.n	80068b2 <UART_SetConfig+0x225a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	2b09      	cmp	r3, #9
 800688a:	d00f      	beq.n	80068ac <UART_SetConfig+0x2254>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b0a      	cmp	r3, #10
 8006892:	d008      	beq.n	80068a6 <UART_SetConfig+0x224e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b0b      	cmp	r3, #11
 800689a:	d101      	bne.n	80068a0 <UART_SetConfig+0x2248>
 800689c:	2380      	movs	r3, #128	; 0x80
 800689e:	e022      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a4:	e01f      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068aa:	e01c      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b0:	e019      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b6:	e016      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068bc:	e013      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80068c2:	e010      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80068c8:	e00d      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ce:	e00a      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068d0:	f241 5355 	movw	r3, #5461	; 0x1555
 80068d4:	e007      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068da:	e004      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068e0:	e001      	b.n	80068e6 <UART_SetConfig+0x228e>
 80068e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6852      	ldr	r2, [r2, #4]
 80068ea:	0852      	lsrs	r2, r2, #1
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068fa:	e003      	b.n	8006904 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d908      	bls.n	800691c <UART_SetConfig+0x22c4>
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006910:	d204      	bcs.n	800691c <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	e002      	b.n	8006922 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800693e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006942:	4618      	mov	r0, r3
 8006944:	3738      	adds	r7, #56	; 0x38
 8006946:	46bd      	mov	sp, r7
 8006948:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800694c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01a      	beq.n	8006a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4a:	d10a      	bne.n	8006a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006aa0:	f7f9 fe1c 	bl	80006dc <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10e      	bne.n	8006ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f82c 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e022      	b.n	8006b18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d10e      	bne.n	8006afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f816 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e00c      	b.n	8006b18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b30:	e02c      	b.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d028      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3a:	f7f9 fdcf 	bl	80006dc <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11d      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e00f      	b.n	8006bac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69da      	ldr	r2, [r3, #28]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d0c3      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_UARTEx_DisableFifoMode+0x16>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e027      	b.n	8006c1a <HAL_UARTEx_DisableFifoMode+0x66>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2224      	movs	r2, #36	; 0x24
 8006bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e02d      	b.n	8006c9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	; 0x24
 8006c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f850 	bl	8006d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e02d      	b.n	8006d16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	; 0x24
 8006cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f812 	bl	8006d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006d28:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006d2a:	f107 0314 	add.w	r3, r7, #20
 8006d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006d36:	4a2d      	ldr	r2, [pc, #180]	; (8006dec <UARTEx_SetNbDataToProcess+0xcc>)
 8006d38:	f107 030c 	add.w	r3, r7, #12
 8006d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d5c:	e03d      	b.n	8006dda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d5e:	2308      	movs	r3, #8
 8006d60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d62:	2308      	movs	r3, #8
 8006d64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	0e5b      	lsrs	r3, r3, #25
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	0f5b      	lsrs	r3, r3, #29
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006d86:	7fbb      	ldrb	r3, [r7, #30]
 8006d88:	7f3a      	ldrb	r2, [r7, #28]
 8006d8a:	f107 0120 	add.w	r1, r7, #32
 8006d8e:	440a      	add	r2, r1
 8006d90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
 8006d98:	7f3a      	ldrb	r2, [r7, #28]
 8006d9a:	f107 0120 	add.w	r1, r7, #32
 8006d9e:	440a      	add	r2, r1
 8006da0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006db0:	7ffb      	ldrb	r3, [r7, #31]
 8006db2:	7f7a      	ldrb	r2, [r7, #29]
 8006db4:	f107 0120 	add.w	r1, r7, #32
 8006db8:	440a      	add	r2, r1
 8006dba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	7f7a      	ldrb	r2, [r7, #29]
 8006dc4:	f107 0120 	add.w	r1, r7, #32
 8006dc8:	440a      	add	r2, r1
 8006dca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006dda:	bf00      	nop
 8006ddc:	3724      	adds	r7, #36	; 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	08007d70 	.word	0x08007d70
 8006dec:	08007d78 	.word	0x08007d78

08006df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df0:	b084      	sub	sp, #16
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	f107 001c 	add.w	r0, r7, #28
 8006dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d120      	bne.n	8006e4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <USB_CoreInit+0xc0>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d105      	bne.n	8006e3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa5a 	bl	80072f8 <USB_CoreReset>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]
 8006e48:	e01a      	b.n	8006e80 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa4e 	bl	80072f8 <USB_CoreReset>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
 8006e72:	e005      	b.n	8006e80 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d10b      	bne.n	8006e9e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f043 0208 	orr.w	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eaa:	b004      	add	sp, #16
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	ffbdffbf 	.word	0xffbdffbf

08006eb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 0201 	bic.w	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d106      	bne.n	8006f02 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]
 8006f00:	e00b      	b.n	8006f1a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60da      	str	r2, [r3, #12]
 8006f14:	e001      	b.n	8006f1a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e003      	b.n	8006f22 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f1a:	2032      	movs	r0, #50	; 0x32
 8006f1c:	f7f9 fbea 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	e009      	b.n	8006f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3340      	adds	r3, #64	; 0x40
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2b0e      	cmp	r3, #14
 8006f64:	d9f2      	bls.n	8006f4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d112      	bne.n	8006f92 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	e005      	b.n	8006f9e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb8:	461a      	mov	r2, r3
 8006fba:	680b      	ldr	r3, [r1, #0]
 8006fbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d10c      	bne.n	8006fde <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f961 	bl	8007294 <USB_SetDevSpeed>
 8006fd2:	e008      	b.n	8006fe6 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f95c 	bl	8007294 <USB_SetDevSpeed>
 8006fdc:	e003      	b.n	8006fe6 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fde:	2103      	movs	r1, #3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f957 	bl	8007294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fe6:	2110      	movs	r1, #16
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f90b 	bl	8007204 <USB_FlushTxFifo>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f929 	bl	8007250 <USB_FlushRxFifo>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	461a      	mov	r2, r3
 8007010:	2300      	movs	r3, #0
 8007012:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007026:	461a      	mov	r2, r3
 8007028:	2300      	movs	r3, #0
 800702a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	e043      	b.n	80070ba <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007048:	d118      	bne.n	800707c <USB_DevInit+0x150>
    {
      if (i == 0U)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	461a      	mov	r2, r3
 800705e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	e013      	b.n	800708e <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	461a      	mov	r2, r3
 8007074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e008      	b.n	800708e <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	461a      	mov	r2, r3
 800709c:	2300      	movs	r3, #0
 800709e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ac:	461a      	mov	r2, r3
 80070ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3301      	adds	r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d3b7      	bcc.n	8007032 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	e043      	b.n	8007150 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070de:	d118      	bne.n	8007112 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f2:	461a      	mov	r2, r3
 80070f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e013      	b.n	8007124 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	461a      	mov	r2, r3
 800710a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e008      	b.n	8007124 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	461a      	mov	r2, r3
 8007120:	2300      	movs	r3, #0
 8007122:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	2300      	movs	r3, #0
 8007134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	461a      	mov	r2, r3
 8007144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007148:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3301      	adds	r3, #1
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	d3b7      	bcc.n	80070c8 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800716a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2b01      	cmp	r3, #1
 8007170:	d110      	bne.n	8007194 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	461a      	mov	r2, r3
 800717a:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <USB_DevInit+0x2c8>)
 800717c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718c:	4619      	mov	r1, r3
 800718e:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <USB_DevInit+0x2cc>)
 8007190:	4313      	orrs	r3, r2
 8007192:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f043 0210 	orr.w	r2, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	4b10      	ldr	r3, [pc, #64]	; (80071fc <USB_DevInit+0x2d0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f043 0208 	orr.w	r2, r3, #8
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d105      	bne.n	80071e4 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	4b08      	ldr	r3, [pc, #32]	; (8007200 <USB_DevInit+0x2d4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071f0:	b004      	add	sp, #16
 80071f2:	4770      	bx	lr
 80071f4:	00800100 	.word	0x00800100
 80071f8:	00010003 	.word	0x00010003
 80071fc:	803c3800 	.word	0x803c3800
 8007200:	40000004 	.word	0x40000004

08007204 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	019b      	lsls	r3, r3, #6
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4a09      	ldr	r2, [pc, #36]	; (800724c <USB_FlushTxFifo+0x48>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d901      	bls.n	8007230 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e006      	b.n	800723e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b20      	cmp	r3, #32
 800723a:	d0f0      	beq.n	800721e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	00030d40 	.word	0x00030d40

08007250 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2210      	movs	r2, #16
 8007260:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3301      	adds	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4a09      	ldr	r2, [pc, #36]	; (8007290 <USB_FlushRxFifo+0x40>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d901      	bls.n	8007274 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e006      	b.n	8007282 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b10      	cmp	r3, #16
 800727e:	d0f0      	beq.n	8007262 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	00030d40 	.word	0x00030d40

08007294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b4:	4313      	orrs	r3, r2
 80072b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80072e6:	2003      	movs	r0, #3
 80072e8:	f7f9 fa04 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a13      	ldr	r2, [pc, #76]	; (800735c <USB_CoreReset+0x64>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d901      	bls.n	8007316 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e01b      	b.n	800734e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	daf2      	bge.n	8007304 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f043 0201 	orr.w	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4a09      	ldr	r2, [pc, #36]	; (800735c <USB_CoreReset+0x64>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e006      	b.n	800734e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d0f0      	beq.n	800732e <USB_CoreReset+0x36>

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	00030d40 	.word	0x00030d40

08007360 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08c      	sub	sp, #48	; 0x30
 8007364:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007366:	f107 031c 	add.w	r3, r7, #28
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	609a      	str	r2, [r3, #8]
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007376:	4b70      	ldr	r3, [pc, #448]	; (8007538 <MX_GPIO_Init+0x1d8>)
 8007378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800737c:	4a6e      	ldr	r2, [pc, #440]	; (8007538 <MX_GPIO_Init+0x1d8>)
 800737e:	f043 0304 	orr.w	r3, r3, #4
 8007382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007386:	4b6c      	ldr	r3, [pc, #432]	; (8007538 <MX_GPIO_Init+0x1d8>)
 8007388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007394:	4b68      	ldr	r3, [pc, #416]	; (8007538 <MX_GPIO_Init+0x1d8>)
 8007396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800739a:	4a67      	ldr	r2, [pc, #412]	; (8007538 <MX_GPIO_Init+0x1d8>)
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073a4:	4b64      	ldr	r3, [pc, #400]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b2:	4b61      	ldr	r3, [pc, #388]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073b8:	4a5f      	ldr	r2, [pc, #380]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073c2:	4b5d      	ldr	r3, [pc, #372]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80073d0:	4b59      	ldr	r3, [pc, #356]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073d6:	4a58      	ldr	r2, [pc, #352]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073d8:	f043 0302 	orr.w	r3, r3, #2
 80073dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073e0:	4b55      	ldr	r3, [pc, #340]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073ee:	4b52      	ldr	r3, [pc, #328]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073f4:	4a50      	ldr	r2, [pc, #320]	; (8007538 <MX_GPIO_Init+0x1d8>)
 80073f6:	f043 0308 	orr.w	r3, r3, #8
 80073fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073fe:	4b4e      	ldr	r3, [pc, #312]	; (8007538 <MX_GPIO_Init+0x1d8>)
 8007400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800740c:	4b4a      	ldr	r3, [pc, #296]	; (8007538 <MX_GPIO_Init+0x1d8>)
 800740e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007412:	4a49      	ldr	r2, [pc, #292]	; (8007538 <MX_GPIO_Init+0x1d8>)
 8007414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800741c:	4b46      	ldr	r3, [pc, #280]	; (8007538 <MX_GPIO_Init+0x1d8>)
 800741e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800742a:	2200      	movs	r2, #0
 800742c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8007430:	4842      	ldr	r0, [pc, #264]	; (800753c <MX_GPIO_Init+0x1dc>)
 8007432:	f7f9 fc4d 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8007436:	2200      	movs	r2, #0
 8007438:	2140      	movs	r1, #64	; 0x40
 800743a:	4841      	ldr	r0, [pc, #260]	; (8007540 <MX_GPIO_Init+0x1e0>)
 800743c:	f7f9 fc48 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007446:	4b3f      	ldr	r3, [pc, #252]	; (8007544 <MX_GPIO_Init+0x1e4>)
 8007448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800744a:	2300      	movs	r3, #0
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800744e:	f107 031c 	add.w	r3, r7, #28
 8007452:	4619      	mov	r1, r3
 8007454:	483c      	ldr	r0, [pc, #240]	; (8007548 <MX_GPIO_Init+0x1e8>)
 8007456:	f7f9 fa8b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800745a:	2332      	movs	r3, #50	; 0x32
 800745c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745e:	2302      	movs	r3, #2
 8007460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007462:	2300      	movs	r3, #0
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007466:	2300      	movs	r3, #0
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800746a:	230b      	movs	r3, #11
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800746e:	f107 031c 	add.w	r3, r7, #28
 8007472:	4619      	mov	r1, r3
 8007474:	4834      	ldr	r0, [pc, #208]	; (8007548 <MX_GPIO_Init+0x1e8>)
 8007476:	f7f9 fa7b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800747a:	2386      	movs	r3, #134	; 0x86
 800747c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800747e:	2302      	movs	r3, #2
 8007480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007486:	2300      	movs	r3, #0
 8007488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800748a:	230b      	movs	r3, #11
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800748e:	f107 031c 	add.w	r3, r7, #28
 8007492:	4619      	mov	r1, r3
 8007494:	482d      	ldr	r0, [pc, #180]	; (800754c <MX_GPIO_Init+0x1ec>)
 8007496:	f7f9 fa6b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800749a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800749e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a0:	2302      	movs	r3, #2
 80074a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a8:	2300      	movs	r3, #0
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074ac:	230b      	movs	r3, #11
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80074b0:	f107 031c 	add.w	r3, r7, #28
 80074b4:	4619      	mov	r1, r3
 80074b6:	4821      	ldr	r0, [pc, #132]	; (800753c <MX_GPIO_Init+0x1dc>)
 80074b8:	f7f9 fa5a 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80074bc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80074c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074c2:	2301      	movs	r3, #1
 80074c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ca:	2300      	movs	r3, #0
 80074cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ce:	f107 031c 	add.w	r3, r7, #28
 80074d2:	4619      	mov	r1, r3
 80074d4:	4819      	ldr	r0, [pc, #100]	; (800753c <MX_GPIO_Init+0x1dc>)
 80074d6:	f7f9 fa4b 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80074da:	2340      	movs	r3, #64	; 0x40
 80074dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074de:	2301      	movs	r3, #1
 80074e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e6:	2300      	movs	r3, #0
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80074ea:	f107 031c 	add.w	r3, r7, #28
 80074ee:	4619      	mov	r1, r3
 80074f0:	4813      	ldr	r0, [pc, #76]	; (8007540 <MX_GPIO_Init+0x1e0>)
 80074f2:	f7f9 fa3d 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074fa:	2300      	movs	r3, #0
 80074fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007502:	f107 031c 	add.w	r3, r7, #28
 8007506:	4619      	mov	r1, r3
 8007508:	480d      	ldr	r0, [pc, #52]	; (8007540 <MX_GPIO_Init+0x1e0>)
 800750a:	f7f9 fa31 	bl	8000970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800750e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007514:	2302      	movs	r3, #2
 8007516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800751c:	2300      	movs	r3, #0
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007520:	230b      	movs	r3, #11
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007524:	f107 031c 	add.w	r3, r7, #28
 8007528:	4619      	mov	r1, r3
 800752a:	4805      	ldr	r0, [pc, #20]	; (8007540 <MX_GPIO_Init+0x1e0>)
 800752c:	f7f9 fa20 	bl	8000970 <HAL_GPIO_Init>

}
 8007530:	bf00      	nop
 8007532:	3730      	adds	r7, #48	; 0x30
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	58024400 	.word	0x58024400
 800753c:	58020400 	.word	0x58020400
 8007540:	58021800 	.word	0x58021800
 8007544:	11110000 	.word	0x11110000
 8007548:	58020800 	.word	0x58020800
 800754c:	58020000 	.word	0x58020000

08007550 <main>:
  * @retval int
  */
 volatile int a=1;
 volatile int b;
int main(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int c=3;
 8007556:	2303      	movs	r3, #3
 8007558:	607b      	str	r3, [r7, #4]
int d=4;
 800755a:	2304      	movs	r3, #4
 800755c:	603b      	str	r3, [r7, #0]
a=5;
 800755e:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <main+0x7c>)
 8007560:	2205      	movs	r2, #5
 8007562:	601a      	str	r2, [r3, #0]
b=6;
 8007564:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <main+0x80>)
 8007566:	2206      	movs	r2, #6
 8007568:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800756a:	f7f9 f835 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800756e:	f000 f833 	bl	80075d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007572:	f7ff fef5 	bl	8007360 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8007576:	f000 fa79 	bl	8007a6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800757a:	f000 fb0d 	bl	8007b98 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800757e:	f000 f9a1 	bl	80078c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start the PWM.
 8007582:	2100      	movs	r1, #0
 8007584:	4813      	ldr	r0, [pc, #76]	; (80075d4 <main+0x84>)
 8007586:	f7fb ffdd 	bl	8003544 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  htim2.Instance->CCR1 = 1800; //0 degree at Duty cycle 1ms.
 800758a:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <main+0x84>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8007592:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8007594:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007598:	f7f9 f8ac 	bl	80006f4 <HAL_Delay>

	  htim2.Instance->CCR1 = 2700; //90 degree at Duty cycle 1.5ms.
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <main+0x84>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f640 228c 	movw	r2, #2700	; 0xa8c
 80075a4:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80075a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80075aa:	f7f9 f8a3 	bl	80006f4 <HAL_Delay>

	  htim2.Instance->CCR1 = 3600; //180 degree at Duty cycle 2ms.
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <main+0x84>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80075b6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80075b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80075bc:	f7f9 f89a 	bl	80006f4 <HAL_Delay>

	  HAL_Delay(2000);
 80075c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80075c4:	f7f9 f896 	bl	80006f4 <HAL_Delay>
	  htim2.Instance->CCR1 = 1800; //0 degree at Duty cycle 1ms.
 80075c8:	e7df      	b.n	800758a <main+0x3a>
 80075ca:	bf00      	nop
 80075cc:	24000008 	.word	0x24000008
 80075d0:	24000034 	.word	0x24000034
 80075d4:	24000038 	.word	0x24000038

080075d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0cc      	sub	sp, #304	; 0x130
 80075dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80075e2:	224c      	movs	r2, #76	; 0x4c
 80075e4:	2100      	movs	r1, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fbae 	bl	8007d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075f0:	2220      	movs	r2, #32
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fba7 	bl	8007d48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075fa:	f107 0308 	add.w	r3, r7, #8
 80075fe:	4618      	mov	r0, r3
 8007600:	23bc      	movs	r3, #188	; 0xbc
 8007602:	461a      	mov	r2, r3
 8007604:	2100      	movs	r1, #0
 8007606:	f000 fb9f 	bl	8007d48 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800760a:	2002      	movs	r0, #2
 800760c:	f7f9 fcc2 	bl	8000f94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007610:	1d3b      	adds	r3, r7, #4
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	4b4a      	ldr	r3, [pc, #296]	; (8007740 <SystemClock_Config+0x168>)
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	4a49      	ldr	r2, [pc, #292]	; (8007740 <SystemClock_Config+0x168>)
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007622:	4b47      	ldr	r3, [pc, #284]	; (8007740 <SystemClock_Config+0x168>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f003 0201 	and.w	r2, r3, #1
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	4b45      	ldr	r3, [pc, #276]	; (8007744 <SystemClock_Config+0x16c>)
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007636:	4a43      	ldr	r2, [pc, #268]	; (8007744 <SystemClock_Config+0x16c>)
 8007638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800763c:	6193      	str	r3, [r2, #24]
 800763e:	4b41      	ldr	r3, [pc, #260]	; (8007744 <SystemClock_Config+0x16c>)
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	1d3b      	adds	r3, r7, #4
 800764c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800764e:	bf00      	nop
 8007650:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <SystemClock_Config+0x16c>)
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800765c:	d1f8      	bne.n	8007650 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800765e:	2301      	movs	r3, #1
 8007660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007668:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800766c:	2302      	movs	r3, #2
 800766e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007672:	2302      	movs	r3, #2
 8007674:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007678:	2301      	movs	r3, #1
 800767a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800767e:	2318      	movs	r3, #24
 8007680:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007684:	2302      	movs	r3, #2
 8007686:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800768a:	2304      	movs	r3, #4
 800768c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007690:	2302      	movs	r3, #2
 8007692:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007696:	230c      	movs	r3, #12
 8007698:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800769c:	2300      	movs	r3, #0
 800769e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7f9 fcb9 	bl	8001024 <HAL_RCC_OscConfig>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80076b8:	f000 f848 	bl	800774c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076bc:	233f      	movs	r3, #63	; 0x3f
 80076be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076c2:	2303      	movs	r3, #3
 80076c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80076c8:	2300      	movs	r3, #0
 80076ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80076ce:	2308      	movs	r3, #8
 80076d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80076d4:	2300      	movs	r3, #0
 80076d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80076da:	2300      	movs	r3, #0
 80076dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80076e6:	2300      	movs	r3, #0
 80076e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80076ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80076f0:	2101      	movs	r1, #1
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fa f84e 	bl	8001794 <HAL_RCC_ClockConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80076fe:	f000 f825 	bl	800774c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	4a10      	ldr	r2, [pc, #64]	; (8007748 <SystemClock_Config+0x170>)
 8007708:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800770a:	f107 0308 	add.w	r3, r7, #8
 800770e:	2200      	movs	r2, #0
 8007710:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800771a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4618      	mov	r0, r3
 8007724:	f7fa fb90 	bl	8001e48 <HAL_RCCEx_PeriphCLKConfig>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800772e:	f000 f80d 	bl	800774c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007732:	f7f9 fc67 	bl	8001004 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8007736:	bf00      	nop
 8007738:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	58000400 	.word	0x58000400
 8007744:	58024800 	.word	0x58024800
 8007748:	00040002 	.word	0x00040002

0800774c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007750:	bf00      	nop
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
	...

0800775c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_MspInit+0x30>)
 8007764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007768:	4a08      	ldr	r2, [pc, #32]	; (800778c <HAL_MspInit+0x30>)
 800776a:	f043 0302 	orr.w	r3, r3, #2
 800776e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <HAL_MspInit+0x30>)
 8007774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	58024400 	.word	0x58024400

08007790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800779e:	b480      	push	{r7}
 80077a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077a2:	e7fe      	b.n	80077a2 <HardFault_Handler+0x4>

080077a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077a8:	e7fe      	b.n	80077a8 <MemManage_Handler+0x4>

080077aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077ae:	e7fe      	b.n	80077ae <BusFault_Handler+0x4>

080077b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077b4:	e7fe      	b.n	80077b4 <UsageFault_Handler+0x4>

080077b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077b6:	b480      	push	{r7}
 80077b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077c8:	bf00      	nop
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077d2:	b480      	push	{r7}
 80077d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077d6:	bf00      	nop
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077e4:	f7f8 ff66 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}

080077ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80077f0:	4802      	ldr	r0, [pc, #8]	; (80077fc <TIM2_IRQHandler+0x10>)
 80077f2:	f7fb feff 	bl	80035f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80077f6:	bf00      	nop
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	24000038 	.word	0x24000038

08007800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007804:	4b29      	ldr	r3, [pc, #164]	; (80078ac <SystemInit+0xac>)
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780a:	4a28      	ldr	r2, [pc, #160]	; (80078ac <SystemInit+0xac>)
 800780c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007814:	4b26      	ldr	r3, [pc, #152]	; (80078b0 <SystemInit+0xb0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <SystemInit+0xb0>)
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007820:	4b23      	ldr	r3, [pc, #140]	; (80078b0 <SystemInit+0xb0>)
 8007822:	2200      	movs	r2, #0
 8007824:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007826:	4b22      	ldr	r3, [pc, #136]	; (80078b0 <SystemInit+0xb0>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4921      	ldr	r1, [pc, #132]	; (80078b0 <SystemInit+0xb0>)
 800782c:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <SystemInit+0xb4>)
 800782e:	4013      	ands	r3, r2
 8007830:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007832:	4b1f      	ldr	r3, [pc, #124]	; (80078b0 <SystemInit+0xb0>)
 8007834:	2200      	movs	r2, #0
 8007836:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007838:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <SystemInit+0xb0>)
 800783a:	2200      	movs	r2, #0
 800783c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800783e:	4b1c      	ldr	r3, [pc, #112]	; (80078b0 <SystemInit+0xb0>)
 8007840:	2200      	movs	r2, #0
 8007842:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007844:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <SystemInit+0xb0>)
 8007846:	2200      	movs	r2, #0
 8007848:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800784a:	4b19      	ldr	r3, [pc, #100]	; (80078b0 <SystemInit+0xb0>)
 800784c:	2200      	movs	r2, #0
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007850:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <SystemInit+0xb0>)
 8007852:	2200      	movs	r2, #0
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007856:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <SystemInit+0xb0>)
 8007858:	2200      	movs	r2, #0
 800785a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800785c:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <SystemInit+0xb0>)
 800785e:	2200      	movs	r2, #0
 8007860:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007862:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <SystemInit+0xb0>)
 8007864:	2200      	movs	r2, #0
 8007866:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <SystemInit+0xb0>)
 800786a:	2200      	movs	r2, #0
 800786c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <SystemInit+0xb0>)
 8007870:	2200      	movs	r2, #0
 8007872:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007874:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <SystemInit+0xb0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a0d      	ldr	r2, [pc, #52]	; (80078b0 <SystemInit+0xb0>)
 800787a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <SystemInit+0xb0>)
 8007882:	2200      	movs	r2, #0
 8007884:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <SystemInit+0xb8>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <SystemInit+0xbc>)
 800788c:	4013      	ands	r3, r2
 800788e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007892:	d202      	bcs.n	800789a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <SystemInit+0xc0>)
 8007896:	2201      	movs	r2, #1
 8007898:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <SystemInit+0xac>)
 800789c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80078a2:	bf00      	nop
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	e000ed00 	.word	0xe000ed00
 80078b0:	58024400 	.word	0x58024400
 80078b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80078b8:	5c001000 	.word	0x5c001000
 80078bc:	ffff0000 	.word	0xffff0000
 80078c0:	51008108 	.word	0x51008108

080078c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08e      	sub	sp, #56	; 0x38
 80078c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078d8:	f107 031c 	add.w	r3, r7, #28
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078e4:	463b      	mov	r3, r7
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	605a      	str	r2, [r3, #4]
 80078ec:	609a      	str	r2, [r3, #8]
 80078ee:	60da      	str	r2, [r3, #12]
 80078f0:	611a      	str	r2, [r3, #16]
 80078f2:	615a      	str	r2, [r3, #20]
 80078f4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80078f6:	4b2d      	ldr	r3, [pc, #180]	; (80079ac <MX_TIM2_Init+0xe8>)
 80078f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80078fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9; //PSC=10.
 80078fe:	4b2b      	ldr	r3, [pc, #172]	; (80079ac <MX_TIM2_Init+0xe8>)
 8007900:	2209      	movs	r2, #9
 8007902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007904:	4b29      	ldr	r3, [pc, #164]	; (80079ac <MX_TIM2_Init+0xe8>)
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 35999; //ARR=35,000.
 800790a:	4b28      	ldr	r3, [pc, #160]	; (80079ac <MX_TIM2_Init+0xe8>)
 800790c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007910:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007912:	4b26      	ldr	r3, [pc, #152]	; (80079ac <MX_TIM2_Init+0xe8>)
 8007914:	2200      	movs	r2, #0
 8007916:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007918:	4b24      	ldr	r3, [pc, #144]	; (80079ac <MX_TIM2_Init+0xe8>)
 800791a:	2200      	movs	r2, #0
 800791c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800791e:	4823      	ldr	r0, [pc, #140]	; (80079ac <MX_TIM2_Init+0xe8>)
 8007920:	f7fb fdb0 	bl	8003484 <HAL_TIM_Base_Init>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800792a:	f7ff ff0f 	bl	800774c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800792e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007938:	4619      	mov	r1, r3
 800793a:	481c      	ldr	r0, [pc, #112]	; (80079ac <MX_TIM2_Init+0xe8>)
 800793c:	f7fc f892 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8007946:	f7ff ff01 	bl	800774c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800794a:	4818      	ldr	r0, [pc, #96]	; (80079ac <MX_TIM2_Init+0xe8>)
 800794c:	f7fb fdc5 	bl	80034da <HAL_TIM_PWM_Init>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8007956:	f7ff fef9 	bl	800774c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800795a:	2300      	movs	r3, #0
 800795c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800795e:	2300      	movs	r3, #0
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007962:	f107 031c 	add.w	r3, r7, #28
 8007966:	4619      	mov	r1, r3
 8007968:	4810      	ldr	r0, [pc, #64]	; (80079ac <MX_TIM2_Init+0xe8>)
 800796a:	f7fc fda9 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8007974:	f7ff feea 	bl	800774c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007978:	2360      	movs	r3, #96	; 0x60
 800797a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007980:	2300      	movs	r3, #0
 8007982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007988:	463b      	mov	r3, r7
 800798a:	2200      	movs	r2, #0
 800798c:	4619      	mov	r1, r3
 800798e:	4807      	ldr	r0, [pc, #28]	; (80079ac <MX_TIM2_Init+0xe8>)
 8007990:	f7fb ff50 	bl	8003834 <HAL_TIM_PWM_ConfigChannel>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800799a:	f7ff fed7 	bl	800774c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800799e:	4803      	ldr	r0, [pc, #12]	; (80079ac <MX_TIM2_Init+0xe8>)
 80079a0:	f000 f82c 	bl	80079fc <HAL_TIM_MspPostInit>

}
 80079a4:	bf00      	nop
 80079a6:	3738      	adds	r7, #56	; 0x38
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	24000038 	.word	0x24000038

080079b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c0:	d116      	bne.n	80079f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079c2:	4b0d      	ldr	r3, [pc, #52]	; (80079f8 <HAL_TIM_Base_MspInit+0x48>)
 80079c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079c8:	4a0b      	ldr	r2, [pc, #44]	; (80079f8 <HAL_TIM_Base_MspInit+0x48>)
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80079d2:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <HAL_TIM_Base_MspInit+0x48>)
 80079d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	201c      	movs	r0, #28
 80079e6:	f7f8 ff8e 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80079ea:	201c      	movs	r0, #28
 80079ec:	f7f8 ffa5 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80079f0:	bf00      	nop
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	58024400 	.word	0x58024400

080079fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a04:	f107 030c 	add.w	r3, r7, #12
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	609a      	str	r2, [r3, #8]
 8007a10:	60da      	str	r2, [r3, #12]
 8007a12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1c:	d11e      	bne.n	8007a5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1e:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <HAL_TIM_MspPostInit+0x68>)
 8007a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a24:	4a0f      	ldr	r2, [pc, #60]	; (8007a64 <HAL_TIM_MspPostInit+0x68>)
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <HAL_TIM_MspPostInit+0x68>)
 8007a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a40:	2302      	movs	r3, #2
 8007a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a50:	f107 030c 	add.w	r3, r7, #12
 8007a54:	4619      	mov	r1, r3
 8007a56:	4804      	ldr	r0, [pc, #16]	; (8007a68 <HAL_TIM_MspPostInit+0x6c>)
 8007a58:	f7f8 ff8a 	bl	8000970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007a5c:	bf00      	nop
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	58024400 	.word	0x58024400
 8007a68:	58020000 	.word	0x58020000

08007a6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007a70:	4b22      	ldr	r3, [pc, #136]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a72:	4a23      	ldr	r2, [pc, #140]	; (8007b00 <MX_USART3_UART_Init+0x94>)
 8007a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007a76:	4b21      	ldr	r3, [pc, #132]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007a7e:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a84:	4b1d      	ldr	r3, [pc, #116]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007a8a:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a92:	220c      	movs	r2, #12
 8007a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a96:	4b19      	ldr	r3, [pc, #100]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a9c:	4b17      	ldr	r3, [pc, #92]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007aa2:	4b16      	ldr	r3, [pc, #88]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007aa8:	4b14      	ldr	r3, [pc, #80]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007aae:	4b13      	ldr	r3, [pc, #76]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007ab4:	4811      	ldr	r0, [pc, #68]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007ab6:	f7fc fd7d 	bl	80045b4 <HAL_UART_Init>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007ac0:	f7ff fe44 	bl	800774c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	480d      	ldr	r0, [pc, #52]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007ac8:	f7ff f8ad 	bl	8006c26 <HAL_UARTEx_SetTxFifoThreshold>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007ad2:	f7ff fe3b 	bl	800774c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007ada:	f7ff f8e2 	bl	8006ca2 <HAL_UARTEx_SetRxFifoThreshold>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007ae4:	f7ff fe32 	bl	800774c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007ae8:	4804      	ldr	r0, [pc, #16]	; (8007afc <MX_USART3_UART_Init+0x90>)
 8007aea:	f7ff f863 	bl	8006bb4 <HAL_UARTEx_DisableFifoMode>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007af4:	f7ff fe2a 	bl	800774c <Error_Handler>
  }

}
 8007af8:	bf00      	nop
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	24000078 	.word	0x24000078
 8007b00:	40004800 	.word	0x40004800

08007b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	; 0x28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	609a      	str	r2, [r3, #8]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <HAL_UART_MspInit+0x88>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d12e      	bne.n	8007b84 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007b26:	4b1a      	ldr	r3, [pc, #104]	; (8007b90 <HAL_UART_MspInit+0x8c>)
 8007b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b2c:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <HAL_UART_MspInit+0x8c>)
 8007b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007b36:	4b16      	ldr	r3, [pc, #88]	; (8007b90 <HAL_UART_MspInit+0x8c>)
 8007b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b44:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <HAL_UART_MspInit+0x8c>)
 8007b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b4a:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <HAL_UART_MspInit+0x8c>)
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <HAL_UART_MspInit+0x8c>)
 8007b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b70:	2300      	movs	r3, #0
 8007b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007b74:	2307      	movs	r3, #7
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b78:	f107 0314 	add.w	r3, r7, #20
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4805      	ldr	r0, [pc, #20]	; (8007b94 <HAL_UART_MspInit+0x90>)
 8007b80:	f7f8 fef6 	bl	8000970 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007b84:	bf00      	nop
 8007b86:	3728      	adds	r7, #40	; 0x28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40004800 	.word	0x40004800
 8007b90:	58024400 	.word	0x58024400
 8007b94:	58020c00 	.word	0x58020c00

08007b98 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b9c:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007b9e:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8007ba0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8007ba2:	4b14      	ldr	r3, [pc, #80]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007ba4:	2209      	movs	r2, #9
 8007ba6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ba8:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007baa:	2202      	movs	r2, #2
 8007bac:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bae:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007bba:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8007bcc:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007bd2:	4b08      	ldr	r3, [pc, #32]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bde:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8007be0:	f7f9 f88f 	bl	8000d02 <HAL_PCD_Init>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8007bea:	f7ff fdaf 	bl	800774c <Error_Handler>
  }

}
 8007bee:	bf00      	nop
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	24000104 	.word	0x24000104
 8007bf8:	40080000 	.word	0x40080000

08007bfc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a21      	ldr	r2, [pc, #132]	; (8007ca0 <HAL_PCD_MspInit+0xa4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d13b      	bne.n	8007c96 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1e:	4b21      	ldr	r3, [pc, #132]	; (8007ca4 <HAL_PCD_MspInit+0xa8>)
 8007c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c24:	4a1f      	ldr	r2, [pc, #124]	; (8007ca4 <HAL_PCD_MspInit+0xa8>)
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ca4 <HAL_PCD_MspInit+0xa8>)
 8007c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007c3c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c42:	2302      	movs	r3, #2
 8007c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007c4e:	230a      	movs	r3, #10
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c52:	f107 0314 	add.w	r3, r7, #20
 8007c56:	4619      	mov	r1, r3
 8007c58:	4813      	ldr	r0, [pc, #76]	; (8007ca8 <HAL_PCD_MspInit+0xac>)
 8007c5a:	f7f8 fe89 	bl	8000970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	4619      	mov	r1, r3
 8007c72:	480d      	ldr	r0, [pc, #52]	; (8007ca8 <HAL_PCD_MspInit+0xac>)
 8007c74:	f7f8 fe7c 	bl	8000970 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <HAL_PCD_MspInit+0xa8>)
 8007c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <HAL_PCD_MspInit+0xa8>)
 8007c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <HAL_PCD_MspInit+0xa8>)
 8007c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c96:	bf00      	nop
 8007c98:	3728      	adds	r7, #40	; 0x28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40080000 	.word	0x40080000
 8007ca4:	58024400 	.word	0x58024400
 8007ca8:	58020000 	.word	0x58020000

08007cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007cb2:	e003      	b.n	8007cbc <LoopCopyDataInit>

08007cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007cba:	3104      	adds	r1, #4

08007cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007cbc:	480b      	ldr	r0, [pc, #44]	; (8007cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007cc4:	d3f6      	bcc.n	8007cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8007cc6:	4a0b      	ldr	r2, [pc, #44]	; (8007cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007cc8:	e002      	b.n	8007cd0 <LoopFillZerobss>

08007cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ccc:	f842 3b04 	str.w	r3, [r2], #4

08007cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007cd4:	d3f9      	bcc.n	8007cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007cd6:	f7ff fd93 	bl	8007800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007cda:	f000 f811 	bl	8007d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007cde:	f7ff fc37 	bl	8007550 <main>
  bx  lr    
 8007ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ce4:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 8007ce8:	08007da0 	.word	0x08007da0
  ldr  r0, =_sdata
 8007cec:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8007cf0:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8007cf4:	24000014 	.word	0x24000014
  ldr  r3, = _ebss
 8007cf8:	2400050c 	.word	0x2400050c

08007cfc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007cfc:	e7fe      	b.n	8007cfc <ADC3_IRQHandler>
	...

08007d00 <__libc_init_array>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4e0d      	ldr	r6, [pc, #52]	; (8007d38 <__libc_init_array+0x38>)
 8007d04:	4c0d      	ldr	r4, [pc, #52]	; (8007d3c <__libc_init_array+0x3c>)
 8007d06:	1ba4      	subs	r4, r4, r6
 8007d08:	10a4      	asrs	r4, r4, #2
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	42a5      	cmp	r5, r4
 8007d0e:	d109      	bne.n	8007d24 <__libc_init_array+0x24>
 8007d10:	4e0b      	ldr	r6, [pc, #44]	; (8007d40 <__libc_init_array+0x40>)
 8007d12:	4c0c      	ldr	r4, [pc, #48]	; (8007d44 <__libc_init_array+0x44>)
 8007d14:	f000 f820 	bl	8007d58 <_init>
 8007d18:	1ba4      	subs	r4, r4, r6
 8007d1a:	10a4      	asrs	r4, r4, #2
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	42a5      	cmp	r5, r4
 8007d20:	d105      	bne.n	8007d2e <__libc_init_array+0x2e>
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d28:	4798      	blx	r3
 8007d2a:	3501      	adds	r5, #1
 8007d2c:	e7ee      	b.n	8007d0c <__libc_init_array+0xc>
 8007d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d32:	4798      	blx	r3
 8007d34:	3501      	adds	r5, #1
 8007d36:	e7f2      	b.n	8007d1e <__libc_init_array+0x1e>
 8007d38:	08007d98 	.word	0x08007d98
 8007d3c:	08007d98 	.word	0x08007d98
 8007d40:	08007d98 	.word	0x08007d98
 8007d44:	08007d9c 	.word	0x08007d9c

08007d48 <memset>:
 8007d48:	4402      	add	r2, r0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d100      	bne.n	8007d52 <memset+0xa>
 8007d50:	4770      	bx	lr
 8007d52:	f803 1b01 	strb.w	r1, [r3], #1
 8007d56:	e7f9      	b.n	8007d4c <memset+0x4>

08007d58 <_init>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	bf00      	nop
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr

08007d64 <_fini>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr
