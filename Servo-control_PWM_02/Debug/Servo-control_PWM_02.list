
Servo-control_PWM_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008504  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087bc  080087bc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080087bc  080087bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c4  080087c4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080087cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080087dc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800883c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000598  240000d0  0800889c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000668  0800889c  00020668  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026390  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003b4d  00000000  00000000  0004648e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001478  00000000  00000000  00049fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001300  00000000  00000000  0004b458  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00037937  00000000  00000000  0004c758  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00012d87  00000000  00000000  0008408f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0015f6c4  00000000  00000000  00096e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f64da  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005684  00000000  00000000  001f6558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008784 	.word	0x08008784

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08008784 	.word	0x08008784

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f99b 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f001 fea1 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f007 fd9f 	bl	8008170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	080087ac 	.word	0x080087ac
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f983 	bl	800097e <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f94d 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	240000ec 	.word	0x240000ec

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	240000ec 	.word	0x240000ec

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	604b      	str	r3, [r1, #4]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	58000400 	.word	0x58000400

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <__NVIC_SetPriorityGrouping+0x40>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x40>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	05fa0000 	.word	0x05fa0000

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff29 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff40 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff33 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffa4 	bl	80008d4 <SysTick_Config>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e0c6      	b.n	8000b38 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f007 f96c 	bl	8007c90 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2223      	movs	r2, #35	; 0x23
 80009bc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b60      	ldr	r3, [pc, #384]	; (8000b40 <HAL_ETH_Init+0x1a8>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c4:	4a5e      	ldr	r2, [pc, #376]	; (8000b40 <HAL_ETH_Init+0x1a8>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ce:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <HAL_ETH_Init+0x1a8>)
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff feb3 	bl	8000750 <HAL_SYSCFG_ETHInterfaceSelect>
 80009ea:	e003      	b.n	80009f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80009ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009f0:	f7ff feae 	bl	8000750 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a0c:	f7ff fe66 	bl	80006dc <HAL_GetTick>
 8000a10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000a12:	e00f      	b.n	8000a34 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000a14:	f7ff fe62 	bl	80006dc <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a22:	d907      	bls.n	8000a34 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	22e0      	movs	r2, #224	; 0xe0
 8000a2e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e081      	b.n	8000b38 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1e6      	bne.n	8000a14 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 fac0 	bl	8000fcc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000a4c:	f001 fdde 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8000a50:	4602      	mov	r2, r0
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <HAL_ETH_Init+0x1ac>)
 8000a54:	fba3 2302 	umull	r2, r3, r3, r2
 8000a58:	0c9a      	lsrs	r2, r3, #18
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3a01      	subs	r2, #1
 8000a60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 fa13 	bl	8000e90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a80:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a84:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2201      	movs	r2, #1
 8000a96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	22e0      	movs	r2, #224	; 0xe0
 8000a9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e04a      	b.n	8000b38 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	f241 1308 	movw	r3, #4360	; 0x1108
 8000aaa:	4413      	add	r3, r2
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_ETH_Init+0x1b0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6952      	ldr	r2, [r2, #20]
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	6809      	ldr	r1, [r1, #0]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	f241 1308 	movw	r3, #4360	; 0x1108
 8000ac2:	440b      	add	r3, r1
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 fad8 	bl	800107c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 fb1c 	bl	800110a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	3305      	adds	r3, #5
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	021a      	lsls	r2, r3, #8
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	3303      	adds	r3, #3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	061a      	lsls	r2, r3, #24
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	3302      	adds	r3, #2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	041b      	lsls	r3, r3, #16
 8000b04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b1e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2210      	movs	r2, #16
 8000b34:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024400 	.word	0x58024400
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	ffff8001 	.word	0xffff8001

08000b4c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8000b5e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8000b66:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	7b1b      	ldrb	r3, [r3, #12]
 8000b6c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000b6e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	7b5b      	ldrb	r3, [r3, #13]
 8000b74:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000b76:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	7b9b      	ldrb	r3, [r3, #14]
 8000b7c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000b7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	7bdb      	ldrb	r3, [r3, #15]
 8000b84:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000b86:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	7c12      	ldrb	r2, [r2, #16]
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d102      	bne.n	8000b96 <ETH_SetMACConfig+0x4a>
 8000b90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b94:	e000      	b.n	8000b98 <ETH_SetMACConfig+0x4c>
 8000b96:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000b98:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	7c52      	ldrb	r2, [r2, #17]
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d102      	bne.n	8000ba8 <ETH_SetMACConfig+0x5c>
 8000ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ba6:	e000      	b.n	8000baa <ETH_SetMACConfig+0x5e>
 8000ba8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000baa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	7c9b      	ldrb	r3, [r3, #18]
 8000bb0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000bb2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000bb8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8000bbe:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	7f1b      	ldrb	r3, [r3, #28]
 8000bc4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8000bc6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	7f5b      	ldrb	r3, [r3, #29]
 8000bcc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000bce:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	7f92      	ldrb	r2, [r2, #30]
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	d102      	bne.n	8000bde <ETH_SetMACConfig+0x92>
 8000bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bdc:	e000      	b.n	8000be0 <ETH_SetMACConfig+0x94>
 8000bde:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000be0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	7fdb      	ldrb	r3, [r3, #31]
 8000be6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000be8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d102      	bne.n	8000bfa <ETH_SetMACConfig+0xae>
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	e000      	b.n	8000bfc <ETH_SetMACConfig+0xb0>
 8000bfa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000bfc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000c02:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c0a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8000c0c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <ETH_SetMACConfig+0x22c>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c38:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000c42:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000c4a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000c4c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d102      	bne.n	8000c5e <ETH_SetMACConfig+0x112>
 8000c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c5c:	e000      	b.n	8000c60 <ETH_SetMACConfig+0x114>
 8000c5e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000c60:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <ETH_SetMACConfig+0x230>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <ETH_SetMACConfig+0x234>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	68f9      	ldr	r1, [r7, #12]
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ca8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000cae:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d101      	bne.n	8000cbe <ETH_SetMACConfig+0x172>
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	e000      	b.n	8000cc0 <ETH_SetMACConfig+0x174>
 8000cbe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8000cc0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cd2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000ce8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000cf0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cfe:	f023 0103 	bic.w	r1, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000d16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d101      	bne.n	8000d3a <ETH_SetMACConfig+0x1ee>
 8000d36:	2240      	movs	r2, #64	; 0x40
 8000d38:	e000      	b.n	8000d3c <ETH_SetMACConfig+0x1f0>
 8000d3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8000d3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000d44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000d46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000d4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8000d5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	00048083 	.word	0x00048083
 8000d7c:	c0f88000 	.word	0xc0f88000
 8000d80:	fffffef0 	.word	0xfffffef0

08000d84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <ETH_SetDMAConfig+0xf8>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	6809      	ldr	r1, [r1, #0]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8000daa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000db6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	7b1b      	ldrb	r3, [r3, #12]
 8000dbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f241 0304 	movw	r3, #4100	; 0x1004
 8000dca:	4413      	add	r3, r2
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <ETH_SetDMAConfig+0xfc>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6811      	ldr	r1, [r2, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	f241 0304 	movw	r3, #4100	; 0x1004
 8000dde:	440b      	add	r3, r1
 8000de0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	7b5b      	ldrb	r3, [r3, #13]
 8000de6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <ETH_SetDMAConfig+0x100>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8000e0a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	7d1b      	ldrb	r3, [r3, #20]
 8000e14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e16:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	7f5b      	ldrb	r3, [r3, #29]
 8000e1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f241 1304 	movw	r3, #4356	; 0x1104
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <ETH_SetDMAConfig+0x104>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8000e3e:	440b      	add	r3, r1
 8000e40:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	7f1b      	ldrb	r3, [r3, #28]
 8000e46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	f241 1308 	movw	r3, #4360	; 0x1108
 8000e58:	4413      	add	r3, r2
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <ETH_SetDMAConfig+0x108>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6811      	ldr	r1, [r2, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	431a      	orrs	r2, r3
 8000e68:	f241 1308 	movw	r3, #4360	; 0x1108
 8000e6c:	440b      	add	r3, r1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	ffff87fd 	.word	0xffff87fd
 8000e80:	ffff2ffe 	.word	0xffff2ffe
 8000e84:	fffec000 	.word	0xfffec000
 8000e88:	ffc0efef 	.word	0xffc0efef
 8000e8c:	7fc0ffff 	.word	0x7fc0ffff

08000e90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0a4      	sub	sp, #144	; 0x90
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000ee8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000f12:	2300      	movs	r3, #0
 8000f14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000f28:	2320      	movs	r3, #32
 8000f2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000f3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fde6 	bl	8000b4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000f9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000fb0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fee1 	bl	8000d84 <ETH_SetDMAConfig>
}
 8000fc2:	bf00      	nop
 8000fc4:	3790      	adds	r7, #144	; 0x90
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000fe6:	f001 fb11 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8000fea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d908      	bls.n	8001006 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	; (800106c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d804      	bhi.n	8001006 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e027      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d908      	bls.n	8001020 <ETH_MAC_MDIO_ClkConfig+0x54>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d804      	bhi.n	8001020 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e01a      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d903      	bls.n	8001030 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d911      	bls.n	8001054 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d908      	bls.n	800104a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d804      	bhi.n	800104a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e005      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e000      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001054:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	01312cff 	.word	0x01312cff
 800106c:	02160ebf 	.word	0x02160ebf
 8001070:	039386ff 	.word	0x039386ff
 8001074:	05f5e0ff 	.word	0x05f5e0ff
 8001078:	08f0d17f 	.word	0x08f0d17f

0800107c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e01d      	b.n	80010c6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	3206      	adds	r2, #6
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d9de      	bls.n	800108a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f241 132c 	movw	r3, #4396	; 0x112c
 80010da:	4413      	add	r3, r2
 80010dc:	2203      	movs	r2, #3
 80010de:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68d9      	ldr	r1, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f241 1314 	movw	r3, #4372	; 0x1114
 80010ec:	4413      	add	r3, r2
 80010ee:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e024      	b.n	8001162 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6919      	ldr	r1, [r3, #16]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	330a      	adds	r3, #10
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d9d7      	bls.n	8001118 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f241 1330 	movw	r3, #4400	; 0x1130
 800118e:	4413      	add	r3, r2
 8001190:	2203      	movs	r2, #3
 8001192:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6919      	ldr	r1, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	f241 131c 	movw	r3, #4380	; 0x111c
 80011a0:	4413      	add	r3, r2
 80011a2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	f241 1328 	movw	r3, #4392	; 0x1128
 80011b4:	4413      	add	r3, r2
 80011b6:	6019      	str	r1, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011d2:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <HAL_GPIO_Init+0x234>)
 80011d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011d6:	e194      	b.n	8001502 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8186 	beq.w	80014fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x3c>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d00b      	beq.n	800129c <HAL_GPIO_Init+0xd8>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001290:	2b11      	cmp	r3, #17
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b12      	cmp	r3, #18
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d2:	2201      	movs	r2, #1
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 0201 	and.w	r2, r3, #1
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80e0 	beq.w	80014fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x238>)
 800133e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <HAL_GPIO_Init+0x238>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_GPIO_Init+0x238>)
 800134e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x23c>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_GPIO_Init+0x240>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d052      	beq.n	800142c <HAL_GPIO_Init+0x268>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x244>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d031      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_GPIO_Init+0x248>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x22a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x24c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x250>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_GPIO_Init+0x254>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	; (800141c <HAL_GPIO_Init+0x258>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x25c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x260>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_GPIO_Init+0x264>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x20e>
 80013ce:	2309      	movs	r3, #9
 80013d0:	e02d      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013d2:	230a      	movs	r3, #10
 80013d4:	e02b      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013d6:	2308      	movs	r3, #8
 80013d8:	e029      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013da:	2307      	movs	r3, #7
 80013dc:	e027      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013de:	2306      	movs	r3, #6
 80013e0:	e025      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e023      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e021      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e01f      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e01d      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01b      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013f6:	bf00      	nop
 80013f8:	58000080 	.word	0x58000080
 80013fc:	58024400 	.word	0x58024400
 8001400:	58000400 	.word	0x58000400
 8001404:	58020000 	.word	0x58020000
 8001408:	58020400 	.word	0x58020400
 800140c:	58020800 	.word	0x58020800
 8001410:	58020c00 	.word	0x58020c00
 8001414:	58021000 	.word	0x58021000
 8001418:	58021400 	.word	0x58021400
 800141c:	58021800 	.word	0x58021800
 8001420:	58021c00 	.word	0x58021c00
 8001424:	58022000 	.word	0x58022000
 8001428:	58022400 	.word	0x58022400
 800142c:	2300      	movs	r3, #0
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143e:	4938      	ldr	r1, [pc, #224]	; (8001520 <HAL_GPIO_Init+0x35c>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f ae63 	bne.w	80011d8 <HAL_GPIO_Init+0x14>
  }
}
 8001512:	bf00      	nop
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	58000400 	.word	0x58000400

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001558:	b08f      	sub	sp, #60	; 0x3c
 800155a:	af0a      	add	r7, sp, #40	; 0x28
 800155c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e116      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f007 f850 	bl	8008628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 f8d4 	bl	8007754 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	687e      	ldr	r6, [r7, #4]
 80015b4:	466d      	mov	r5, sp
 80015b6:	f106 0410 	add.w	r4, r6, #16
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ca:	1d33      	adds	r3, r6, #4
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	6838      	ldr	r0, [r7, #0]
 80015d0:	f006 f85e 	bl	8007690 <USB_CoreInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0d7      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 f8c2 	bl	8007776 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e04a      	b.n	800168e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	333d      	adds	r3, #61	; 0x3d
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	333c      	adds	r3, #60	; 0x3c
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	b298      	uxth	r0, r3
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3342      	adds	r3, #66	; 0x42
 8001634:	4602      	mov	r2, r0
 8001636:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	333f      	adds	r3, #63	; 0x3f
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3344      	adds	r3, #68	; 0x44
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3348      	adds	r3, #72	; 0x48
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3350      	adds	r3, #80	; 0x50
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3af      	bcc.n	80015f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e044      	b.n	8001728 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3b5      	bcc.n	800169e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001750:	1d33      	adds	r3, r6, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f006 f839 	bl	80077cc <USB_DevInit>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e014      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b01      	cmp	r3, #1
 8001782:	d102      	bne.n	800178a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f80b 	bl	80017a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f006 f9e9 	bl	8007b66 <USB_DevDisconnect>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	10000003 	.word	0x10000003

080017e8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d008      	beq.n	800180e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e01d      	b.n	800184a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	490f      	ldr	r1, [pc, #60]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181e:	f7fe ff5d 	bl	80006dc <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001824:	e009      	b.n	800183a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001826:	f7fe ff59 	bl	80006dc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001834:	d901      	bls.n	800183a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e007      	b.n	800184a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d1ee      	bne.n	8001826 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58024800 	.word	0x58024800

08001858 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	58024800 	.word	0x58024800

08001878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3a4      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001898:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018a2:	4b98      	ldr	r3, [pc, #608]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d007      	beq.n	80018be <HAL_RCC_OscConfig+0x46>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	2b18      	cmp	r3, #24
 80018b2:	d110      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d10b      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x12c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d168      	bne.n	80019a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e37e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x76>
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a87      	ldr	r2, [pc, #540]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a82      	ldr	r2, [pc, #520]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xbc>
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a79      	ldr	r2, [pc, #484]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a76      	ldr	r2, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001934:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7fe fec2 	bl	80006dc <HAL_GetTick>
 8001958:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7fe febe 	bl	80006dc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e332      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xe4>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe feae 	bl	80006dc <HAL_GetTick>
 8001980:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7fe feaa 	bl	80006dc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e31e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001996:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x10c>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b0 	beq.w	8001b14 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0x162>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d149      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d144      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e2f0      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0219 	bic.w	r2, r3, #25
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4941      	ldr	r1, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7fe fe6a 	bl	80006dc <HAL_GetTick>
 8001a08:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7fe fe66 	bl	80006dc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2da      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	f7fe fe85 	bl	8000738 <HAL_GetREVID>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d80a      	bhi.n	8001a4e <HAL_RCC_OscConfig+0x1d6>
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	031b      	lsls	r3, r3, #12
 8001a46:	492f      	ldr	r1, [pc, #188]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	e062      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	4929      	ldr	r1, [pc, #164]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a62:	e057      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d038      	beq.n	8001ade <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 0219 	bic.w	r2, r3, #25
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fe2d 	bl	80006dc <HAL_GetTick>
 8001a82:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7fe fe29 	bl	80006dc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e29d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	f7fe fe48 	bl	8000738 <HAL_GetREVID>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f241 0303 	movw	r3, #4099	; 0x1003
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d80a      	bhi.n	8001ac8 <HAL_RCC_OscConfig+0x250>
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	031b      	lsls	r3, r3, #12
 8001ac0:	4910      	ldr	r1, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	e025      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	490b      	ldr	r1, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e01a      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7fe fdf7 	bl	80006dc <HAL_GetTick>
 8001aee:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7fe fdf3 	bl	80006dc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d903      	bls.n	8001b08 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e267      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
 8001b04:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b08:	4ba0      	ldr	r3, [pc, #640]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ee      	bne.n	8001af2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 808f 	beq.w	8001c40 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b9a      	ldr	r3, [pc, #616]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b2a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b2c:	4b97      	ldr	r3, [pc, #604]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d007      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2d0>
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b18      	cmp	r3, #24
 8001b3c:	d12d      	bne.n	8001b9a <HAL_RCC_OscConfig+0x322>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d128      	bne.n	8001b9a <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b48:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2e8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b80      	cmp	r3, #128	; 0x80
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e239      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b60:	f7fe fdea 	bl	8000738 <HAL_GetREVID>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d80a      	bhi.n	8001b84 <HAL_RCC_OscConfig+0x30c>
 8001b6e:	4b87      	ldr	r3, [pc, #540]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	4983      	ldr	r1, [pc, #524]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b82:	e05d      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	497e      	ldr	r1, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b98:	e052      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d035      	beq.n	8001c0e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ba2:	4b7a      	ldr	r3, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a79      	ldr	r2, [pc, #484]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7fe fd95 	bl	80006dc <HAL_GetTick>
 8001bb2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001bb6:	f7fe fd91 	bl	80006dc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e205      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bc8:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bd4:	f7fe fdb0 	bl	8000738 <HAL_GetREVID>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f241 0303 	movw	r3, #4099	; 0x1003
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d80a      	bhi.n	8001bf8 <HAL_RCC_OscConfig+0x380>
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	069b      	lsls	r3, r3, #26
 8001bf0:	4966      	ldr	r1, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
 8001bf6:	e023      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	4961      	ldr	r1, [pc, #388]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5e      	ldr	r2, [pc, #376]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fd5f 	bl	80006dc <HAL_GetTick>
 8001c1e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c22:	f7fe fd5b 	bl	80006dc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1cf      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c34:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d036      	beq.n	8001cba <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d019      	beq.n	8001c88 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c54:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7fe fd3c 	bl	80006dc <HAL_GetTick>
 8001c64:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7fe fd38 	bl	80006dc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ac      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x3f0>
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	4a3f      	ldr	r2, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7fe fd22 	bl	80006dc <HAL_GetTick>
 8001c98:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7fe fd1e 	bl	80006dc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e192      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d036      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2e      	ldr	r2, [pc, #184]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cda:	f7fe fcff 	bl	80006dc <HAL_GetTick>
 8001cde:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7fe fcfb 	bl	80006dc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e16f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
 8001d00:	e018      	b.n	8001d34 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe fce5 	bl	80006dc <HAL_GetTick>
 8001d12:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d16:	f7fe fce1 	bl	80006dc <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e155      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8086 	beq.w	8001e4e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_OscConfig+0x518>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_RCC_OscConfig+0x518>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d4e:	f7fe fcc5 	bl	80006dc <HAL_GetTick>
 8001d52:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe fcc1 	bl	80006dc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e135      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x518>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x51c>
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a02      	ldr	r2, [pc, #8]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	e032      	b.n	8001df0 <HAL_RCC_OscConfig+0x578>
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58024800 	.word	0x58024800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x53e>
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a8e      	ldr	r2, [pc, #568]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a8b      	ldr	r2, [pc, #556]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x578>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x560>
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a86      	ldr	r2, [pc, #536]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b84      	ldr	r3, [pc, #528]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x578>
 8001dd8:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7fe fc70 	bl	80006dc <HAL_GetTick>
 8001dfc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fc6c 	bl	80006dc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0de      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e16:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ee      	beq.n	8001e00 <HAL_RCC_OscConfig+0x588>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7fe fc5a 	bl	80006dc <HAL_GetTick>
 8001e28:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fc56 	bl	80006dc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0c8      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e42:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80bd 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e60:	2b18      	cmp	r3, #24
 8001e62:	f000 80b4 	beq.w	8001fce <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	f040 8095 	bne.w	8001f9a <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a59      	ldr	r2, [pc, #356]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fc2e 	bl	80006dc <HAL_GetTick>
 8001e80:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fc2a 	bl	80006dc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e09e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_RCC_OscConfig+0x768>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4949      	ldr	r1, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	628b      	str	r3, [r1, #40]	; 0x28
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001eec:	493b      	ldr	r1, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	4a39      	ldr	r2, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f0a:	00d2      	lsls	r2, r2, #3
 8001f0c:	4933      	ldr	r1, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f023 020c 	bic.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	492f      	ldr	r1, [pc, #188]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	f023 0202 	bic.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	492a      	ldr	r1, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fbb3 	bl	80006dc <HAL_GetTick>
 8001f76:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe fbaf 	bl	80006dc <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e023      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x702>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fb99 	bl	80006dc <HAL_GetTick>
 8001faa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe fb95 	bl	80006dc <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x736>
 8001fcc:	e001      	b.n	8001fd2 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	fffffc0c 	.word	0xfffffc0c
 8001fe4:	ffff0007 	.word	0xffff0007

08001fe8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e18b      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b87      	ldr	r3, [pc, #540]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4985      	ldr	r1, [pc, #532]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b83      	ldr	r3, [pc, #524]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e173      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4975      	ldr	r1, [pc, #468]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002056:	4313      	orrs	r3, r2
 8002058:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002072:	429a      	cmp	r2, r3
 8002074:	d908      	bls.n	8002088 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	496a      	ldr	r1, [pc, #424]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002084:	4313      	orrs	r3, r2
 8002086:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d908      	bls.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	495e      	ldr	r1, [pc, #376]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d908      	bls.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020d2:	4b56      	ldr	r3, [pc, #344]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4953      	ldr	r1, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b4d      	ldr	r3, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f023 020f 	bic.w	r2, r3, #15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4947      	ldr	r1, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800210e:	4313      	orrs	r3, r2
 8002110:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d055      	beq.n	80021ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4940      	ldr	r1, [pc, #256]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d121      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0e5      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d115      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d9      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0cd      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002178:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0c5      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4925      	ldr	r1, [pc, #148]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fa9f 	bl	80006dc <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe fa9b 	bl	80006dc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0ad      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d1eb      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d208      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f023 020f 	bic.w	r2, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d214      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 020f 	bic.w	r2, r3, #15
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e075      	b.n	8002314 <HAL_RCC_ClockConfig+0x32c>
 8002228:	52002000 	.word	0x52002000
 800222c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002248:	429a      	cmp	r2, r3
 800224a:	d208      	bcs.n	800225e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800224c:	4b33      	ldr	r3, [pc, #204]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4930      	ldr	r1, [pc, #192]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 800225a:	4313      	orrs	r3, r2
 800225c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002276:	429a      	cmp	r2, r3
 8002278:	d208      	bcs.n	800228c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4925      	ldr	r1, [pc, #148]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d208      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4919      	ldr	r1, [pc, #100]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d208      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022e8:	f000 f81e 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022ec:	4601      	mov	r1, r0
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_ClockConfig+0x334>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_RCC_ClockConfig+0x33c>)
 8002306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe f99d 	bl	8000648 <HAL_InitTick>
 800230e:	4603      	mov	r3, r0
 8002310:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002312:	7afb      	ldrb	r3, [r7, #11]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	58024400 	.word	0x58024400
 8002320:	080087ac 	.word	0x080087ac
 8002324:	24000008 	.word	0x24000008

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800232e:	4baf      	ldr	r3, [pc, #700]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002336:	2b18      	cmp	r3, #24
 8002338:	f200 814e 	bhi.w	80025d8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_RCC_GetSysClockFreq+0x1c>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	080023a9 	.word	0x080023a9
 8002348:	080025d9 	.word	0x080025d9
 800234c:	080025d9 	.word	0x080025d9
 8002350:	080025d9 	.word	0x080025d9
 8002354:	080025d9 	.word	0x080025d9
 8002358:	080025d9 	.word	0x080025d9
 800235c:	080025d9 	.word	0x080025d9
 8002360:	080025d9 	.word	0x080025d9
 8002364:	080023cf 	.word	0x080023cf
 8002368:	080025d9 	.word	0x080025d9
 800236c:	080025d9 	.word	0x080025d9
 8002370:	080025d9 	.word	0x080025d9
 8002374:	080025d9 	.word	0x080025d9
 8002378:	080025d9 	.word	0x080025d9
 800237c:	080025d9 	.word	0x080025d9
 8002380:	080025d9 	.word	0x080025d9
 8002384:	080023d5 	.word	0x080023d5
 8002388:	080025d9 	.word	0x080025d9
 800238c:	080025d9 	.word	0x080025d9
 8002390:	080025d9 	.word	0x080025d9
 8002394:	080025d9 	.word	0x080025d9
 8002398:	080025d9 	.word	0x080025d9
 800239c:	080025d9 	.word	0x080025d9
 80023a0:	080025d9 	.word	0x080025d9
 80023a4:	080023db 	.word	0x080023db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023a8:	4b90      	ldr	r3, [pc, #576]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023b4:	4b8d      	ldr	r3, [pc, #564]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	4a8c      	ldr	r2, [pc, #560]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
 80023c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023c6:	e10a      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023c8:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023ca:	61bb      	str	r3, [r7, #24]
    break;
 80023cc:	e107      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023d0:	61bb      	str	r3, [r7, #24]
    break;
 80023d2:	e104      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023d4:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80023d6:	61bb      	str	r3, [r7, #24]
    break;
 80023d8:	e101      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023da:	4b84      	ldr	r3, [pc, #528]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023e4:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023f0:	4b7e      	ldr	r3, [pc, #504]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023fa:	4b7c      	ldr	r3, [pc, #496]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	08db      	lsrs	r3, r3, #3
 8002400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80da 	beq.w	80025d2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d05a      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x1b2>
 8002424:	2b01      	cmp	r3, #1
 8002426:	d302      	bcc.n	800242e <HAL_RCC_GetSysClockFreq+0x106>
 8002428:	2b02      	cmp	r3, #2
 800242a:	d078      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x1f6>
 800242c:	e099      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02d      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800243a:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	4a6a      	ldr	r2, [pc, #424]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002474:	ed97 6a02 	vldr	s12, [r7, #8]
 8002478:	eddf 5a60 	vldr	s11, [pc, #384]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800247c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002494:	e087      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2d8>
 80024a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2d4>
 80024c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d8:	e065      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2dc>
 80024e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002500:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800250c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800251c:	e043      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002528:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002608 <HAL_RCC_GetSysClockFreq+0x2e0>
 800252c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002540:	ed97 6a02 	vldr	s12, [r7, #8]
 8002544:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800254c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002560:	e021      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002584:	ed97 6a02 	vldr	s12, [r7, #8]
 8002588:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800258c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025a4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b0:	3301      	adds	r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025be:	edd7 6a07 	vldr	s13, [r7, #28]
 80025c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ca:	ee17 3a90 	vmov	r3, s15
 80025ce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025d0:	e005      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    break;
 80025d6:	e002      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80025da:	61bb      	str	r3, [r7, #24]
    break;
 80025dc:	bf00      	nop
  }

  return sysclockfreq;
 80025de:	69bb      	ldr	r3, [r7, #24]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	58024400 	.word	0x58024400
 80025f0:	03d09000 	.word	0x03d09000
 80025f4:	003d0900 	.word	0x003d0900
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	46000000 	.word	0x46000000
 8002600:	4c742400 	.word	0x4c742400
 8002604:	4a742400 	.word	0x4a742400
 8002608:	4af42400 	.word	0x4af42400

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002610:	f001 f9e2 	bl	80039d8 <HAL_RCCEx_GetD1SysClockFreq>
 8002614:	4601      	mov	r1, r0
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_RCC_GetHCLKFreq+0x30>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	fa21 f303 	lsr.w	r3, r1, r3
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <HAL_RCC_GetHCLKFreq+0x34>)
 800262c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_RCC_GetHCLKFreq+0x34>)
 8002630:	681b      	ldr	r3, [r3, #0]
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	58024400 	.word	0x58024400
 800263c:	080087ac 	.word	0x080087ac
 8002640:	2400000c 	.word	0x2400000c

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002648:	f7ff ffe0 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800264c:	4601      	mov	r1, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_RCC_GetPCLK1Freq+0x28>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	58024400 	.word	0x58024400
 800266c:	080087ac 	.word	0x080087ac

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002674:	f7ff ffca 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002678:	4601      	mov	r1, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	58024400 	.word	0x58024400
 8002698:	080087ac 	.word	0x080087ac

0800269c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026a8:	2300      	movs	r3, #0
 80026aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d03d      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c0:	d013      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c6:	d802      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026cc:	e01f      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d2:	d013      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026d8:	d01c      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026da:	e018      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026dc:	4baf      	ldr	r3, [pc, #700]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	4aae      	ldr	r2, [pc, #696]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026e8:	e015      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2102      	movs	r1, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 f98d 	bl	8003a10 <RCCEx_PLL2_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026fa:	e00c      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3324      	adds	r3, #36	; 0x24
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fa36 	bl	8003b74 <RCCEx_PLL3_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800270c:	e003      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
      break;
 8002712:	e000      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800271c:	4b9f      	ldr	r3, [pc, #636]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800271e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002728:	499c      	ldr	r1, [pc, #624]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800272a:	4313      	orrs	r3, r2
 800272c:	650b      	str	r3, [r1, #80]	; 0x50
 800272e:	e001      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03d      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	2b04      	cmp	r3, #4
 8002746:	d826      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002765 	.word	0x08002765
 8002754:	08002773 	.word	0x08002773
 8002758:	08002785 	.word	0x08002785
 800275c:	0800279d 	.word	0x0800279d
 8002760:	0800279d 	.word	0x0800279d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002764:	4b8d      	ldr	r3, [pc, #564]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	4a8c      	ldr	r2, [pc, #560]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800276a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002770:	e015      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f001 f949 	bl	8003a10 <RCCEx_PLL2_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002782:	e00c      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3324      	adds	r3, #36	; 0x24
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f001 f9f2 	bl	8003b74 <RCCEx_PLL3_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002794:	e003      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
      break;
 800279a:	e000      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800279c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a4:	4b7d      	ldr	r3, [pc, #500]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	f023 0207 	bic.w	r2, r3, #7
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	497a      	ldr	r1, [pc, #488]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	650b      	str	r3, [r1, #80]	; 0x50
 80027b6:	e001      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03e      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d01c      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d804      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x142>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d00d      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80027dc:	e01e      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80027de:	2bc0      	cmp	r3, #192	; 0xc0
 80027e0:	d01f      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d01e      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80027e8:	e018      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ea:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	4a6b      	ldr	r2, [pc, #428]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027f6:	e017      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 f906 	bl	8003a10 <RCCEx_PLL2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002808:	e00e      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3324      	adds	r3, #36	; 0x24
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f001 f9af 	bl	8003b74 <RCCEx_PLL3_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800281a:	e005      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
      break;
 8002820:	e002      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002822:	bf00      	nop
 8002824:	e000      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800282e:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002832:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4958      	ldr	r1, [pc, #352]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800283c:	4313      	orrs	r3, r2
 800283e:	650b      	str	r3, [r1, #80]	; 0x50
 8002840:	e001      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285c:	d01f      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800285e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002862:	d805      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286c:	d00e      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800286e:	e01f      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002870:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002874:	d01f      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800287a:	d01e      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800287c:	e018      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	4a46      	ldr	r2, [pc, #280]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800288a:	e017      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f001 f8bc 	bl	8003a10 <RCCEx_PLL2_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800289c:	e00e      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f965 	bl	8003b74 <RCCEx_PLL3_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028ae:	e005      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
      break;
 80028b4:	e002      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80028ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028d0:	4932      	ldr	r1, [pc, #200]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	658b      	str	r3, [r1, #88]	; 0x58
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d044      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f2:	d01f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f8:	d805      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80028fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002902:	d00e      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002904:	e01f      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800290a:	d01f      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800290c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002910:	d01e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002912:	e018      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002920:	e017      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f871 	bl	8003a10 <RCCEx_PLL2_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002932:	e00e      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3324      	adds	r3, #36	; 0x24
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f001 f91a 	bl	8003b74 <RCCEx_PLL3_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002944:	e005      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
      break;
 800294a:	e002      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002966:	490d      	ldr	r1, [pc, #52]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002968:	4313      	orrs	r3, r2
 800296a:	658b      	str	r3, [r1, #88]	; 0x58
 800296c:	e001      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d035      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	2b10      	cmp	r3, #16
 8002984:	d00c      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002986:	2b10      	cmp	r3, #16
 8002988:	d802      	bhi.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01b      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800298e:	e017      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d00c      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002994:	2b30      	cmp	r3, #48	; 0x30
 8002996:	d018      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002998:	e012      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a0:	4baf      	ldr	r3, [pc, #700]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	4aae      	ldr	r2, [pc, #696]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029ac:	e00e      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f82b 	bl	8003a10 <RCCEx_PLL2_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029be:	e005      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80029ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029d2:	4ba3      	ldr	r3, [pc, #652]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	49a0      	ldr	r1, [pc, #640]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029e4:	e001      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d042      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fe:	d01f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a04:	d805      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0e:	d00e      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002a10:	e01f      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002a12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a16:	d01f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a1c:	d01e      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002a1e:	e018      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a20:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4a8e      	ldr	r2, [pc, #568]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e017      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 ffeb 	bl	8003a10 <RCCEx_PLL2_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e00e      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f894 	bl	8003b74 <RCCEx_PLL3_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a50:	e005      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	497b      	ldr	r1, [pc, #492]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	650b      	str	r3, [r1, #80]	; 0x50
 8002a76:	e001      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d042      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a90:	d01b      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a96:	d805      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d022      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002aa2:	e01b      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aa8:	d01d      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aae:	d01c      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ab4:	d01b      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002ab6:	e011      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 ffa6 	bl	8003a10 <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ac8:	e012      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f84f 	bl	8003b74 <RCCEx_PLL3_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ada:	e009      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae0:	e006      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e004      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	4957      	ldr	r1, [pc, #348]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	650b      	str	r3, [r1, #80]	; 0x50
 8002b08:	e001      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d01b      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2a:	d805      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d022      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b36:	e01b      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d01d      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b42:	d01c      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b48:	d01b      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b4a:	e011      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 ff5c 	bl	8003a10 <RCCEx_PLL2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b5c:	e012      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3324      	adds	r3, #36	; 0x24
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f805 	bl	8003b74 <RCCEx_PLL3_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b6e:	e009      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	e006      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e004      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b8a:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b98:	4931      	ldr	r1, [pc, #196]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002b9e:	e001      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bd2:	e00c      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 ff18 	bl	8003a10 <RCCEx_PLL2_Config>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	e000      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c00:	4917      	ldr	r1, [pc, #92]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	650b      	str	r3, [r1, #80]	; 0x50
 8002c06:	e001      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d035      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d81b      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c20:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c65 	.word	0x08002c65
 8002c2c:	08002c39 	.word	0x08002c39
 8002c30:	08002c47 	.word	0x08002c47
 8002c34:	08002c65 	.word	0x08002c65
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c44:	e00f      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fedf 	bl	8003a10 <RCCEx_PLL2_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c56:	e006      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
      break;
 8002c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c6c:	4bba      	ldr	r3, [pc, #744]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	f023 0203 	bic.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	49b7      	ldr	r1, [pc, #732]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c7e:	e001      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8086 	beq.w	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c92:	4bb2      	ldr	r3, [pc, #712]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4ab1      	ldr	r2, [pc, #708]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9e:	f7fd fd1d 	bl	80006dc <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca4:	e009      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fd fd19 	bl	80006dc <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d902      	bls.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	75fb      	strb	r3, [r7, #23]
        break;
 8002cb8:	e005      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cba:	4ba8      	ldr	r3, [pc, #672]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ef      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d166      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ccc:	4ba2      	ldr	r3, [pc, #648]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cd6:	4053      	eors	r3, r2
 8002cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce0:	4b9d      	ldr	r3, [pc, #628]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cea:	4b9b      	ldr	r3, [pc, #620]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a9a      	ldr	r2, [pc, #616]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf6:	4b98      	ldr	r3, [pc, #608]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a97      	ldr	r2, [pc, #604]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d02:	4a95      	ldr	r2, [pc, #596]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d12:	d115      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fd fce2 	bl	80006dc <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fd fcde 	bl	80006dc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d902      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	75fb      	strb	r3, [r7, #23]
            break;
 8002d32:	e005      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d34:	4b88      	ldr	r3, [pc, #544]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ed      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d126      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d54:	d10d      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002d56:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d64:	0919      	lsrs	r1, r3, #4
 8002d66:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002d68:	400b      	ands	r3, r1
 8002d6a:	497b      	ldr	r1, [pc, #492]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	610b      	str	r3, [r1, #16]
 8002d70:	e005      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002d72:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4a78      	ldr	r2, [pc, #480]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d7c:	6113      	str	r3, [r2, #16]
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	4972      	ldr	r1, [pc, #456]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	670b      	str	r3, [r1, #112]	; 0x70
 8002d92:	e004      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	75bb      	strb	r3, [r7, #22]
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d07d      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dae:	2b28      	cmp	r3, #40	; 0x28
 8002db0:	d866      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002e87 	.word	0x08002e87
 8002dbc:	08002e81 	.word	0x08002e81
 8002dc0:	08002e81 	.word	0x08002e81
 8002dc4:	08002e81 	.word	0x08002e81
 8002dc8:	08002e81 	.word	0x08002e81
 8002dcc:	08002e81 	.word	0x08002e81
 8002dd0:	08002e81 	.word	0x08002e81
 8002dd4:	08002e81 	.word	0x08002e81
 8002dd8:	08002e5d 	.word	0x08002e5d
 8002ddc:	08002e81 	.word	0x08002e81
 8002de0:	08002e81 	.word	0x08002e81
 8002de4:	08002e81 	.word	0x08002e81
 8002de8:	08002e81 	.word	0x08002e81
 8002dec:	08002e81 	.word	0x08002e81
 8002df0:	08002e81 	.word	0x08002e81
 8002df4:	08002e81 	.word	0x08002e81
 8002df8:	08002e6f 	.word	0x08002e6f
 8002dfc:	08002e81 	.word	0x08002e81
 8002e00:	08002e81 	.word	0x08002e81
 8002e04:	08002e81 	.word	0x08002e81
 8002e08:	08002e81 	.word	0x08002e81
 8002e0c:	08002e81 	.word	0x08002e81
 8002e10:	08002e81 	.word	0x08002e81
 8002e14:	08002e81 	.word	0x08002e81
 8002e18:	08002e87 	.word	0x08002e87
 8002e1c:	08002e81 	.word	0x08002e81
 8002e20:	08002e81 	.word	0x08002e81
 8002e24:	08002e81 	.word	0x08002e81
 8002e28:	08002e81 	.word	0x08002e81
 8002e2c:	08002e81 	.word	0x08002e81
 8002e30:	08002e81 	.word	0x08002e81
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e87 	.word	0x08002e87
 8002e3c:	08002e81 	.word	0x08002e81
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e81 	.word	0x08002e81
 8002e48:	08002e81 	.word	0x08002e81
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002e81 	.word	0x08002e81
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e87 	.word	0x08002e87
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fdd4 	bl	8003a10 <RCCEx_PLL2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e6c:	e00c      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3324      	adds	r3, #36	; 0x24
 8002e72:	2101      	movs	r1, #1
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fe7d 	bl	8003b74 <RCCEx_PLL3_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e7e:	e003      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	75fb      	strb	r3, [r7, #23]
      break;
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e8e:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9a:	492f      	ldr	r1, [pc, #188]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	654b      	str	r3, [r1, #84]	; 0x54
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d037      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d820      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002f03 	.word	0x08002f03
 8002ec4:	08002ed9 	.word	0x08002ed9
 8002ec8:	08002eeb 	.word	0x08002eeb
 8002ecc:	08002f03 	.word	0x08002f03
 8002ed0:	08002f03 	.word	0x08002f03
 8002ed4:	08002f03 	.word	0x08002f03
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fd96 	bl	8003a10 <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e00c      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3324      	adds	r3, #36	; 0x24
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fe3f 	bl	8003b74 <RCCEx_PLL3_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002efa:	e003      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
      break;
 8002f00:	e000      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	4910      	ldr	r1, [pc, #64]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f1c:	e001      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d040      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d827      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002f38:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f8f 	.word	0x08002f8f
 8002f44:	08002f65 	.word	0x08002f65
 8002f48:	08002f77 	.word	0x08002f77
 8002f4c:	08002f8f 	.word	0x08002f8f
 8002f50:	08002f8f 	.word	0x08002f8f
 8002f54:	08002f8f 	.word	0x08002f8f
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	58024800 	.word	0x58024800
 8002f60:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fd50 	bl	8003a10 <RCCEx_PLL2_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f74:	e00c      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3324      	adds	r3, #36	; 0x24
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fdf9 	bl	8003b74 <RCCEx_PLL3_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f86:	e003      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f96:	4bb3      	ldr	r3, [pc, #716]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	49af      	ldr	r1, [pc, #700]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d044      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc6:	d01b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d805      	bhi.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d022      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002fd8:	e01b      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d01d      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe4:	d01c      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002fe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fea:	d01b      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002fec:	e011      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd0b 	bl	8003a10 <RCCEx_PLL2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ffe:	e012      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	2102      	movs	r1, #2
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fdb4 	bl	8003b74 <RCCEx_PLL3_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003010:	e009      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
      break;
 8003016:	e006      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003018:	bf00      	nop
 800301a:	e004      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800301c:	bf00      	nop
 800301e:	e002      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302c:	4b8d      	ldr	r3, [pc, #564]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303a:	498a      	ldr	r1, [pc, #552]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800303c:	4313      	orrs	r3, r2
 800303e:	654b      	str	r3, [r1, #84]	; 0x54
 8003040:	e001      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d044      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305c:	d01b      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800305e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003062:	d805      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d022      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800306e:	e01b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	d01d      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003076:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800307a:	d01c      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800307c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003080:	d01b      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003082:	e011      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fcc0 	bl	8003a10 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003094:	e012      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3324      	adds	r3, #36	; 0x24
 800309a:	2102      	movs	r1, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd69 	bl	8003b74 <RCCEx_PLL3_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030a6:	e009      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	e006      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c2:	4b68      	ldr	r3, [pc, #416]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d0:	4964      	ldr	r1, [pc, #400]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	658b      	str	r3, [r1, #88]	; 0x58
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d044      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f2:	d01b      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f8:	d805      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d022      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003104:	e01b      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310a:	d01d      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800310c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003110:	d01c      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003112:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003116:	d01b      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003118:	e011      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fc75 	bl	8003a10 <RCCEx_PLL2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800312a:	e012      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	2102      	movs	r1, #2
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fd1e 	bl	8003b74 <RCCEx_PLL3_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800313c:	e009      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
      break;
 8003142:	e006      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003144:	bf00      	nop
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003158:	4b42      	ldr	r3, [pc, #264]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003166:	493f      	ldr	r1, [pc, #252]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	658b      	str	r3, [r1, #88]	; 0x58
 800316c:	e001      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01b      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	d10b      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3324      	adds	r3, #36	; 0x24
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fcef 	bl	8003b74 <RCCEx_PLL3_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	75bb      	strb	r3, [r7, #22]
 80031a0:	e009      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031a2:	4b30      	ldr	r3, [pc, #192]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b0:	492c      	ldr	r1, [pc, #176]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01b      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3324      	adds	r3, #36	; 0x24
 80031d2:	2102      	movs	r1, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fccd 	bl	8003b74 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75bb      	strb	r3, [r7, #22]
 80031e4:	e009      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031e6:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f4:	491b      	ldr	r1, [pc, #108]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d032      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d00d      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8003212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003216:	d016      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d111      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fbf4 	bl	8003a10 <RCCEx_PLL2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800322c:	e00c      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3324      	adds	r3, #36	; 0x24
 8003232:	2102      	movs	r1, #2
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fc9d 	bl	8003b74 <RCCEx_PLL3_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800323e:	e003      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
      break;
 8003244:	e000      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8003246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800325c:	4901      	ldr	r1, [pc, #4]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	658b      	str	r3, [r1, #88]	; 0x58
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8003264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003282:	d00c      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003288:	d015      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800328a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328e:	d10f      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003290:	4b79      	ldr	r3, [pc, #484]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4a78      	ldr	r2, [pc, #480]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800329c:	e00c      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fc65 	bl	8003b74 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032be:	4b6e      	ldr	r3, [pc, #440]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	496a      	ldr	r1, [pc, #424]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	654b      	str	r3, [r1, #84]	; 0x54
 80032d2:	e001      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d029      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d007      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80032f2:	e00f      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b60      	ldr	r3, [pc, #384]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a5f      	ldr	r2, [pc, #380]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003300:	e00b      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fb81 	bl	8003a10 <RCCEx_PLL2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003324:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	4952      	ldr	r1, [pc, #328]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003332:	e001      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3324      	adds	r3, #36	; 0x24
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fc12 	bl	8003b74 <RCCEx_PLL3_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d02f      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d00c      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	d802      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d011      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800337a:	e00d      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800337c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003380:	d00f      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003386:	d00e      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8003388:	e006      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	4a3a      	ldr	r2, [pc, #232]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003396:	e007      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	e004      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80033a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	492f      	ldr	r1, [pc, #188]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	654b      	str	r3, [r1, #84]	; 0x54
 80033c0:	e001      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4926      	ldr	r1, [pc, #152]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033fe:	491e      	ldr	r1, [pc, #120]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341c:	4916      	ldr	r1, [pc, #88]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003438:	6113      	str	r3, [r2, #16]
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	da08      	bge.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	4906      	ldr	r1, [pc, #24]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003464:	7dbb      	ldrb	r3, [r7, #22]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400

0800347c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003480:	f7ff f8c4 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8003484:	4601      	mov	r1, r0
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003492:	5cd3      	ldrb	r3, [r2, r3]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	58024400 	.word	0x58024400
 80034a4:	080087ac 	.word	0x080087ac

080034a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b0:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80034ba:	4b9b      	ldr	r3, [pc, #620]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	0b1b      	lsrs	r3, r3, #12
 80034c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80034c6:	4b98      	ldr	r3, [pc, #608]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034d0:	4b95      	ldr	r3, [pc, #596]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 810a 	beq.w	8003708 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d05a      	beq.n	80035b0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d302      	bcc.n	8003504 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d078      	beq.n	80035f4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003502:	e099      	b.n	8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003504:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02d      	beq.n	800356c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003510:	4b85      	ldr	r3, [pc, #532]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	4a84      	ldr	r2, [pc, #528]	; (800372c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b7b      	ldr	r3, [pc, #492]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a03 	vldr	s12, [r7, #12]
 800354e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800356a:	e087      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003592:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ae:	e065      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80035be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035f2:	e043      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003606:	4b48      	ldr	r3, [pc, #288]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003616:	ed97 6a03 	vldr	s12, [r7, #12]
 800361a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800361e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003636:	e021      	b.n	800367c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	ed97 6a03 	vldr	s12, [r7, #12]
 800365e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800367a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003696:	edd7 6a07 	vldr	s13, [r7, #28]
 800369a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a2:	ee17 2a90 	vmov	r2, s15
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	ee17 2a90 	vmov	r2, s15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	0e1b      	lsrs	r3, r3, #24
 80036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80036f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fe:	ee17 2a90 	vmov	r2, s15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003706:	e008      	b.n	800371a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	bf00      	nop
 800371c:	3724      	adds	r7, #36	; 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400
 800372c:	03d09000 	.word	0x03d09000
 8003730:	46000000 	.word	0x46000000
 8003734:	4c742400 	.word	0x4c742400
 8003738:	4a742400 	.word	0x4a742400
 800373c:	4af42400 	.word	0x4af42400

08003740 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003748:	4b9d      	ldr	r3, [pc, #628]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003752:	4b9b      	ldr	r3, [pc, #620]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	0d1b      	lsrs	r3, r3, #20
 8003758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800375c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800375e:	4b98      	ldr	r3, [pc, #608]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003768:	4b95      	ldr	r3, [pc, #596]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003780:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 810a 	beq.w	80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d05a      	beq.n	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003792:	2b01      	cmp	r3, #1
 8003794:	d302      	bcc.n	800379c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003796:	2b02      	cmp	r3, #2
 8003798:	d078      	beq.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800379a:	e099      	b.n	80038d0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800379c:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d02d      	beq.n	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a8:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	4a84      	ldr	r2, [pc, #528]	; (80039c4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b7b      	ldr	r3, [pc, #492]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003802:	e087      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039cc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003846:	e065      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a03 	vldr	s12, [r7, #12]
 800386e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800388a:	e043      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b48      	ldr	r3, [pc, #288]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ce:	e021      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003912:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	0a5b      	lsrs	r3, r3, #9
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800392e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393a:	ee17 2a90 	vmov	r2, s15
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800395c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003968:	ee17 2a90 	vmov	r2, s15
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	0e1b      	lsrs	r3, r3, #24
 8003976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398a:	edd7 6a07 	vldr	s13, [r7, #28]
 800398e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003996:	ee17 2a90 	vmov	r2, s15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800399e:	e008      	b.n	80039b2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
}
 80039b2:	bf00      	nop
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
 80039c4:	03d09000 	.word	0x03d09000
 80039c8:	46000000 	.word	0x46000000
 80039cc:	4c742400 	.word	0x4c742400
 80039d0:	4a742400 	.word	0x4a742400
 80039d4:	4af42400 	.word	0x4af42400

080039d8 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039dc:	f7fe fca4 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80039e0:	4601      	mov	r1, r0
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	4a06      	ldr	r2, [pc, #24]	; (8003a08 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80039ee:	5cd3      	ldrb	r3, [r2, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa21 f303 	lsr.w	r3, r1, r3
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80039fa:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	58024400 	.word	0x58024400
 8003a08:	080087ac 	.word	0x080087ac
 8003a0c:	24000008 	.word	0x24000008

08003a10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a1e:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d101      	bne.n	8003a2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e099      	b.n	8003b62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a4e      	ldr	r2, [pc, #312]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003a34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fc fe4f 	bl	80006dc <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a42:	f7fc fe4b 	bl	80006dc <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e086      	b.n	8003b62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a54:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	493f      	ldr	r1, [pc, #252]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	628b      	str	r3, [r1, #40]	; 0x28
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aa4:	4931      	ldr	r1, [pc, #196]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003aaa:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	492d      	ldr	r1, [pc, #180]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003abc:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f023 0220 	bic.w	r2, r3, #32
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	4928      	ldr	r1, [pc, #160]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <RCCEx_PLL2_Config+0x160>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	69d2      	ldr	r2, [r2, #28]
 8003ae6:	00d2      	lsls	r2, r2, #3
 8003ae8:	4920      	ldr	r1, [pc, #128]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003af4:	f043 0310 	orr.w	r3, r3, #16
 8003af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b0c:	e00f      	b.n	8003b2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b20:	e005      	b.n	8003b2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3a:	f7fc fdcf 	bl	80006dc <HAL_GetTick>
 8003b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b42:	f7fc fdcb 	bl	80006dc <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e006      	b.n	8003b62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <RCCEx_PLL2_Config+0x15c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	ffff0007 	.word	0xffff0007

08003b74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b82:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d101      	bne.n	8003b92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e099      	b.n	8003cc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b92:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fc fd9d 	bl	80006dc <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ba6:	f7fc fd99 	bl	80006dc <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e086      	b.n	8003cc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bb8:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bc4:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	051b      	lsls	r3, r3, #20
 8003bd2:	493f      	ldr	r1, [pc, #252]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c08:	4931      	ldr	r1, [pc, #196]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	492d      	ldr	r1, [pc, #180]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4928      	ldr	r1, [pc, #160]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCCEx_PLL3_Config+0x160>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69d2      	ldr	r2, [r2, #28]
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	4920      	ldr	r1, [pc, #128]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c52:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c70:	e00f      	b.n	8003c92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c84:	e005      	b.n	8003c92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9e:	f7fc fd1d 	bl	80006dc <HAL_GetTick>
 8003ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ca6:	f7fc fd19 	bl	80006dc <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e006      	b.n	8003cc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <RCCEx_PLL3_Config+0x15c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	ffff0007 	.word	0xffff0007

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e01d      	b.n	8003d26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f004 fb6c 	bl	80083dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fbd0 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e01d      	b.n	8003d7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f815 	bl	8003d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fba5 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 ff8c 	bl	8004cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_TIM_PWM_Start+0x98>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_TIM_PWM_Start+0x4a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_TIM_PWM_Start+0x9c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIM_PWM_Start+0x4a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_TIM_PWM_Start+0xa0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIM_PWM_Start+0x4a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_TIM_PWM_Start+0xa4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIM_PWM_Start+0x4a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_TIM_PWM_Start+0xa8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x4e>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_TIM_PWM_Start+0x50>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_TIM_PWM_Start+0xac>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d00b      	beq.n	8003e26 <HAL_TIM_PWM_Start+0x8e>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d007      	beq.n	8003e26 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40010400 	.word	0x40010400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800
 8003e44:	00010007 	.word	0x00010007

08003e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0202 	mvn.w	r2, #2
 8003e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 faf8 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 faea 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fafb 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0204 	mvn.w	r2, #4
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 face 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fac0 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fad1 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0208 	mvn.w	r2, #8
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 faa4 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa96 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 faa7 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0210 	mvn.w	r2, #16
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2208      	movs	r2, #8
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa7a 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa6c 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa7d 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0201 	mvn.w	r2, #1
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa46 	bl	8004458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 ff19 	bl	8004e2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004006:	d10e      	bne.n	8004026 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b80      	cmp	r3, #128	; 0x80
 8004014:	d107      	bne.n	8004026 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800401e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 ff0c 	bl	8004e3e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d10e      	bne.n	8004052 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d107      	bne.n	8004052 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa2b 	bl	80044a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b20      	cmp	r3, #32
 800405e:	d10e      	bne.n	800407e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d107      	bne.n	800407e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0220 	mvn.w	r2, #32
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fecc 	bl	8004e16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800409e:	2302      	movs	r3, #2
 80040a0:	e105      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x226>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b14      	cmp	r3, #20
 80040b6:	f200 80f0 	bhi.w	800429a <HAL_TIM_PWM_ConfigChannel+0x212>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	08004115 	.word	0x08004115
 80040c4:	0800429b 	.word	0x0800429b
 80040c8:	0800429b 	.word	0x0800429b
 80040cc:	0800429b 	.word	0x0800429b
 80040d0:	08004155 	.word	0x08004155
 80040d4:	0800429b 	.word	0x0800429b
 80040d8:	0800429b 	.word	0x0800429b
 80040dc:	0800429b 	.word	0x0800429b
 80040e0:	08004197 	.word	0x08004197
 80040e4:	0800429b 	.word	0x0800429b
 80040e8:	0800429b 	.word	0x0800429b
 80040ec:	0800429b 	.word	0x0800429b
 80040f0:	080041d7 	.word	0x080041d7
 80040f4:	0800429b 	.word	0x0800429b
 80040f8:	0800429b 	.word	0x0800429b
 80040fc:	0800429b 	.word	0x0800429b
 8004100:	08004219 	.word	0x08004219
 8004104:	0800429b 	.word	0x0800429b
 8004108:	0800429b 	.word	0x0800429b
 800410c:	0800429b 	.word	0x0800429b
 8004110:	08004259 	.word	0x08004259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fa68 	bl	80045f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
      break;
 8004152:	e0a3      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fad8 	bl	8004710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]
      break;
 8004194:	e082      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fb41 	bl	8004824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0204 	bic.w	r2, r2, #4
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
      break;
 80041d4:	e062      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fba7 	bl	8004930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
      break;
 8004216:	e041      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fbee 	bl	8004a00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004256:	e021      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fc30 	bl	8004ac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004298:	e000      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800429a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop

080042b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_ConfigClockSource+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0b7      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x188>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4b57      	ldr	r3, [pc, #348]	; (8004448 <HAL_TIM_ConfigClockSource+0x190>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b70      	cmp	r3, #112	; 0x70
 8004306:	d02e      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xae>
 8004308:	2b70      	cmp	r3, #112	; 0x70
 800430a:	d812      	bhi.n	8004332 <HAL_TIM_ConfigClockSource+0x7a>
 800430c:	2b30      	cmp	r3, #48	; 0x30
 800430e:	f000 8084 	beq.w	800441a <HAL_TIM_ConfigClockSource+0x162>
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d806      	bhi.n	8004324 <HAL_TIM_ConfigClockSource+0x6c>
 8004316:	2b10      	cmp	r3, #16
 8004318:	d07f      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
 800431a:	2b20      	cmp	r3, #32
 800431c:	d07d      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d07b      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004322:	e084      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004324:	2b50      	cmp	r3, #80	; 0x50
 8004326:	d048      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x102>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d056      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x122>
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d064      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004330:	e07d      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004332:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004336:	d070      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
 8004338:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800433c:	d809      	bhi.n	8004352 <HAL_TIM_ConfigClockSource+0x9a>
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004342:	d027      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xdc>
 8004344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004348:	d067      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	d06d      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004350:	e06d      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004352:	4a3e      	ldr	r2, [pc, #248]	; (800444c <HAL_TIM_ConfigClockSource+0x194>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d060      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
 8004358:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <HAL_TIM_ConfigClockSource+0x198>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d05d      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
 800435e:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <HAL_TIM_ConfigClockSource+0x19c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d05a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004364:	e063      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f000 fc87 	bl	8004c88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e04c      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f000 fc70 	bl	8004c88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b6:	609a      	str	r2, [r3, #8]
      break;
 80043b8:	e039      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fbe0 	bl	8004b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2150      	movs	r1, #80	; 0x50
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fc3a 	bl	8004c4c <TIM_ITRx_SetConfig>
      break;
 80043d8:	e029      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fbff 	bl	8004bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2160      	movs	r1, #96	; 0x60
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fc2a 	bl	8004c4c <TIM_ITRx_SetConfig>
      break;
 80043f8:	e019      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	461a      	mov	r2, r3
 8004408:	f000 fbc0 	bl	8004b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2140      	movs	r1, #64	; 0x40
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fc1a 	bl	8004c4c <TIM_ITRx_SetConfig>
      break;
 8004418:	e009      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f000 fc11 	bl	8004c4c <TIM_ITRx_SetConfig>
      break;
 800442a:	e000      	b.n	800442e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800442c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	ffceff88 	.word	0xffceff88
 800444c:	00100030 	.word	0x00100030
 8004450:	00100040 	.word	0x00100040
 8004454:	00100020 	.word	0x00100020

08004458 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a40      	ldr	r2, [pc, #256]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d00f      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <TIM_Base_SetConfig+0x118>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <TIM_Base_SetConfig+0x11c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3b      	ldr	r2, [pc, #236]	; (80045dc <TIM_Base_SetConfig+0x120>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3a      	ldr	r2, [pc, #232]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d01b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <TIM_Base_SetConfig+0x118>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d017      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <TIM_Base_SetConfig+0x11c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <TIM_Base_SetConfig+0x120>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a29      	ldr	r2, [pc, #164]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <TIM_Base_SetConfig+0x128>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <TIM_Base_SetConfig+0x12c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <TIM_Base_SetConfig+0x130>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <TIM_Base_SetConfig+0x128>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <TIM_Base_SetConfig+0x12c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <TIM_Base_SetConfig+0x130>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40010400 	.word	0x40010400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <TIM_OC1_SetConfig+0x108>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0302 	bic.w	r3, r3, #2
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <TIM_OC1_SetConfig+0x10c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00f      	beq.n	800466c <TIM_OC1_SetConfig+0x7c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <TIM_OC1_SetConfig+0x110>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00b      	beq.n	800466c <TIM_OC1_SetConfig+0x7c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <TIM_OC1_SetConfig+0x114>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_OC1_SetConfig+0x7c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <TIM_OC1_SetConfig+0x118>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_OC1_SetConfig+0x7c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <TIM_OC1_SetConfig+0x11c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d10c      	bne.n	8004686 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0308 	bic.w	r3, r3, #8
 8004672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <TIM_OC1_SetConfig+0x10c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00f      	beq.n	80046ae <TIM_OC1_SetConfig+0xbe>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <TIM_OC1_SetConfig+0x110>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_OC1_SetConfig+0xbe>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <TIM_OC1_SetConfig+0x114>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_OC1_SetConfig+0xbe>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <TIM_OC1_SetConfig+0x118>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC1_SetConfig+0xbe>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <TIM_OC1_SetConfig+0x11c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d111      	bne.n	80046d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	fffeff8f 	.word	0xfffeff8f
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010400 	.word	0x40010400
 8004704:	40014000 	.word	0x40014000
 8004708:	40014400 	.word	0x40014400
 800470c:	40014800 	.word	0x40014800

08004710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0210 	bic.w	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4b34      	ldr	r3, [pc, #208]	; (800480c <TIM_OC2_SetConfig+0xfc>)
 800473c:	4013      	ands	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0320 	bic.w	r3, r3, #32
 800475a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a29      	ldr	r2, [pc, #164]	; (8004810 <TIM_OC2_SetConfig+0x100>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC2_SetConfig+0x68>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a28      	ldr	r2, [pc, #160]	; (8004814 <TIM_OC2_SetConfig+0x104>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10d      	bne.n	8004794 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800477e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <TIM_OC2_SetConfig+0x100>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00f      	beq.n	80047bc <TIM_OC2_SetConfig+0xac>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <TIM_OC2_SetConfig+0x104>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00b      	beq.n	80047bc <TIM_OC2_SetConfig+0xac>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <TIM_OC2_SetConfig+0x108>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_OC2_SetConfig+0xac>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <TIM_OC2_SetConfig+0x10c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_OC2_SetConfig+0xac>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <TIM_OC2_SetConfig+0x110>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d113      	bne.n	80047e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	feff8fff 	.word	0xfeff8fff
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800

08004824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <TIM_OC3_SetConfig+0xf8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_OC3_SetConfig+0x66>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <TIM_OC3_SetConfig+0xfc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10d      	bne.n	80048a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <TIM_OC3_SetConfig+0xf8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_OC3_SetConfig+0xaa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <TIM_OC3_SetConfig+0xfc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_OC3_SetConfig+0xaa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <TIM_OC3_SetConfig+0x100>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_OC3_SetConfig+0xaa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <TIM_OC3_SetConfig+0x104>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_OC3_SetConfig+0xaa>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <TIM_OC3_SetConfig+0x108>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d113      	bne.n	80048f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40010000 	.word	0x40010000
 8004920:	40010400 	.word	0x40010400
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800

08004930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_OC4_SetConfig+0xbc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00f      	beq.n	80049b0 <TIM_OC4_SetConfig+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <TIM_OC4_SetConfig+0xc0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_OC4_SetConfig+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <TIM_OC4_SetConfig+0xc4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_OC4_SetConfig+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <TIM_OC4_SetConfig+0xc8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_OC4_SetConfig+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <TIM_OC4_SetConfig+0xcc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d109      	bne.n	80049c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	019b      	lsls	r3, r3, #6
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800

08004a00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <TIM_OC5_SetConfig+0xb0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_OC5_SetConfig+0x76>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a16      	ldr	r2, [pc, #88]	; (8004ab4 <TIM_OC5_SetConfig+0xb4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_OC5_SetConfig+0x76>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <TIM_OC5_SetConfig+0xb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_OC5_SetConfig+0x76>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <TIM_OC5_SetConfig+0xbc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_OC5_SetConfig+0x76>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <TIM_OC5_SetConfig+0xc0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d109      	bne.n	8004a8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	621a      	str	r2, [r3, #32]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	051b      	lsls	r3, r3, #20
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <TIM_OC6_SetConfig+0xb4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00f      	beq.n	8004b3c <TIM_OC6_SetConfig+0x78>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <TIM_OC6_SetConfig+0xb8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_OC6_SetConfig+0x78>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <TIM_OC6_SetConfig+0xbc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_OC6_SetConfig+0x78>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <TIM_OC6_SetConfig+0xc0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC6_SetConfig+0x78>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <TIM_OC6_SetConfig+0xc4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d109      	bne.n	8004b50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40010400 	.word	0x40010400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800

08004b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 030a 	bic.w	r3, r3, #10
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b087      	sub	sp, #28
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0210 	bic.w	r2, r3, #16
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <TIM_ITRx_SetConfig+0x38>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f043 0307 	orr.w	r3, r3, #7
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	609a      	str	r2, [r3, #8]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	ffcfff8f 	.word	0xffcfff8f

08004c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2201      	movs	r2, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e045      	b.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d108      	bne.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_TIMEx_RemapConfig>:
  *            @arg TIM_TIM8_ETR_ADC3_AWD3:          TIM8_ETR is connected to ADC3 AWD3
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_RemapConfig+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e012      	b.n	8004e0a <HAL_TIMEx_RemapConfig+0x3e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  MODIFY_REG(htim->Instance->AF1, TIM1_AF1_ETRSEL_Msk, Remap);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	f423 3170 	bic.w	r1, r3, #245760	; 0x3c000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e042      	b.n	8004eea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f003 fb5a 	bl	8008530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f82f 	bl	8004ef8 <UART_SetConfig>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e022      	b.n	8004eea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f002 f99d 	bl	80071ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ec0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ed0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0201 	orr.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f002 fa24 	bl	8007330 <UART_CheckIdleState>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	0000      	movs	r0, r0
 8004ef4:	0000      	movs	r0, r0
	...

08004ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004efc:	b08e      	sub	sp, #56	; 0x38
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4bc1      	ldr	r3, [pc, #772]	; (8005240 <UART_SetConfig+0x348>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4ab7      	ldr	r2, [pc, #732]	; (8005244 <UART_SetConfig+0x34c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f72:	4313      	orrs	r3, r2
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	4bb2      	ldr	r3, [pc, #712]	; (8005248 <UART_SetConfig+0x350>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f023 010f 	bic.w	r1, r3, #15
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4aa9      	ldr	r2, [pc, #676]	; (800524c <UART_SetConfig+0x354>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d177      	bne.n	800509a <UART_SetConfig+0x1a2>
 8004faa:	4ba9      	ldr	r3, [pc, #676]	; (8005250 <UART_SetConfig+0x358>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fb2:	2b28      	cmp	r3, #40	; 0x28
 8004fb4:	d86c      	bhi.n	8005090 <UART_SetConfig+0x198>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0xc4>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08005061 	.word	0x08005061
 8004fc0:	08005091 	.word	0x08005091
 8004fc4:	08005091 	.word	0x08005091
 8004fc8:	08005091 	.word	0x08005091
 8004fcc:	08005091 	.word	0x08005091
 8004fd0:	08005091 	.word	0x08005091
 8004fd4:	08005091 	.word	0x08005091
 8004fd8:	08005091 	.word	0x08005091
 8004fdc:	08005069 	.word	0x08005069
 8004fe0:	08005091 	.word	0x08005091
 8004fe4:	08005091 	.word	0x08005091
 8004fe8:	08005091 	.word	0x08005091
 8004fec:	08005091 	.word	0x08005091
 8004ff0:	08005091 	.word	0x08005091
 8004ff4:	08005091 	.word	0x08005091
 8004ff8:	08005091 	.word	0x08005091
 8004ffc:	08005071 	.word	0x08005071
 8005000:	08005091 	.word	0x08005091
 8005004:	08005091 	.word	0x08005091
 8005008:	08005091 	.word	0x08005091
 800500c:	08005091 	.word	0x08005091
 8005010:	08005091 	.word	0x08005091
 8005014:	08005091 	.word	0x08005091
 8005018:	08005091 	.word	0x08005091
 800501c:	08005079 	.word	0x08005079
 8005020:	08005091 	.word	0x08005091
 8005024:	08005091 	.word	0x08005091
 8005028:	08005091 	.word	0x08005091
 800502c:	08005091 	.word	0x08005091
 8005030:	08005091 	.word	0x08005091
 8005034:	08005091 	.word	0x08005091
 8005038:	08005091 	.word	0x08005091
 800503c:	08005081 	.word	0x08005081
 8005040:	08005091 	.word	0x08005091
 8005044:	08005091 	.word	0x08005091
 8005048:	08005091 	.word	0x08005091
 800504c:	08005091 	.word	0x08005091
 8005050:	08005091 	.word	0x08005091
 8005054:	08005091 	.word	0x08005091
 8005058:	08005091 	.word	0x08005091
 800505c:	08005089 	.word	0x08005089
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005066:	e233      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506e:	e22f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005076:	e22b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e227      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005080:	2320      	movs	r3, #32
 8005082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005086:	e223      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005088:	2340      	movs	r3, #64	; 0x40
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508e:	e21f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005096:	bf00      	nop
 8005098:	e21a      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6d      	ldr	r2, [pc, #436]	; (8005254 <UART_SetConfig+0x35c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d132      	bne.n	800510a <UART_SetConfig+0x212>
 80050a4:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <UART_SetConfig+0x358>)
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d827      	bhi.n	8005100 <UART_SetConfig+0x208>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x1c0>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d6:	e1fb      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050de:	e1f7      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e6:	e1f3      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ee:	e1ef      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80050f0:	2320      	movs	r3, #32
 80050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f6:	e1eb      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80050f8:	2340      	movs	r3, #64	; 0x40
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e1e7      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	bf00      	nop
 8005108:	e1e2      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a52      	ldr	r2, [pc, #328]	; (8005258 <UART_SetConfig+0x360>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d132      	bne.n	800517a <UART_SetConfig+0x282>
 8005114:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <UART_SetConfig+0x358>)
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	2b05      	cmp	r3, #5
 800511e:	d827      	bhi.n	8005170 <UART_SetConfig+0x278>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x230>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005141 	.word	0x08005141
 800512c:	08005149 	.word	0x08005149
 8005130:	08005151 	.word	0x08005151
 8005134:	08005159 	.word	0x08005159
 8005138:	08005161 	.word	0x08005161
 800513c:	08005169 	.word	0x08005169
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	e1c3      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005148:	2304      	movs	r3, #4
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e1bf      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005150:	2308      	movs	r3, #8
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e1bb      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005158:	2310      	movs	r3, #16
 800515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515e:	e1b7      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005160:	2320      	movs	r3, #32
 8005162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005166:	e1b3      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516e:	e1af      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005176:	bf00      	nop
 8005178:	e1aa      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a37      	ldr	r2, [pc, #220]	; (800525c <UART_SetConfig+0x364>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d132      	bne.n	80051ea <UART_SetConfig+0x2f2>
 8005184:	4b32      	ldr	r3, [pc, #200]	; (8005250 <UART_SetConfig+0x358>)
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	2b05      	cmp	r3, #5
 800518e:	d827      	bhi.n	80051e0 <UART_SetConfig+0x2e8>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x2a0>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051b1 	.word	0x080051b1
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	080051c1 	.word	0x080051c1
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051d1 	.word	0x080051d1
 80051ac:	080051d9 	.word	0x080051d9
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b6:	e18b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051be:	e187      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c6:	e183      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ce:	e17f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051d0:	2320      	movs	r3, #32
 80051d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d6:	e17b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051de:	e177      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e6:	bf00      	nop
 80051e8:	e172      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <UART_SetConfig+0x368>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d144      	bne.n	800527e <UART_SetConfig+0x386>
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <UART_SetConfig+0x358>)
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	2b05      	cmp	r3, #5
 80051fe:	d839      	bhi.n	8005274 <UART_SetConfig+0x37c>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x310>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005221 	.word	0x08005221
 800520c:	08005229 	.word	0x08005229
 8005210:	08005231 	.word	0x08005231
 8005214:	08005239 	.word	0x08005239
 8005218:	08005265 	.word	0x08005265
 800521c:	0800526d 	.word	0x0800526d
 8005220:	2300      	movs	r3, #0
 8005222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005226:	e153      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522e:	e14f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005236:	e14b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e147      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005240:	cfff69f3 	.word	0xcfff69f3
 8005244:	58000c00 	.word	0x58000c00
 8005248:	11fff4ff 	.word	0x11fff4ff
 800524c:	40011000 	.word	0x40011000
 8005250:	58024400 	.word	0x58024400
 8005254:	40004400 	.word	0x40004400
 8005258:	40004800 	.word	0x40004800
 800525c:	40004c00 	.word	0x40004c00
 8005260:	40005000 	.word	0x40005000
 8005264:	2320      	movs	r3, #32
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e131      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	e12d      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527a:	bf00      	nop
 800527c:	e128      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4ac3      	ldr	r2, [pc, #780]	; (8005590 <UART_SetConfig+0x698>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d178      	bne.n	800537a <UART_SetConfig+0x482>
 8005288:	4bc2      	ldr	r3, [pc, #776]	; (8005594 <UART_SetConfig+0x69c>)
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005290:	2b28      	cmp	r3, #40	; 0x28
 8005292:	d86d      	bhi.n	8005370 <UART_SetConfig+0x478>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x3a4>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	08005341 	.word	0x08005341
 80052a0:	08005371 	.word	0x08005371
 80052a4:	08005371 	.word	0x08005371
 80052a8:	08005371 	.word	0x08005371
 80052ac:	08005371 	.word	0x08005371
 80052b0:	08005371 	.word	0x08005371
 80052b4:	08005371 	.word	0x08005371
 80052b8:	08005371 	.word	0x08005371
 80052bc:	08005349 	.word	0x08005349
 80052c0:	08005371 	.word	0x08005371
 80052c4:	08005371 	.word	0x08005371
 80052c8:	08005371 	.word	0x08005371
 80052cc:	08005371 	.word	0x08005371
 80052d0:	08005371 	.word	0x08005371
 80052d4:	08005371 	.word	0x08005371
 80052d8:	08005371 	.word	0x08005371
 80052dc:	08005351 	.word	0x08005351
 80052e0:	08005371 	.word	0x08005371
 80052e4:	08005371 	.word	0x08005371
 80052e8:	08005371 	.word	0x08005371
 80052ec:	08005371 	.word	0x08005371
 80052f0:	08005371 	.word	0x08005371
 80052f4:	08005371 	.word	0x08005371
 80052f8:	08005371 	.word	0x08005371
 80052fc:	08005359 	.word	0x08005359
 8005300:	08005371 	.word	0x08005371
 8005304:	08005371 	.word	0x08005371
 8005308:	08005371 	.word	0x08005371
 800530c:	08005371 	.word	0x08005371
 8005310:	08005371 	.word	0x08005371
 8005314:	08005371 	.word	0x08005371
 8005318:	08005371 	.word	0x08005371
 800531c:	08005361 	.word	0x08005361
 8005320:	08005371 	.word	0x08005371
 8005324:	08005371 	.word	0x08005371
 8005328:	08005371 	.word	0x08005371
 800532c:	08005371 	.word	0x08005371
 8005330:	08005371 	.word	0x08005371
 8005334:	08005371 	.word	0x08005371
 8005338:	08005371 	.word	0x08005371
 800533c:	08005369 	.word	0x08005369
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005346:	e0c3      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005348:	2304      	movs	r3, #4
 800534a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534e:	e0bf      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005350:	2308      	movs	r3, #8
 8005352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005356:	e0bb      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535e:	e0b7      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005360:	2320      	movs	r3, #32
 8005362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005366:	e0b3      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536e:	e0af      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005376:	bf00      	nop
 8005378:	e0aa      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a86      	ldr	r2, [pc, #536]	; (8005598 <UART_SetConfig+0x6a0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d132      	bne.n	80053ea <UART_SetConfig+0x4f2>
 8005384:	4b83      	ldr	r3, [pc, #524]	; (8005594 <UART_SetConfig+0x69c>)
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	2b05      	cmp	r3, #5
 800538e:	d827      	bhi.n	80053e0 <UART_SetConfig+0x4e8>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x4a0>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	080053c1 	.word	0x080053c1
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e08b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e087      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e083      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ce:	e07f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053d0:	2320      	movs	r3, #32
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d6:	e07b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e077      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	bf00      	nop
 80053e8:	e072      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a6b      	ldr	r2, [pc, #428]	; (800559c <UART_SetConfig+0x6a4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d132      	bne.n	800545a <UART_SetConfig+0x562>
 80053f4:	4b67      	ldr	r3, [pc, #412]	; (8005594 <UART_SetConfig+0x69c>)
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	2b05      	cmp	r3, #5
 80053fe:	d827      	bhi.n	8005450 <UART_SetConfig+0x558>
 8005400:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <UART_SetConfig+0x510>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005421 	.word	0x08005421
 800540c:	08005429 	.word	0x08005429
 8005410:	08005431 	.word	0x08005431
 8005414:	08005439 	.word	0x08005439
 8005418:	08005441 	.word	0x08005441
 800541c:	08005449 	.word	0x08005449
 8005420:	2300      	movs	r3, #0
 8005422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005426:	e053      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005428:	2304      	movs	r3, #4
 800542a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542e:	e04f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005430:	2308      	movs	r3, #8
 8005432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005436:	e04b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005438:	2310      	movs	r3, #16
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e047      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005440:	2320      	movs	r3, #32
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005446:	e043      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005448:	2340      	movs	r3, #64	; 0x40
 800544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544e:	e03f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	bf00      	nop
 8005458:	e03a      	b.n	80054d0 <UART_SetConfig+0x5d8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a50      	ldr	r2, [pc, #320]	; (80055a0 <UART_SetConfig+0x6a8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d132      	bne.n	80054ca <UART_SetConfig+0x5d2>
 8005464:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <UART_SetConfig+0x69c>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	2b05      	cmp	r3, #5
 800546e:	d827      	bhi.n	80054c0 <UART_SetConfig+0x5c8>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x580>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	08005491 	.word	0x08005491
 800547c:	08005499 	.word	0x08005499
 8005480:	080054a1 	.word	0x080054a1
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054b1 	.word	0x080054b1
 800548c:	080054b9 	.word	0x080054b9
 8005490:	2302      	movs	r3, #2
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	e01b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549e:	e017      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e013      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e00f      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80054b0:	2320      	movs	r3, #32
 80054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054b6:	e00b      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80054b8:	2340      	movs	r3, #64	; 0x40
 80054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054be:	e007      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <UART_SetConfig+0x5d8>
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a32      	ldr	r2, [pc, #200]	; (80055a0 <UART_SetConfig+0x6a8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	f040 86f7 	bne.w	80062ca <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	f000 80c0 	beq.w	8005666 <UART_SetConfig+0x76e>
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	dc04      	bgt.n	80054f4 <UART_SetConfig+0x5fc>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d00c      	beq.n	8005508 <UART_SetConfig+0x610>
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d065      	beq.n	80055be <UART_SetConfig+0x6c6>
 80054f2:	e27a      	b.n	80059ea <UART_SetConfig+0xaf2>
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	f000 81b0 	beq.w	800585a <UART_SetConfig+0x962>
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	f000 821e 	beq.w	800593c <UART_SetConfig+0xa44>
 8005500:	2b10      	cmp	r3, #16
 8005502:	f000 8104 	beq.w	800570e <UART_SetConfig+0x816>
 8005506:	e270      	b.n	80059ea <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005508:	f7fd ffb8 	bl	800347c <HAL_RCCEx_GetD3PCLK1Freq>
 800550c:	4602      	mov	r2, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d04e      	beq.n	80055b4 <UART_SetConfig+0x6bc>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b01      	cmp	r3, #1
 800551c:	d048      	beq.n	80055b0 <UART_SetConfig+0x6b8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2b02      	cmp	r3, #2
 8005524:	d042      	beq.n	80055ac <UART_SetConfig+0x6b4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b03      	cmp	r3, #3
 800552c:	d03c      	beq.n	80055a8 <UART_SetConfig+0x6b0>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	2b04      	cmp	r3, #4
 8005534:	d036      	beq.n	80055a4 <UART_SetConfig+0x6ac>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b05      	cmp	r3, #5
 800553c:	d026      	beq.n	800558c <UART_SetConfig+0x694>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2b06      	cmp	r3, #6
 8005544:	d020      	beq.n	8005588 <UART_SetConfig+0x690>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2b07      	cmp	r3, #7
 800554c:	d01a      	beq.n	8005584 <UART_SetConfig+0x68c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2b08      	cmp	r3, #8
 8005554:	d014      	beq.n	8005580 <UART_SetConfig+0x688>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b09      	cmp	r3, #9
 800555c:	d00e      	beq.n	800557c <UART_SetConfig+0x684>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	2b0a      	cmp	r3, #10
 8005564:	d008      	beq.n	8005578 <UART_SetConfig+0x680>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	2b0b      	cmp	r3, #11
 800556c:	d102      	bne.n	8005574 <UART_SetConfig+0x67c>
 800556e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005572:	e020      	b.n	80055b6 <UART_SetConfig+0x6be>
 8005574:	2301      	movs	r3, #1
 8005576:	e01e      	b.n	80055b6 <UART_SetConfig+0x6be>
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	e01c      	b.n	80055b6 <UART_SetConfig+0x6be>
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	e01a      	b.n	80055b6 <UART_SetConfig+0x6be>
 8005580:	2320      	movs	r3, #32
 8005582:	e018      	b.n	80055b6 <UART_SetConfig+0x6be>
 8005584:	2310      	movs	r3, #16
 8005586:	e016      	b.n	80055b6 <UART_SetConfig+0x6be>
 8005588:	230c      	movs	r3, #12
 800558a:	e014      	b.n	80055b6 <UART_SetConfig+0x6be>
 800558c:	230a      	movs	r3, #10
 800558e:	e012      	b.n	80055b6 <UART_SetConfig+0x6be>
 8005590:	40011400 	.word	0x40011400
 8005594:	58024400 	.word	0x58024400
 8005598:	40007800 	.word	0x40007800
 800559c:	40007c00 	.word	0x40007c00
 80055a0:	58000c00 	.word	0x58000c00
 80055a4:	2308      	movs	r3, #8
 80055a6:	e006      	b.n	80055b6 <UART_SetConfig+0x6be>
 80055a8:	2306      	movs	r3, #6
 80055aa:	e004      	b.n	80055b6 <UART_SetConfig+0x6be>
 80055ac:	2304      	movs	r3, #4
 80055ae:	e002      	b.n	80055b6 <UART_SetConfig+0x6be>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e000      	b.n	80055b6 <UART_SetConfig+0x6be>
 80055b4:	2301      	movs	r3, #1
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055bc:	e219      	b.n	80059f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd ff70 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d044      	beq.n	800565c <UART_SetConfig+0x764>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d03e      	beq.n	8005658 <UART_SetConfig+0x760>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d038      	beq.n	8005654 <UART_SetConfig+0x75c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d032      	beq.n	8005650 <UART_SetConfig+0x758>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d02c      	beq.n	800564c <UART_SetConfig+0x754>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d026      	beq.n	8005648 <UART_SetConfig+0x750>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d020      	beq.n	8005644 <UART_SetConfig+0x74c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b07      	cmp	r3, #7
 8005608:	d01a      	beq.n	8005640 <UART_SetConfig+0x748>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b08      	cmp	r3, #8
 8005610:	d014      	beq.n	800563c <UART_SetConfig+0x744>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b09      	cmp	r3, #9
 8005618:	d00e      	beq.n	8005638 <UART_SetConfig+0x740>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b0a      	cmp	r3, #10
 8005620:	d008      	beq.n	8005634 <UART_SetConfig+0x73c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b0b      	cmp	r3, #11
 8005628:	d102      	bne.n	8005630 <UART_SetConfig+0x738>
 800562a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562e:	e016      	b.n	800565e <UART_SetConfig+0x766>
 8005630:	2301      	movs	r3, #1
 8005632:	e014      	b.n	800565e <UART_SetConfig+0x766>
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	e012      	b.n	800565e <UART_SetConfig+0x766>
 8005638:	2340      	movs	r3, #64	; 0x40
 800563a:	e010      	b.n	800565e <UART_SetConfig+0x766>
 800563c:	2320      	movs	r3, #32
 800563e:	e00e      	b.n	800565e <UART_SetConfig+0x766>
 8005640:	2310      	movs	r3, #16
 8005642:	e00c      	b.n	800565e <UART_SetConfig+0x766>
 8005644:	230c      	movs	r3, #12
 8005646:	e00a      	b.n	800565e <UART_SetConfig+0x766>
 8005648:	230a      	movs	r3, #10
 800564a:	e008      	b.n	800565e <UART_SetConfig+0x766>
 800564c:	2308      	movs	r3, #8
 800564e:	e006      	b.n	800565e <UART_SetConfig+0x766>
 8005650:	2306      	movs	r3, #6
 8005652:	e004      	b.n	800565e <UART_SetConfig+0x766>
 8005654:	2304      	movs	r3, #4
 8005656:	e002      	b.n	800565e <UART_SetConfig+0x766>
 8005658:	2302      	movs	r3, #2
 800565a:	e000      	b.n	800565e <UART_SetConfig+0x766>
 800565c:	2301      	movs	r3, #1
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005664:	e1c5      	b.n	80059f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe f868 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d044      	beq.n	8005704 <UART_SetConfig+0x80c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	2b01      	cmp	r3, #1
 8005680:	d03e      	beq.n	8005700 <UART_SetConfig+0x808>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b02      	cmp	r3, #2
 8005688:	d038      	beq.n	80056fc <UART_SetConfig+0x804>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	2b03      	cmp	r3, #3
 8005690:	d032      	beq.n	80056f8 <UART_SetConfig+0x800>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b04      	cmp	r3, #4
 8005698:	d02c      	beq.n	80056f4 <UART_SetConfig+0x7fc>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b05      	cmp	r3, #5
 80056a0:	d026      	beq.n	80056f0 <UART_SetConfig+0x7f8>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b06      	cmp	r3, #6
 80056a8:	d020      	beq.n	80056ec <UART_SetConfig+0x7f4>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b07      	cmp	r3, #7
 80056b0:	d01a      	beq.n	80056e8 <UART_SetConfig+0x7f0>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d014      	beq.n	80056e4 <UART_SetConfig+0x7ec>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b09      	cmp	r3, #9
 80056c0:	d00e      	beq.n	80056e0 <UART_SetConfig+0x7e8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b0a      	cmp	r3, #10
 80056c8:	d008      	beq.n	80056dc <UART_SetConfig+0x7e4>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b0b      	cmp	r3, #11
 80056d0:	d102      	bne.n	80056d8 <UART_SetConfig+0x7e0>
 80056d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056d6:	e016      	b.n	8005706 <UART_SetConfig+0x80e>
 80056d8:	2301      	movs	r3, #1
 80056da:	e014      	b.n	8005706 <UART_SetConfig+0x80e>
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	e012      	b.n	8005706 <UART_SetConfig+0x80e>
 80056e0:	2340      	movs	r3, #64	; 0x40
 80056e2:	e010      	b.n	8005706 <UART_SetConfig+0x80e>
 80056e4:	2320      	movs	r3, #32
 80056e6:	e00e      	b.n	8005706 <UART_SetConfig+0x80e>
 80056e8:	2310      	movs	r3, #16
 80056ea:	e00c      	b.n	8005706 <UART_SetConfig+0x80e>
 80056ec:	230c      	movs	r3, #12
 80056ee:	e00a      	b.n	8005706 <UART_SetConfig+0x80e>
 80056f0:	230a      	movs	r3, #10
 80056f2:	e008      	b.n	8005706 <UART_SetConfig+0x80e>
 80056f4:	2308      	movs	r3, #8
 80056f6:	e006      	b.n	8005706 <UART_SetConfig+0x80e>
 80056f8:	2306      	movs	r3, #6
 80056fa:	e004      	b.n	8005706 <UART_SetConfig+0x80e>
 80056fc:	2304      	movs	r3, #4
 80056fe:	e002      	b.n	8005706 <UART_SetConfig+0x80e>
 8005700:	2302      	movs	r3, #2
 8005702:	e000      	b.n	8005706 <UART_SetConfig+0x80e>
 8005704:	2301      	movs	r3, #1
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800570c:	e171      	b.n	80059f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800570e:	4b7a      	ldr	r3, [pc, #488]	; (80058f8 <UART_SetConfig+0xa00>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d054      	beq.n	80057c4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800571a:	4b77      	ldr	r3, [pc, #476]	; (80058f8 <UART_SetConfig+0xa00>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	08db      	lsrs	r3, r3, #3
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	4a75      	ldr	r2, [pc, #468]	; (80058fc <UART_SetConfig+0xa04>)
 8005726:	40da      	lsrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d044      	beq.n	80057ba <UART_SetConfig+0x8c2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b01      	cmp	r3, #1
 8005736:	d03e      	beq.n	80057b6 <UART_SetConfig+0x8be>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b02      	cmp	r3, #2
 800573e:	d038      	beq.n	80057b2 <UART_SetConfig+0x8ba>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b03      	cmp	r3, #3
 8005746:	d032      	beq.n	80057ae <UART_SetConfig+0x8b6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2b04      	cmp	r3, #4
 800574e:	d02c      	beq.n	80057aa <UART_SetConfig+0x8b2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2b05      	cmp	r3, #5
 8005756:	d026      	beq.n	80057a6 <UART_SetConfig+0x8ae>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b06      	cmp	r3, #6
 800575e:	d020      	beq.n	80057a2 <UART_SetConfig+0x8aa>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b07      	cmp	r3, #7
 8005766:	d01a      	beq.n	800579e <UART_SetConfig+0x8a6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b08      	cmp	r3, #8
 800576e:	d014      	beq.n	800579a <UART_SetConfig+0x8a2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b09      	cmp	r3, #9
 8005776:	d00e      	beq.n	8005796 <UART_SetConfig+0x89e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b0a      	cmp	r3, #10
 800577e:	d008      	beq.n	8005792 <UART_SetConfig+0x89a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b0b      	cmp	r3, #11
 8005786:	d102      	bne.n	800578e <UART_SetConfig+0x896>
 8005788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800578c:	e016      	b.n	80057bc <UART_SetConfig+0x8c4>
 800578e:	2301      	movs	r3, #1
 8005790:	e014      	b.n	80057bc <UART_SetConfig+0x8c4>
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	e012      	b.n	80057bc <UART_SetConfig+0x8c4>
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	e010      	b.n	80057bc <UART_SetConfig+0x8c4>
 800579a:	2320      	movs	r3, #32
 800579c:	e00e      	b.n	80057bc <UART_SetConfig+0x8c4>
 800579e:	2310      	movs	r3, #16
 80057a0:	e00c      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057a2:	230c      	movs	r3, #12
 80057a4:	e00a      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057a6:	230a      	movs	r3, #10
 80057a8:	e008      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057aa:	2308      	movs	r3, #8
 80057ac:	e006      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057ae:	2306      	movs	r3, #6
 80057b0:	e004      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057b2:	2304      	movs	r3, #4
 80057b4:	e002      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e000      	b.n	80057bc <UART_SetConfig+0x8c4>
 80057ba:	2301      	movs	r3, #1
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80057c2:	e116      	b.n	80059f2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d043      	beq.n	8005854 <UART_SetConfig+0x95c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d03d      	beq.n	8005850 <UART_SetConfig+0x958>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d037      	beq.n	800584c <UART_SetConfig+0x954>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d031      	beq.n	8005848 <UART_SetConfig+0x950>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d02b      	beq.n	8005844 <UART_SetConfig+0x94c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d025      	beq.n	8005840 <UART_SetConfig+0x948>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b06      	cmp	r3, #6
 80057fa:	d01f      	beq.n	800583c <UART_SetConfig+0x944>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b07      	cmp	r3, #7
 8005802:	d019      	beq.n	8005838 <UART_SetConfig+0x940>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b08      	cmp	r3, #8
 800580a:	d013      	beq.n	8005834 <UART_SetConfig+0x93c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b09      	cmp	r3, #9
 8005812:	d00d      	beq.n	8005830 <UART_SetConfig+0x938>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2b0a      	cmp	r3, #10
 800581a:	d007      	beq.n	800582c <UART_SetConfig+0x934>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	2b0b      	cmp	r3, #11
 8005822:	d101      	bne.n	8005828 <UART_SetConfig+0x930>
 8005824:	4b36      	ldr	r3, [pc, #216]	; (8005900 <UART_SetConfig+0xa08>)
 8005826:	e016      	b.n	8005856 <UART_SetConfig+0x95e>
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <UART_SetConfig+0xa04>)
 800582a:	e014      	b.n	8005856 <UART_SetConfig+0x95e>
 800582c:	4b35      	ldr	r3, [pc, #212]	; (8005904 <UART_SetConfig+0xa0c>)
 800582e:	e012      	b.n	8005856 <UART_SetConfig+0x95e>
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <UART_SetConfig+0xa10>)
 8005832:	e010      	b.n	8005856 <UART_SetConfig+0x95e>
 8005834:	4b35      	ldr	r3, [pc, #212]	; (800590c <UART_SetConfig+0xa14>)
 8005836:	e00e      	b.n	8005856 <UART_SetConfig+0x95e>
 8005838:	4b35      	ldr	r3, [pc, #212]	; (8005910 <UART_SetConfig+0xa18>)
 800583a:	e00c      	b.n	8005856 <UART_SetConfig+0x95e>
 800583c:	4b35      	ldr	r3, [pc, #212]	; (8005914 <UART_SetConfig+0xa1c>)
 800583e:	e00a      	b.n	8005856 <UART_SetConfig+0x95e>
 8005840:	4b35      	ldr	r3, [pc, #212]	; (8005918 <UART_SetConfig+0xa20>)
 8005842:	e008      	b.n	8005856 <UART_SetConfig+0x95e>
 8005844:	4b35      	ldr	r3, [pc, #212]	; (800591c <UART_SetConfig+0xa24>)
 8005846:	e006      	b.n	8005856 <UART_SetConfig+0x95e>
 8005848:	4b35      	ldr	r3, [pc, #212]	; (8005920 <UART_SetConfig+0xa28>)
 800584a:	e004      	b.n	8005856 <UART_SetConfig+0x95e>
 800584c:	4b35      	ldr	r3, [pc, #212]	; (8005924 <UART_SetConfig+0xa2c>)
 800584e:	e002      	b.n	8005856 <UART_SetConfig+0x95e>
 8005850:	4b35      	ldr	r3, [pc, #212]	; (8005928 <UART_SetConfig+0xa30>)
 8005852:	e000      	b.n	8005856 <UART_SetConfig+0x95e>
 8005854:	4b29      	ldr	r3, [pc, #164]	; (80058fc <UART_SetConfig+0xa04>)
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005858:	e0cb      	b.n	80059f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	d046      	beq.n	80058f0 <UART_SetConfig+0x9f8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b01      	cmp	r3, #1
 8005868:	d040      	beq.n	80058ec <UART_SetConfig+0x9f4>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b02      	cmp	r3, #2
 8005870:	d03a      	beq.n	80058e8 <UART_SetConfig+0x9f0>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b03      	cmp	r3, #3
 8005878:	d034      	beq.n	80058e4 <UART_SetConfig+0x9ec>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b04      	cmp	r3, #4
 8005880:	d02e      	beq.n	80058e0 <UART_SetConfig+0x9e8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b05      	cmp	r3, #5
 8005888:	d028      	beq.n	80058dc <UART_SetConfig+0x9e4>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b06      	cmp	r3, #6
 8005890:	d022      	beq.n	80058d8 <UART_SetConfig+0x9e0>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b07      	cmp	r3, #7
 8005898:	d01c      	beq.n	80058d4 <UART_SetConfig+0x9dc>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d016      	beq.n	80058d0 <UART_SetConfig+0x9d8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b09      	cmp	r3, #9
 80058a8:	d00f      	beq.n	80058ca <UART_SetConfig+0x9d2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b0a      	cmp	r3, #10
 80058b0:	d008      	beq.n	80058c4 <UART_SetConfig+0x9cc>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b0b      	cmp	r3, #11
 80058b8:	d102      	bne.n	80058c0 <UART_SetConfig+0x9c8>
 80058ba:	f643 5309 	movw	r3, #15625	; 0x3d09
 80058be:	e018      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <UART_SetConfig+0xa18>)
 80058c2:	e016      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058c4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80058c8:	e013      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058ce:	e010      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058d0:	4b16      	ldr	r3, [pc, #88]	; (800592c <UART_SetConfig+0xa34>)
 80058d2:	e00e      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <UART_SetConfig+0xa08>)
 80058d6:	e00c      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <UART_SetConfig+0xa38>)
 80058da:	e00a      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058dc:	4b15      	ldr	r3, [pc, #84]	; (8005934 <UART_SetConfig+0xa3c>)
 80058de:	e008      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058e0:	4b08      	ldr	r3, [pc, #32]	; (8005904 <UART_SetConfig+0xa0c>)
 80058e2:	e006      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <UART_SetConfig+0xa40>)
 80058e6:	e004      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <UART_SetConfig+0xa10>)
 80058ea:	e002      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <UART_SetConfig+0xa14>)
 80058ee:	e000      	b.n	80058f2 <UART_SetConfig+0x9fa>
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <UART_SetConfig+0xa18>)
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058f4:	e07d      	b.n	80059f2 <UART_SetConfig+0xafa>
 80058f6:	bf00      	nop
 80058f8:	58024400 	.word	0x58024400
 80058fc:	03d09000 	.word	0x03d09000
 8005900:	0003d090 	.word	0x0003d090
 8005904:	0007a120 	.word	0x0007a120
 8005908:	000f4240 	.word	0x000f4240
 800590c:	001e8480 	.word	0x001e8480
 8005910:	003d0900 	.word	0x003d0900
 8005914:	00516155 	.word	0x00516155
 8005918:	0061a800 	.word	0x0061a800
 800591c:	007a1200 	.word	0x007a1200
 8005920:	00a2c2aa 	.word	0x00a2c2aa
 8005924:	00f42400 	.word	0x00f42400
 8005928:	01e84800 	.word	0x01e84800
 800592c:	0001e848 	.word	0x0001e848
 8005930:	00051615 	.word	0x00051615
 8005934:	00061a80 	.word	0x00061a80
 8005938:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d04e      	beq.n	80059e2 <UART_SetConfig+0xaea>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b01      	cmp	r3, #1
 800594a:	d047      	beq.n	80059dc <UART_SetConfig+0xae4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2b02      	cmp	r3, #2
 8005952:	d040      	beq.n	80059d6 <UART_SetConfig+0xade>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b03      	cmp	r3, #3
 800595a:	d039      	beq.n	80059d0 <UART_SetConfig+0xad8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b04      	cmp	r3, #4
 8005962:	d032      	beq.n	80059ca <UART_SetConfig+0xad2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b05      	cmp	r3, #5
 800596a:	d02b      	beq.n	80059c4 <UART_SetConfig+0xacc>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b06      	cmp	r3, #6
 8005972:	d024      	beq.n	80059be <UART_SetConfig+0xac6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b07      	cmp	r3, #7
 800597a:	d01d      	beq.n	80059b8 <UART_SetConfig+0xac0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b08      	cmp	r3, #8
 8005982:	d016      	beq.n	80059b2 <UART_SetConfig+0xaba>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	2b09      	cmp	r3, #9
 800598a:	d00f      	beq.n	80059ac <UART_SetConfig+0xab4>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b0a      	cmp	r3, #10
 8005992:	d008      	beq.n	80059a6 <UART_SetConfig+0xaae>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b0b      	cmp	r3, #11
 800599a:	d101      	bne.n	80059a0 <UART_SetConfig+0xaa8>
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	e022      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a4:	e01f      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059aa:	e01c      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b0:	e019      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b6:	e016      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059bc:	e013      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80059c2:	e010      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80059c8:	e00d      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ce:	e00a      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059d0:	f241 5355 	movw	r3, #5461	; 0x1555
 80059d4:	e007      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059da:	e004      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059e0:	e001      	b.n	80059e6 <UART_SetConfig+0xaee>
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059e8:	e003      	b.n	80059f2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80059f0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f001 83e4 	beq.w	80071c2 <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d305      	bcc.n	8005a16 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d904      	bls.n	8005a20 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1c:	f001 bbd1 	b.w	80071c2 <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 8005a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	f000 8153 	beq.w	8005cd0 <UART_SetConfig+0xdd8>
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	dc06      	bgt.n	8005a3c <UART_SetConfig+0xb44>
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d00f      	beq.n	8005a52 <UART_SetConfig+0xb5a>
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	f000 80ab 	beq.w	8005b8e <UART_SetConfig+0xc96>
 8005a38:	f000 bc30 	b.w	800629c <UART_SetConfig+0x13a4>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	f000 832d 	beq.w	800609c <UART_SetConfig+0x11a4>
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	f000 83a5 	beq.w	8006192 <UART_SetConfig+0x129a>
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	f000 81e2 	beq.w	8005e12 <UART_SetConfig+0xf1a>
 8005a4e:	f000 bc25 	b.w	800629c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a52:	f7fd fd13 	bl	800347c <HAL_RCCEx_GetD3PCLK1Freq>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d067      	beq.n	8005b36 <UART_SetConfig+0xc3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d05e      	beq.n	8005b2c <UART_SetConfig+0xc34>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d055      	beq.n	8005b22 <UART_SetConfig+0xc2a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d04c      	beq.n	8005b18 <UART_SetConfig+0xc20>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d043      	beq.n	8005b0e <UART_SetConfig+0xc16>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d03a      	beq.n	8005b04 <UART_SetConfig+0xc0c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d031      	beq.n	8005afa <UART_SetConfig+0xc02>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b07      	cmp	r3, #7
 8005a9c:	d028      	beq.n	8005af0 <UART_SetConfig+0xbf8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d01f      	beq.n	8005ae6 <UART_SetConfig+0xbee>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b09      	cmp	r3, #9
 8005aac:	d016      	beq.n	8005adc <UART_SetConfig+0xbe4>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b0a      	cmp	r3, #10
 8005ab4:	d00d      	beq.n	8005ad2 <UART_SetConfig+0xbda>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b0b      	cmp	r3, #11
 8005abc:	d104      	bne.n	8005ac8 <UART_SetConfig+0xbd0>
 8005abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ac2:	f04f 0400 	mov.w	r4, #0
 8005ac6:	e03a      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005ac8:	f04f 0301 	mov.w	r3, #1
 8005acc:	f04f 0400 	mov.w	r4, #0
 8005ad0:	e035      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005ad2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005ad6:	f04f 0400 	mov.w	r4, #0
 8005ada:	e030      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005adc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005ae0:	f04f 0400 	mov.w	r4, #0
 8005ae4:	e02b      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005ae6:	f04f 0320 	mov.w	r3, #32
 8005aea:	f04f 0400 	mov.w	r4, #0
 8005aee:	e026      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005af0:	f04f 0310 	mov.w	r3, #16
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	e021      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005afa:	f04f 030c 	mov.w	r3, #12
 8005afe:	f04f 0400 	mov.w	r4, #0
 8005b02:	e01c      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005b04:	f04f 030a 	mov.w	r3, #10
 8005b08:	f04f 0400 	mov.w	r4, #0
 8005b0c:	e017      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005b0e:	f04f 0308 	mov.w	r3, #8
 8005b12:	f04f 0400 	mov.w	r4, #0
 8005b16:	e012      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005b18:	f04f 0306 	mov.w	r3, #6
 8005b1c:	f04f 0400 	mov.w	r4, #0
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005b22:	f04f 0304 	mov.w	r3, #4
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	e008      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005b2c:	f04f 0302 	mov.w	r3, #2
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	e003      	b.n	8005b3e <UART_SetConfig+0xc46>
 8005b36:	f04f 0301 	mov.w	r3, #1
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4623      	mov	r3, r4
 8005b42:	f7fa fbc9 	bl	80002d8 <__aeabi_uldivmod>
 8005b46:	4603      	mov	r3, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	0214      	lsls	r4, r2, #8
 8005b58:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b5c:	020b      	lsls	r3, r1, #8
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	0852      	lsrs	r2, r2, #1
 8005b64:	4611      	mov	r1, r2
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	eb13 0b01 	adds.w	fp, r3, r1
 8005b6e:	eb44 0c02 	adc.w	ip, r4, r2
 8005b72:	4658      	mov	r0, fp
 8005b74:	4661      	mov	r1, ip
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f04f 0400 	mov.w	r4, #0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4623      	mov	r3, r4
 8005b82:	f7fa fba9 	bl	80002d8 <__aeabi_uldivmod>
 8005b86:	4603      	mov	r3, r0
 8005b88:	460c      	mov	r4, r1
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005b8c:	e38a      	b.n	80062a4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd fc88 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f04f 0100 	mov.w	r1, #0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d067      	beq.n	8005c78 <UART_SetConfig+0xd80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d05e      	beq.n	8005c6e <UART_SetConfig+0xd76>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d055      	beq.n	8005c64 <UART_SetConfig+0xd6c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d04c      	beq.n	8005c5a <UART_SetConfig+0xd62>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d043      	beq.n	8005c50 <UART_SetConfig+0xd58>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d03a      	beq.n	8005c46 <UART_SetConfig+0xd4e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d031      	beq.n	8005c3c <UART_SetConfig+0xd44>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b07      	cmp	r3, #7
 8005bde:	d028      	beq.n	8005c32 <UART_SetConfig+0xd3a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d01f      	beq.n	8005c28 <UART_SetConfig+0xd30>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d016      	beq.n	8005c1e <UART_SetConfig+0xd26>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2b0a      	cmp	r3, #10
 8005bf6:	d00d      	beq.n	8005c14 <UART_SetConfig+0xd1c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	2b0b      	cmp	r3, #11
 8005bfe:	d104      	bne.n	8005c0a <UART_SetConfig+0xd12>
 8005c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c04:	f04f 0400 	mov.w	r4, #0
 8005c08:	e03a      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c0a:	f04f 0301 	mov.w	r3, #1
 8005c0e:	f04f 0400 	mov.w	r4, #0
 8005c12:	e035      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c14:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	e030      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005c22:	f04f 0400 	mov.w	r4, #0
 8005c26:	e02b      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c28:	f04f 0320 	mov.w	r3, #32
 8005c2c:	f04f 0400 	mov.w	r4, #0
 8005c30:	e026      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c32:	f04f 0310 	mov.w	r3, #16
 8005c36:	f04f 0400 	mov.w	r4, #0
 8005c3a:	e021      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c3c:	f04f 030c 	mov.w	r3, #12
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	e01c      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c46:	f04f 030a 	mov.w	r3, #10
 8005c4a:	f04f 0400 	mov.w	r4, #0
 8005c4e:	e017      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c50:	f04f 0308 	mov.w	r3, #8
 8005c54:	f04f 0400 	mov.w	r4, #0
 8005c58:	e012      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c5a:	f04f 0306 	mov.w	r3, #6
 8005c5e:	f04f 0400 	mov.w	r4, #0
 8005c62:	e00d      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c64:	f04f 0304 	mov.w	r3, #4
 8005c68:	f04f 0400 	mov.w	r4, #0
 8005c6c:	e008      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c6e:	f04f 0302 	mov.w	r3, #2
 8005c72:	f04f 0400 	mov.w	r4, #0
 8005c76:	e003      	b.n	8005c80 <UART_SetConfig+0xd88>
 8005c78:	f04f 0301 	mov.w	r3, #1
 8005c7c:	f04f 0400 	mov.w	r4, #0
 8005c80:	461a      	mov	r2, r3
 8005c82:	4623      	mov	r3, r4
 8005c84:	f7fa fb28 	bl	80002d8 <__aeabi_uldivmod>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4622      	mov	r2, r4
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	f04f 0400 	mov.w	r4, #0
 8005c98:	0214      	lsls	r4, r2, #8
 8005c9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005c9e:	020b      	lsls	r3, r1, #8
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6852      	ldr	r2, [r2, #4]
 8005ca4:	0852      	lsrs	r2, r2, #1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	eb13 0b01 	adds.w	fp, r3, r1
 8005cb0:	eb44 0c02 	adc.w	ip, r4, r2
 8005cb4:	4658      	mov	r0, fp
 8005cb6:	4661      	mov	r1, ip
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f04f 0400 	mov.w	r4, #0
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	f7fa fb08 	bl	80002d8 <__aeabi_uldivmod>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005cce:	e2e9      	b.n	80062a4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cd0:	f107 0308 	add.w	r3, r7, #8
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd fd33 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f04f 0100 	mov.w	r1, #0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d067      	beq.n	8005dba <UART_SetConfig+0xec2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d05e      	beq.n	8005db0 <UART_SetConfig+0xeb8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d055      	beq.n	8005da6 <UART_SetConfig+0xeae>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d04c      	beq.n	8005d9c <UART_SetConfig+0xea4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d043      	beq.n	8005d92 <UART_SetConfig+0xe9a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d03a      	beq.n	8005d88 <UART_SetConfig+0xe90>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d031      	beq.n	8005d7e <UART_SetConfig+0xe86>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2b07      	cmp	r3, #7
 8005d20:	d028      	beq.n	8005d74 <UART_SetConfig+0xe7c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d01f      	beq.n	8005d6a <UART_SetConfig+0xe72>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b09      	cmp	r3, #9
 8005d30:	d016      	beq.n	8005d60 <UART_SetConfig+0xe68>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b0a      	cmp	r3, #10
 8005d38:	d00d      	beq.n	8005d56 <UART_SetConfig+0xe5e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b0b      	cmp	r3, #11
 8005d40:	d104      	bne.n	8005d4c <UART_SetConfig+0xe54>
 8005d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	e03a      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d4c:	f04f 0301 	mov.w	r3, #1
 8005d50:	f04f 0400 	mov.w	r4, #0
 8005d54:	e035      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d56:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d5a:	f04f 0400 	mov.w	r4, #0
 8005d5e:	e030      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d60:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005d64:	f04f 0400 	mov.w	r4, #0
 8005d68:	e02b      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d6a:	f04f 0320 	mov.w	r3, #32
 8005d6e:	f04f 0400 	mov.w	r4, #0
 8005d72:	e026      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d74:	f04f 0310 	mov.w	r3, #16
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	e021      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d7e:	f04f 030c 	mov.w	r3, #12
 8005d82:	f04f 0400 	mov.w	r4, #0
 8005d86:	e01c      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d88:	f04f 030a 	mov.w	r3, #10
 8005d8c:	f04f 0400 	mov.w	r4, #0
 8005d90:	e017      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d92:	f04f 0308 	mov.w	r3, #8
 8005d96:	f04f 0400 	mov.w	r4, #0
 8005d9a:	e012      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005d9c:	f04f 0306 	mov.w	r3, #6
 8005da0:	f04f 0400 	mov.w	r4, #0
 8005da4:	e00d      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005da6:	f04f 0304 	mov.w	r3, #4
 8005daa:	f04f 0400 	mov.w	r4, #0
 8005dae:	e008      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005db0:	f04f 0302 	mov.w	r3, #2
 8005db4:	f04f 0400 	mov.w	r4, #0
 8005db8:	e003      	b.n	8005dc2 <UART_SetConfig+0xeca>
 8005dba:	f04f 0301 	mov.w	r3, #1
 8005dbe:	f04f 0400 	mov.w	r4, #0
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	f7fa fa87 	bl	80002d8 <__aeabi_uldivmod>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	f04f 0400 	mov.w	r4, #0
 8005dda:	0214      	lsls	r4, r2, #8
 8005ddc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005de0:	020b      	lsls	r3, r1, #8
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6852      	ldr	r2, [r2, #4]
 8005de6:	0852      	lsrs	r2, r2, #1
 8005de8:	4611      	mov	r1, r2
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	eb13 0b01 	adds.w	fp, r3, r1
 8005df2:	eb44 0c02 	adc.w	ip, r4, r2
 8005df6:	4658      	mov	r0, fp
 8005df8:	4661      	mov	r1, ip
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f04f 0400 	mov.w	r4, #0
 8005e02:	461a      	mov	r2, r3
 8005e04:	4623      	mov	r3, r4
 8005e06:	f7fa fa67 	bl	80002d8 <__aeabi_uldivmod>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005e10:	e248      	b.n	80062a4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e12:	4b97      	ldr	r3, [pc, #604]	; (8006070 <UART_SetConfig+0x1178>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80a3 	beq.w	8005f66 <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e20:	4b93      	ldr	r3, [pc, #588]	; (8006070 <UART_SetConfig+0x1178>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	08db      	lsrs	r3, r3, #3
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	4a92      	ldr	r2, [pc, #584]	; (8006074 <UART_SetConfig+0x117c>)
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e30:	4618      	mov	r0, r3
 8005e32:	f04f 0100 	mov.w	r1, #0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d067      	beq.n	8005f0e <UART_SetConfig+0x1016>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d05e      	beq.n	8005f04 <UART_SetConfig+0x100c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d055      	beq.n	8005efa <UART_SetConfig+0x1002>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d04c      	beq.n	8005ef0 <UART_SetConfig+0xff8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d043      	beq.n	8005ee6 <UART_SetConfig+0xfee>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d03a      	beq.n	8005edc <UART_SetConfig+0xfe4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d031      	beq.n	8005ed2 <UART_SetConfig+0xfda>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	2b07      	cmp	r3, #7
 8005e74:	d028      	beq.n	8005ec8 <UART_SetConfig+0xfd0>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d01f      	beq.n	8005ebe <UART_SetConfig+0xfc6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d016      	beq.n	8005eb4 <UART_SetConfig+0xfbc>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b0a      	cmp	r3, #10
 8005e8c:	d00d      	beq.n	8005eaa <UART_SetConfig+0xfb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	2b0b      	cmp	r3, #11
 8005e94:	d104      	bne.n	8005ea0 <UART_SetConfig+0xfa8>
 8005e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e9a:	f04f 0400 	mov.w	r4, #0
 8005e9e:	e03a      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005ea0:	f04f 0301 	mov.w	r3, #1
 8005ea4:	f04f 0400 	mov.w	r4, #0
 8005ea8:	e035      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005eaa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005eae:	f04f 0400 	mov.w	r4, #0
 8005eb2:	e030      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005eb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005eb8:	f04f 0400 	mov.w	r4, #0
 8005ebc:	e02b      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005ebe:	f04f 0320 	mov.w	r3, #32
 8005ec2:	f04f 0400 	mov.w	r4, #0
 8005ec6:	e026      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005ec8:	f04f 0310 	mov.w	r3, #16
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	e021      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005ed2:	f04f 030c 	mov.w	r3, #12
 8005ed6:	f04f 0400 	mov.w	r4, #0
 8005eda:	e01c      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005edc:	f04f 030a 	mov.w	r3, #10
 8005ee0:	f04f 0400 	mov.w	r4, #0
 8005ee4:	e017      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005ee6:	f04f 0308 	mov.w	r3, #8
 8005eea:	f04f 0400 	mov.w	r4, #0
 8005eee:	e012      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005ef0:	f04f 0306 	mov.w	r3, #6
 8005ef4:	f04f 0400 	mov.w	r4, #0
 8005ef8:	e00d      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005efa:	f04f 0304 	mov.w	r3, #4
 8005efe:	f04f 0400 	mov.w	r4, #0
 8005f02:	e008      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005f04:	f04f 0302 	mov.w	r3, #2
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	e003      	b.n	8005f16 <UART_SetConfig+0x101e>
 8005f0e:	f04f 0301 	mov.w	r3, #1
 8005f12:	f04f 0400 	mov.w	r4, #0
 8005f16:	461a      	mov	r2, r3
 8005f18:	4623      	mov	r3, r4
 8005f1a:	f7fa f9dd 	bl	80002d8 <__aeabi_uldivmod>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	4619      	mov	r1, r3
 8005f24:	4622      	mov	r2, r4
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f04f 0400 	mov.w	r4, #0
 8005f2e:	0214      	lsls	r4, r2, #8
 8005f30:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f34:	020b      	lsls	r3, r1, #8
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	0852      	lsrs	r2, r2, #1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	eb13 0b01 	adds.w	fp, r3, r1
 8005f46:	eb44 0c02 	adc.w	ip, r4, r2
 8005f4a:	4658      	mov	r0, fp
 8005f4c:	4661      	mov	r1, ip
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f04f 0400 	mov.w	r4, #0
 8005f56:	461a      	mov	r2, r3
 8005f58:	4623      	mov	r3, r4
 8005f5a:	f7fa f9bd 	bl	80002d8 <__aeabi_uldivmod>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8005f64:	e19e      	b.n	80062a4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d05b      	beq.n	8006026 <UART_SetConfig+0x112e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d053      	beq.n	800601e <UART_SetConfig+0x1126>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d04b      	beq.n	8006016 <UART_SetConfig+0x111e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d043      	beq.n	800600e <UART_SetConfig+0x1116>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d03b      	beq.n	8006006 <UART_SetConfig+0x110e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d033      	beq.n	8005ffe <UART_SetConfig+0x1106>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d02b      	beq.n	8005ff6 <UART_SetConfig+0x10fe>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	d023      	beq.n	8005fee <UART_SetConfig+0x10f6>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d01b      	beq.n	8005fe6 <UART_SetConfig+0x10ee>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b09      	cmp	r3, #9
 8005fb4:	d013      	beq.n	8005fde <UART_SetConfig+0x10e6>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b0a      	cmp	r3, #10
 8005fbc:	d00b      	beq.n	8005fd6 <UART_SetConfig+0x10de>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b0b      	cmp	r3, #11
 8005fc4:	d103      	bne.n	8005fce <UART_SetConfig+0x10d6>
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <UART_SetConfig+0x117c>)
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	e02e      	b.n	800602c <UART_SetConfig+0x1134>
 8005fce:	4b2a      	ldr	r3, [pc, #168]	; (8006078 <UART_SetConfig+0x1180>)
 8005fd0:	f04f 0403 	mov.w	r4, #3
 8005fd4:	e02a      	b.n	800602c <UART_SetConfig+0x1134>
 8005fd6:	4b29      	ldr	r3, [pc, #164]	; (800607c <UART_SetConfig+0x1184>)
 8005fd8:	f04f 0400 	mov.w	r4, #0
 8005fdc:	e026      	b.n	800602c <UART_SetConfig+0x1134>
 8005fde:	4b28      	ldr	r3, [pc, #160]	; (8006080 <UART_SetConfig+0x1188>)
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	e022      	b.n	800602c <UART_SetConfig+0x1134>
 8005fe6:	4b27      	ldr	r3, [pc, #156]	; (8006084 <UART_SetConfig+0x118c>)
 8005fe8:	f04f 0400 	mov.w	r4, #0
 8005fec:	e01e      	b.n	800602c <UART_SetConfig+0x1134>
 8005fee:	4b26      	ldr	r3, [pc, #152]	; (8006088 <UART_SetConfig+0x1190>)
 8005ff0:	f04f 0400 	mov.w	r4, #0
 8005ff4:	e01a      	b.n	800602c <UART_SetConfig+0x1134>
 8005ff6:	a41a      	add	r4, pc, #104	; (adr r4, 8006060 <UART_SetConfig+0x1168>)
 8005ff8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ffc:	e016      	b.n	800602c <UART_SetConfig+0x1134>
 8005ffe:	4b23      	ldr	r3, [pc, #140]	; (800608c <UART_SetConfig+0x1194>)
 8006000:	f04f 0400 	mov.w	r4, #0
 8006004:	e012      	b.n	800602c <UART_SetConfig+0x1134>
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <UART_SetConfig+0x1198>)
 8006008:	f04f 0400 	mov.w	r4, #0
 800600c:	e00e      	b.n	800602c <UART_SetConfig+0x1134>
 800600e:	a416      	add	r4, pc, #88	; (adr r4, 8006068 <UART_SetConfig+0x1170>)
 8006010:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006014:	e00a      	b.n	800602c <UART_SetConfig+0x1134>
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <UART_SetConfig+0x119c>)
 8006018:	f04f 0400 	mov.w	r4, #0
 800601c:	e006      	b.n	800602c <UART_SetConfig+0x1134>
 800601e:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <UART_SetConfig+0x11a0>)
 8006020:	f04f 0401 	mov.w	r4, #1
 8006024:	e002      	b.n	800602c <UART_SetConfig+0x1134>
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <UART_SetConfig+0x1180>)
 8006028:	f04f 0403 	mov.w	r4, #3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	0852      	lsrs	r2, r2, #1
 8006032:	4611      	mov	r1, r2
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	eb13 0b01 	adds.w	fp, r3, r1
 800603c:	eb44 0c02 	adc.w	ip, r4, r2
 8006040:	4658      	mov	r0, fp
 8006042:	4661      	mov	r1, ip
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f04f 0400 	mov.w	r4, #0
 800604c:	461a      	mov	r2, r3
 800604e:	4623      	mov	r3, r4
 8006050:	f7fa f942 	bl	80002d8 <__aeabi_uldivmod>
 8006054:	4603      	mov	r3, r0
 8006056:	460c      	mov	r4, r1
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800605a:	e123      	b.n	80062a4 <UART_SetConfig+0x13ac>
 800605c:	f3af 8000 	nop.w
 8006060:	51615500 	.word	0x51615500
 8006064:	00000000 	.word	0x00000000
 8006068:	a2c2aa00 	.word	0xa2c2aa00
 800606c:	00000000 	.word	0x00000000
 8006070:	58024400 	.word	0x58024400
 8006074:	03d09000 	.word	0x03d09000
 8006078:	d0900000 	.word	0xd0900000
 800607c:	07a12000 	.word	0x07a12000
 8006080:	0f424000 	.word	0x0f424000
 8006084:	1e848000 	.word	0x1e848000
 8006088:	3d090000 	.word	0x3d090000
 800608c:	61a80000 	.word	0x61a80000
 8006090:	7a120000 	.word	0x7a120000
 8006094:	f4240000 	.word	0xf4240000
 8006098:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d05b      	beq.n	800615c <UART_SetConfig+0x1264>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d053      	beq.n	8006154 <UART_SetConfig+0x125c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d04b      	beq.n	800614c <UART_SetConfig+0x1254>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d043      	beq.n	8006144 <UART_SetConfig+0x124c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d03b      	beq.n	800613c <UART_SetConfig+0x1244>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d033      	beq.n	8006134 <UART_SetConfig+0x123c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d02b      	beq.n	800612c <UART_SetConfig+0x1234>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b07      	cmp	r3, #7
 80060da:	d023      	beq.n	8006124 <UART_SetConfig+0x122c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d01b      	beq.n	800611c <UART_SetConfig+0x1224>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	d013      	beq.n	8006114 <UART_SetConfig+0x121c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b0a      	cmp	r3, #10
 80060f2:	d00b      	beq.n	800610c <UART_SetConfig+0x1214>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b0b      	cmp	r3, #11
 80060fa:	d103      	bne.n	8006104 <UART_SetConfig+0x120c>
 80060fc:	4bc0      	ldr	r3, [pc, #768]	; (8006400 <UART_SetConfig+0x1508>)
 80060fe:	f04f 0400 	mov.w	r4, #0
 8006102:	e02e      	b.n	8006162 <UART_SetConfig+0x126a>
 8006104:	4bbf      	ldr	r3, [pc, #764]	; (8006404 <UART_SetConfig+0x150c>)
 8006106:	f04f 0400 	mov.w	r4, #0
 800610a:	e02a      	b.n	8006162 <UART_SetConfig+0x126a>
 800610c:	4bbe      	ldr	r3, [pc, #760]	; (8006408 <UART_SetConfig+0x1510>)
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	e026      	b.n	8006162 <UART_SetConfig+0x126a>
 8006114:	4bbd      	ldr	r3, [pc, #756]	; (800640c <UART_SetConfig+0x1514>)
 8006116:	f04f 0400 	mov.w	r4, #0
 800611a:	e022      	b.n	8006162 <UART_SetConfig+0x126a>
 800611c:	4bbc      	ldr	r3, [pc, #752]	; (8006410 <UART_SetConfig+0x1518>)
 800611e:	f04f 0400 	mov.w	r4, #0
 8006122:	e01e      	b.n	8006162 <UART_SetConfig+0x126a>
 8006124:	4bbb      	ldr	r3, [pc, #748]	; (8006414 <UART_SetConfig+0x151c>)
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	e01a      	b.n	8006162 <UART_SetConfig+0x126a>
 800612c:	a4b0      	add	r4, pc, #704	; (adr r4, 80063f0 <UART_SetConfig+0x14f8>)
 800612e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006132:	e016      	b.n	8006162 <UART_SetConfig+0x126a>
 8006134:	4bb8      	ldr	r3, [pc, #736]	; (8006418 <UART_SetConfig+0x1520>)
 8006136:	f04f 0400 	mov.w	r4, #0
 800613a:	e012      	b.n	8006162 <UART_SetConfig+0x126a>
 800613c:	4bb7      	ldr	r3, [pc, #732]	; (800641c <UART_SetConfig+0x1524>)
 800613e:	f04f 0400 	mov.w	r4, #0
 8006142:	e00e      	b.n	8006162 <UART_SetConfig+0x126a>
 8006144:	a4ac      	add	r4, pc, #688	; (adr r4, 80063f8 <UART_SetConfig+0x1500>)
 8006146:	e9d4 3400 	ldrd	r3, r4, [r4]
 800614a:	e00a      	b.n	8006162 <UART_SetConfig+0x126a>
 800614c:	4bb4      	ldr	r3, [pc, #720]	; (8006420 <UART_SetConfig+0x1528>)
 800614e:	f04f 0400 	mov.w	r4, #0
 8006152:	e006      	b.n	8006162 <UART_SetConfig+0x126a>
 8006154:	4bb3      	ldr	r3, [pc, #716]	; (8006424 <UART_SetConfig+0x152c>)
 8006156:	f04f 0400 	mov.w	r4, #0
 800615a:	e002      	b.n	8006162 <UART_SetConfig+0x126a>
 800615c:	4ba9      	ldr	r3, [pc, #676]	; (8006404 <UART_SetConfig+0x150c>)
 800615e:	f04f 0400 	mov.w	r4, #0
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6852      	ldr	r2, [r2, #4]
 8006166:	0852      	lsrs	r2, r2, #1
 8006168:	4611      	mov	r1, r2
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	eb13 0b01 	adds.w	fp, r3, r1
 8006172:	eb44 0c02 	adc.w	ip, r4, r2
 8006176:	4658      	mov	r0, fp
 8006178:	4661      	mov	r1, ip
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f04f 0400 	mov.w	r4, #0
 8006182:	461a      	mov	r2, r3
 8006184:	4623      	mov	r3, r4
 8006186:	f7fa f8a7 	bl	80002d8 <__aeabi_uldivmod>
 800618a:	4603      	mov	r3, r0
 800618c:	460c      	mov	r4, r1
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006190:	e088      	b.n	80062a4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d064      	beq.n	8006264 <UART_SetConfig+0x136c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d05b      	beq.n	800625a <UART_SetConfig+0x1362>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d052      	beq.n	8006250 <UART_SetConfig+0x1358>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d04a      	beq.n	8006248 <UART_SetConfig+0x1350>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d041      	beq.n	800623e <UART_SetConfig+0x1346>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d039      	beq.n	8006236 <UART_SetConfig+0x133e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b06      	cmp	r3, #6
 80061c8:	d031      	beq.n	800622e <UART_SetConfig+0x1336>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	d028      	beq.n	8006224 <UART_SetConfig+0x132c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d01f      	beq.n	800621a <UART_SetConfig+0x1322>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2b09      	cmp	r3, #9
 80061e0:	d016      	beq.n	8006210 <UART_SetConfig+0x1318>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2b0a      	cmp	r3, #10
 80061e8:	d00d      	beq.n	8006206 <UART_SetConfig+0x130e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b0b      	cmp	r3, #11
 80061f0:	d104      	bne.n	80061fc <UART_SetConfig+0x1304>
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	f04f 0400 	mov.w	r4, #0
 80061fa:	e037      	b.n	800626c <UART_SetConfig+0x1374>
 80061fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006200:	f04f 0400 	mov.w	r4, #0
 8006204:	e032      	b.n	800626c <UART_SetConfig+0x1374>
 8006206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800620a:	f04f 0400 	mov.w	r4, #0
 800620e:	e02d      	b.n	800626c <UART_SetConfig+0x1374>
 8006210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006214:	f04f 0400 	mov.w	r4, #0
 8006218:	e028      	b.n	800626c <UART_SetConfig+0x1374>
 800621a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800621e:	f04f 0400 	mov.w	r4, #0
 8006222:	e023      	b.n	800626c <UART_SetConfig+0x1374>
 8006224:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006228:	f04f 0400 	mov.w	r4, #0
 800622c:	e01e      	b.n	800626c <UART_SetConfig+0x1374>
 800622e:	4b7e      	ldr	r3, [pc, #504]	; (8006428 <UART_SetConfig+0x1530>)
 8006230:	f04f 0400 	mov.w	r4, #0
 8006234:	e01a      	b.n	800626c <UART_SetConfig+0x1374>
 8006236:	4b7d      	ldr	r3, [pc, #500]	; (800642c <UART_SetConfig+0x1534>)
 8006238:	f04f 0400 	mov.w	r4, #0
 800623c:	e016      	b.n	800626c <UART_SetConfig+0x1374>
 800623e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006242:	f04f 0400 	mov.w	r4, #0
 8006246:	e011      	b.n	800626c <UART_SetConfig+0x1374>
 8006248:	4b79      	ldr	r3, [pc, #484]	; (8006430 <UART_SetConfig+0x1538>)
 800624a:	f04f 0400 	mov.w	r4, #0
 800624e:	e00d      	b.n	800626c <UART_SetConfig+0x1374>
 8006250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006254:	f04f 0400 	mov.w	r4, #0
 8006258:	e008      	b.n	800626c <UART_SetConfig+0x1374>
 800625a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800625e:	f04f 0400 	mov.w	r4, #0
 8006262:	e003      	b.n	800626c <UART_SetConfig+0x1374>
 8006264:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006268:	f04f 0400 	mov.w	r4, #0
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6852      	ldr	r2, [r2, #4]
 8006270:	0852      	lsrs	r2, r2, #1
 8006272:	4611      	mov	r1, r2
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	eb13 0b01 	adds.w	fp, r3, r1
 800627c:	eb44 0c02 	adc.w	ip, r4, r2
 8006280:	4658      	mov	r0, fp
 8006282:	4661      	mov	r1, ip
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f04f 0400 	mov.w	r4, #0
 800628c:	461a      	mov	r2, r3
 800628e:	4623      	mov	r3, r4
 8006290:	f7fa f822 	bl	80002d8 <__aeabi_uldivmod>
 8006294:	4603      	mov	r3, r0
 8006296:	460c      	mov	r4, r1
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800629a:	e003      	b.n	80062a4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80062a2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062aa:	d309      	bcc.n	80062c0 <UART_SetConfig+0x13c8>
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b2:	d205      	bcs.n	80062c0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	f000 bf81 	b.w	80071c2 <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c6:	f000 bf7c 	b.w	80071c2 <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d2:	f040 83d8 	bne.w	8006a86 <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 80062d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	f200 83b1 	bhi.w	8006a42 <UART_SetConfig+0x1b4a>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <UART_SetConfig+0x13f0>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	08006435 	.word	0x08006435
 80062ec:	080064eb 	.word	0x080064eb
 80062f0:	08006a43 	.word	0x08006a43
 80062f4:	08006a43 	.word	0x08006a43
 80062f8:	080065a1 	.word	0x080065a1
 80062fc:	08006a43 	.word	0x08006a43
 8006300:	08006a43 	.word	0x08006a43
 8006304:	08006a43 	.word	0x08006a43
 8006308:	0800665d 	.word	0x0800665d
 800630c:	08006a43 	.word	0x08006a43
 8006310:	08006a43 	.word	0x08006a43
 8006314:	08006a43 	.word	0x08006a43
 8006318:	08006a43 	.word	0x08006a43
 800631c:	08006a43 	.word	0x08006a43
 8006320:	08006a43 	.word	0x08006a43
 8006324:	08006a43 	.word	0x08006a43
 8006328:	08006719 	.word	0x08006719
 800632c:	08006a43 	.word	0x08006a43
 8006330:	08006a43 	.word	0x08006a43
 8006334:	08006a43 	.word	0x08006a43
 8006338:	08006a43 	.word	0x08006a43
 800633c:	08006a43 	.word	0x08006a43
 8006340:	08006a43 	.word	0x08006a43
 8006344:	08006a43 	.word	0x08006a43
 8006348:	08006a43 	.word	0x08006a43
 800634c:	08006a43 	.word	0x08006a43
 8006350:	08006a43 	.word	0x08006a43
 8006354:	08006a43 	.word	0x08006a43
 8006358:	08006a43 	.word	0x08006a43
 800635c:	08006a43 	.word	0x08006a43
 8006360:	08006a43 	.word	0x08006a43
 8006364:	08006a43 	.word	0x08006a43
 8006368:	0800688b 	.word	0x0800688b
 800636c:	08006a43 	.word	0x08006a43
 8006370:	08006a43 	.word	0x08006a43
 8006374:	08006a43 	.word	0x08006a43
 8006378:	08006a43 	.word	0x08006a43
 800637c:	08006a43 	.word	0x08006a43
 8006380:	08006a43 	.word	0x08006a43
 8006384:	08006a43 	.word	0x08006a43
 8006388:	08006a43 	.word	0x08006a43
 800638c:	08006a43 	.word	0x08006a43
 8006390:	08006a43 	.word	0x08006a43
 8006394:	08006a43 	.word	0x08006a43
 8006398:	08006a43 	.word	0x08006a43
 800639c:	08006a43 	.word	0x08006a43
 80063a0:	08006a43 	.word	0x08006a43
 80063a4:	08006a43 	.word	0x08006a43
 80063a8:	08006a43 	.word	0x08006a43
 80063ac:	08006a43 	.word	0x08006a43
 80063b0:	08006a43 	.word	0x08006a43
 80063b4:	08006a43 	.word	0x08006a43
 80063b8:	08006a43 	.word	0x08006a43
 80063bc:	08006a43 	.word	0x08006a43
 80063c0:	08006a43 	.word	0x08006a43
 80063c4:	08006a43 	.word	0x08006a43
 80063c8:	08006a43 	.word	0x08006a43
 80063cc:	08006a43 	.word	0x08006a43
 80063d0:	08006a43 	.word	0x08006a43
 80063d4:	08006a43 	.word	0x08006a43
 80063d8:	08006a43 	.word	0x08006a43
 80063dc:	08006a43 	.word	0x08006a43
 80063e0:	08006a43 	.word	0x08006a43
 80063e4:	08006a43 	.word	0x08006a43
 80063e8:	08006981 	.word	0x08006981
 80063ec:	f3af 8000 	nop.w
 80063f0:	05161500 	.word	0x05161500
 80063f4:	00000000 	.word	0x00000000
 80063f8:	0a2c2a00 	.word	0x0a2c2a00
 80063fc:	00000000 	.word	0x00000000
 8006400:	003d0900 	.word	0x003d0900
 8006404:	3d090000 	.word	0x3d090000
 8006408:	007a1200 	.word	0x007a1200
 800640c:	00f42400 	.word	0x00f42400
 8006410:	01e84800 	.word	0x01e84800
 8006414:	03d09000 	.word	0x03d09000
 8006418:	061a8000 	.word	0x061a8000
 800641c:	07a12000 	.word	0x07a12000
 8006420:	0f424000 	.word	0x0f424000
 8006424:	1e848000 	.word	0x1e848000
 8006428:	000aaa00 	.word	0x000aaa00
 800642c:	000ccc00 	.word	0x000ccc00
 8006430:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006434:	f7fc f906 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8006438:	4602      	mov	r2, r0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d044      	beq.n	80064cc <UART_SetConfig+0x15d4>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b01      	cmp	r3, #1
 8006448:	d03e      	beq.n	80064c8 <UART_SetConfig+0x15d0>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b02      	cmp	r3, #2
 8006450:	d038      	beq.n	80064c4 <UART_SetConfig+0x15cc>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	2b03      	cmp	r3, #3
 8006458:	d032      	beq.n	80064c0 <UART_SetConfig+0x15c8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b04      	cmp	r3, #4
 8006460:	d02c      	beq.n	80064bc <UART_SetConfig+0x15c4>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	2b05      	cmp	r3, #5
 8006468:	d026      	beq.n	80064b8 <UART_SetConfig+0x15c0>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	2b06      	cmp	r3, #6
 8006470:	d020      	beq.n	80064b4 <UART_SetConfig+0x15bc>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2b07      	cmp	r3, #7
 8006478:	d01a      	beq.n	80064b0 <UART_SetConfig+0x15b8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	2b08      	cmp	r3, #8
 8006480:	d014      	beq.n	80064ac <UART_SetConfig+0x15b4>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	2b09      	cmp	r3, #9
 8006488:	d00e      	beq.n	80064a8 <UART_SetConfig+0x15b0>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b0a      	cmp	r3, #10
 8006490:	d008      	beq.n	80064a4 <UART_SetConfig+0x15ac>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	2b0b      	cmp	r3, #11
 8006498:	d102      	bne.n	80064a0 <UART_SetConfig+0x15a8>
 800649a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800649e:	e016      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e014      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	e012      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	e010      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064ac:	2320      	movs	r3, #32
 80064ae:	e00e      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064b0:	2310      	movs	r3, #16
 80064b2:	e00c      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064b4:	230c      	movs	r3, #12
 80064b6:	e00a      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064b8:	230a      	movs	r3, #10
 80064ba:	e008      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064bc:	2308      	movs	r3, #8
 80064be:	e006      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064c0:	2306      	movs	r3, #6
 80064c2:	e004      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064c4:	2304      	movs	r3, #4
 80064c6:	e002      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e000      	b.n	80064ce <UART_SetConfig+0x15d6>
 80064cc:	2301      	movs	r3, #1
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	005a      	lsls	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	441a      	add	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064e8:	e2af      	b.n	8006a4a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ea:	f7fc f8c1 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 80064ee:	4602      	mov	r2, r0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d044      	beq.n	8006582 <UART_SetConfig+0x168a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d03e      	beq.n	800657e <UART_SetConfig+0x1686>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b02      	cmp	r3, #2
 8006506:	d038      	beq.n	800657a <UART_SetConfig+0x1682>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b03      	cmp	r3, #3
 800650e:	d032      	beq.n	8006576 <UART_SetConfig+0x167e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b04      	cmp	r3, #4
 8006516:	d02c      	beq.n	8006572 <UART_SetConfig+0x167a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b05      	cmp	r3, #5
 800651e:	d026      	beq.n	800656e <UART_SetConfig+0x1676>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2b06      	cmp	r3, #6
 8006526:	d020      	beq.n	800656a <UART_SetConfig+0x1672>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2b07      	cmp	r3, #7
 800652e:	d01a      	beq.n	8006566 <UART_SetConfig+0x166e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b08      	cmp	r3, #8
 8006536:	d014      	beq.n	8006562 <UART_SetConfig+0x166a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b09      	cmp	r3, #9
 800653e:	d00e      	beq.n	800655e <UART_SetConfig+0x1666>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b0a      	cmp	r3, #10
 8006546:	d008      	beq.n	800655a <UART_SetConfig+0x1662>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b0b      	cmp	r3, #11
 800654e:	d102      	bne.n	8006556 <UART_SetConfig+0x165e>
 8006550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006554:	e016      	b.n	8006584 <UART_SetConfig+0x168c>
 8006556:	2301      	movs	r3, #1
 8006558:	e014      	b.n	8006584 <UART_SetConfig+0x168c>
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	e012      	b.n	8006584 <UART_SetConfig+0x168c>
 800655e:	2340      	movs	r3, #64	; 0x40
 8006560:	e010      	b.n	8006584 <UART_SetConfig+0x168c>
 8006562:	2320      	movs	r3, #32
 8006564:	e00e      	b.n	8006584 <UART_SetConfig+0x168c>
 8006566:	2310      	movs	r3, #16
 8006568:	e00c      	b.n	8006584 <UART_SetConfig+0x168c>
 800656a:	230c      	movs	r3, #12
 800656c:	e00a      	b.n	8006584 <UART_SetConfig+0x168c>
 800656e:	230a      	movs	r3, #10
 8006570:	e008      	b.n	8006584 <UART_SetConfig+0x168c>
 8006572:	2308      	movs	r3, #8
 8006574:	e006      	b.n	8006584 <UART_SetConfig+0x168c>
 8006576:	2306      	movs	r3, #6
 8006578:	e004      	b.n	8006584 <UART_SetConfig+0x168c>
 800657a:	2304      	movs	r3, #4
 800657c:	e002      	b.n	8006584 <UART_SetConfig+0x168c>
 800657e:	2302      	movs	r3, #2
 8006580:	e000      	b.n	8006584 <UART_SetConfig+0x168c>
 8006582:	2301      	movs	r3, #1
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	005a      	lsls	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800659e:	e254      	b.n	8006a4a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065a0:	f107 0314 	add.w	r3, r7, #20
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fc ff7f 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d044      	beq.n	800663e <UART_SetConfig+0x1746>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d03e      	beq.n	800663a <UART_SetConfig+0x1742>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d038      	beq.n	8006636 <UART_SetConfig+0x173e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d032      	beq.n	8006632 <UART_SetConfig+0x173a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d02c      	beq.n	800662e <UART_SetConfig+0x1736>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d026      	beq.n	800662a <UART_SetConfig+0x1732>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	d020      	beq.n	8006626 <UART_SetConfig+0x172e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	2b07      	cmp	r3, #7
 80065ea:	d01a      	beq.n	8006622 <UART_SetConfig+0x172a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d014      	beq.n	800661e <UART_SetConfig+0x1726>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b09      	cmp	r3, #9
 80065fa:	d00e      	beq.n	800661a <UART_SetConfig+0x1722>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b0a      	cmp	r3, #10
 8006602:	d008      	beq.n	8006616 <UART_SetConfig+0x171e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b0b      	cmp	r3, #11
 800660a:	d102      	bne.n	8006612 <UART_SetConfig+0x171a>
 800660c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006610:	e016      	b.n	8006640 <UART_SetConfig+0x1748>
 8006612:	2301      	movs	r3, #1
 8006614:	e014      	b.n	8006640 <UART_SetConfig+0x1748>
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	e012      	b.n	8006640 <UART_SetConfig+0x1748>
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	e010      	b.n	8006640 <UART_SetConfig+0x1748>
 800661e:	2320      	movs	r3, #32
 8006620:	e00e      	b.n	8006640 <UART_SetConfig+0x1748>
 8006622:	2310      	movs	r3, #16
 8006624:	e00c      	b.n	8006640 <UART_SetConfig+0x1748>
 8006626:	230c      	movs	r3, #12
 8006628:	e00a      	b.n	8006640 <UART_SetConfig+0x1748>
 800662a:	230a      	movs	r3, #10
 800662c:	e008      	b.n	8006640 <UART_SetConfig+0x1748>
 800662e:	2308      	movs	r3, #8
 8006630:	e006      	b.n	8006640 <UART_SetConfig+0x1748>
 8006632:	2306      	movs	r3, #6
 8006634:	e004      	b.n	8006640 <UART_SetConfig+0x1748>
 8006636:	2304      	movs	r3, #4
 8006638:	e002      	b.n	8006640 <UART_SetConfig+0x1748>
 800663a:	2302      	movs	r3, #2
 800663c:	e000      	b.n	8006640 <UART_SetConfig+0x1748>
 800663e:	2301      	movs	r3, #1
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	005a      	lsls	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	fbb2 f3f3 	udiv	r3, r2, r3
 8006656:	b29b      	uxth	r3, r3
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800665a:	e1f6      	b.n	8006a4a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800665c:	f107 0308 	add.w	r3, r7, #8
 8006660:	4618      	mov	r0, r3
 8006662:	f7fd f86d 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d044      	beq.n	80066fa <UART_SetConfig+0x1802>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	2b01      	cmp	r3, #1
 8006676:	d03e      	beq.n	80066f6 <UART_SetConfig+0x17fe>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b02      	cmp	r3, #2
 800667e:	d038      	beq.n	80066f2 <UART_SetConfig+0x17fa>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	2b03      	cmp	r3, #3
 8006686:	d032      	beq.n	80066ee <UART_SetConfig+0x17f6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	2b04      	cmp	r3, #4
 800668e:	d02c      	beq.n	80066ea <UART_SetConfig+0x17f2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	2b05      	cmp	r3, #5
 8006696:	d026      	beq.n	80066e6 <UART_SetConfig+0x17ee>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2b06      	cmp	r3, #6
 800669e:	d020      	beq.n	80066e2 <UART_SetConfig+0x17ea>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	2b07      	cmp	r3, #7
 80066a6:	d01a      	beq.n	80066de <UART_SetConfig+0x17e6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d014      	beq.n	80066da <UART_SetConfig+0x17e2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d00e      	beq.n	80066d6 <UART_SetConfig+0x17de>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	2b0a      	cmp	r3, #10
 80066be:	d008      	beq.n	80066d2 <UART_SetConfig+0x17da>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	2b0b      	cmp	r3, #11
 80066c6:	d102      	bne.n	80066ce <UART_SetConfig+0x17d6>
 80066c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066cc:	e016      	b.n	80066fc <UART_SetConfig+0x1804>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e014      	b.n	80066fc <UART_SetConfig+0x1804>
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	e012      	b.n	80066fc <UART_SetConfig+0x1804>
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	e010      	b.n	80066fc <UART_SetConfig+0x1804>
 80066da:	2320      	movs	r3, #32
 80066dc:	e00e      	b.n	80066fc <UART_SetConfig+0x1804>
 80066de:	2310      	movs	r3, #16
 80066e0:	e00c      	b.n	80066fc <UART_SetConfig+0x1804>
 80066e2:	230c      	movs	r3, #12
 80066e4:	e00a      	b.n	80066fc <UART_SetConfig+0x1804>
 80066e6:	230a      	movs	r3, #10
 80066e8:	e008      	b.n	80066fc <UART_SetConfig+0x1804>
 80066ea:	2308      	movs	r3, #8
 80066ec:	e006      	b.n	80066fc <UART_SetConfig+0x1804>
 80066ee:	2306      	movs	r3, #6
 80066f0:	e004      	b.n	80066fc <UART_SetConfig+0x1804>
 80066f2:	2304      	movs	r3, #4
 80066f4:	e002      	b.n	80066fc <UART_SetConfig+0x1804>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e000      	b.n	80066fc <UART_SetConfig+0x1804>
 80066fa:	2301      	movs	r3, #1
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	b29b      	uxth	r3, r3
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006716:	e198      	b.n	8006a4a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006718:	4b87      	ldr	r3, [pc, #540]	; (8006938 <UART_SetConfig+0x1a40>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d05e      	beq.n	80067e2 <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006724:	4b84      	ldr	r3, [pc, #528]	; (8006938 <UART_SetConfig+0x1a40>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	4a83      	ldr	r2, [pc, #524]	; (800693c <UART_SetConfig+0x1a44>)
 8006730:	40da      	lsrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d044      	beq.n	80067c4 <UART_SetConfig+0x18cc>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b01      	cmp	r3, #1
 8006740:	d03e      	beq.n	80067c0 <UART_SetConfig+0x18c8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2b02      	cmp	r3, #2
 8006748:	d038      	beq.n	80067bc <UART_SetConfig+0x18c4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	2b03      	cmp	r3, #3
 8006750:	d032      	beq.n	80067b8 <UART_SetConfig+0x18c0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	2b04      	cmp	r3, #4
 8006758:	d02c      	beq.n	80067b4 <UART_SetConfig+0x18bc>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b05      	cmp	r3, #5
 8006760:	d026      	beq.n	80067b0 <UART_SetConfig+0x18b8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	2b06      	cmp	r3, #6
 8006768:	d020      	beq.n	80067ac <UART_SetConfig+0x18b4>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b07      	cmp	r3, #7
 8006770:	d01a      	beq.n	80067a8 <UART_SetConfig+0x18b0>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	2b08      	cmp	r3, #8
 8006778:	d014      	beq.n	80067a4 <UART_SetConfig+0x18ac>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	2b09      	cmp	r3, #9
 8006780:	d00e      	beq.n	80067a0 <UART_SetConfig+0x18a8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b0a      	cmp	r3, #10
 8006788:	d008      	beq.n	800679c <UART_SetConfig+0x18a4>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	2b0b      	cmp	r3, #11
 8006790:	d102      	bne.n	8006798 <UART_SetConfig+0x18a0>
 8006792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006796:	e016      	b.n	80067c6 <UART_SetConfig+0x18ce>
 8006798:	2301      	movs	r3, #1
 800679a:	e014      	b.n	80067c6 <UART_SetConfig+0x18ce>
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	e012      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	e010      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067a4:	2320      	movs	r3, #32
 80067a6:	e00e      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067a8:	2310      	movs	r3, #16
 80067aa:	e00c      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067ac:	230c      	movs	r3, #12
 80067ae:	e00a      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067b0:	230a      	movs	r3, #10
 80067b2:	e008      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067b4:	2308      	movs	r3, #8
 80067b6:	e006      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067b8:	2306      	movs	r3, #6
 80067ba:	e004      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067bc:	2304      	movs	r3, #4
 80067be:	e002      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e000      	b.n	80067c6 <UART_SetConfig+0x18ce>
 80067c4:	2301      	movs	r3, #1
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	005a      	lsls	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	441a      	add	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	b29b      	uxth	r3, r3
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80067e0:	e133      	b.n	8006a4a <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d043      	beq.n	8006872 <UART_SetConfig+0x197a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d03d      	beq.n	800686e <UART_SetConfig+0x1976>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d037      	beq.n	800686a <UART_SetConfig+0x1972>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d031      	beq.n	8006866 <UART_SetConfig+0x196e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b04      	cmp	r3, #4
 8006808:	d02b      	beq.n	8006862 <UART_SetConfig+0x196a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b05      	cmp	r3, #5
 8006810:	d025      	beq.n	800685e <UART_SetConfig+0x1966>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b06      	cmp	r3, #6
 8006818:	d01f      	beq.n	800685a <UART_SetConfig+0x1962>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b07      	cmp	r3, #7
 8006820:	d019      	beq.n	8006856 <UART_SetConfig+0x195e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b08      	cmp	r3, #8
 8006828:	d013      	beq.n	8006852 <UART_SetConfig+0x195a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b09      	cmp	r3, #9
 8006830:	d00d      	beq.n	800684e <UART_SetConfig+0x1956>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b0a      	cmp	r3, #10
 8006838:	d007      	beq.n	800684a <UART_SetConfig+0x1952>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b0b      	cmp	r3, #11
 8006840:	d101      	bne.n	8006846 <UART_SetConfig+0x194e>
 8006842:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <UART_SetConfig+0x1a48>)
 8006844:	e016      	b.n	8006874 <UART_SetConfig+0x197c>
 8006846:	4b3f      	ldr	r3, [pc, #252]	; (8006944 <UART_SetConfig+0x1a4c>)
 8006848:	e014      	b.n	8006874 <UART_SetConfig+0x197c>
 800684a:	4b3f      	ldr	r3, [pc, #252]	; (8006948 <UART_SetConfig+0x1a50>)
 800684c:	e012      	b.n	8006874 <UART_SetConfig+0x197c>
 800684e:	4b3f      	ldr	r3, [pc, #252]	; (800694c <UART_SetConfig+0x1a54>)
 8006850:	e010      	b.n	8006874 <UART_SetConfig+0x197c>
 8006852:	4b3f      	ldr	r3, [pc, #252]	; (8006950 <UART_SetConfig+0x1a58>)
 8006854:	e00e      	b.n	8006874 <UART_SetConfig+0x197c>
 8006856:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <UART_SetConfig+0x1a5c>)
 8006858:	e00c      	b.n	8006874 <UART_SetConfig+0x197c>
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <UART_SetConfig+0x1a60>)
 800685c:	e00a      	b.n	8006874 <UART_SetConfig+0x197c>
 800685e:	4b3f      	ldr	r3, [pc, #252]	; (800695c <UART_SetConfig+0x1a64>)
 8006860:	e008      	b.n	8006874 <UART_SetConfig+0x197c>
 8006862:	4b3f      	ldr	r3, [pc, #252]	; (8006960 <UART_SetConfig+0x1a68>)
 8006864:	e006      	b.n	8006874 <UART_SetConfig+0x197c>
 8006866:	4b3f      	ldr	r3, [pc, #252]	; (8006964 <UART_SetConfig+0x1a6c>)
 8006868:	e004      	b.n	8006874 <UART_SetConfig+0x197c>
 800686a:	4b3f      	ldr	r3, [pc, #252]	; (8006968 <UART_SetConfig+0x1a70>)
 800686c:	e002      	b.n	8006874 <UART_SetConfig+0x197c>
 800686e:	4b33      	ldr	r3, [pc, #204]	; (800693c <UART_SetConfig+0x1a44>)
 8006870:	e000      	b.n	8006874 <UART_SetConfig+0x197c>
 8006872:	4b34      	ldr	r3, [pc, #208]	; (8006944 <UART_SetConfig+0x1a4c>)
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6852      	ldr	r2, [r2, #4]
 8006878:	0852      	lsrs	r2, r2, #1
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	b29b      	uxth	r3, r3
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006888:	e0df      	b.n	8006a4a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d045      	beq.n	800691e <UART_SetConfig+0x1a26>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	2b01      	cmp	r3, #1
 8006898:	d03f      	beq.n	800691a <UART_SetConfig+0x1a22>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d039      	beq.n	8006916 <UART_SetConfig+0x1a1e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d033      	beq.n	8006912 <UART_SetConfig+0x1a1a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d02d      	beq.n	800690e <UART_SetConfig+0x1a16>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b05      	cmp	r3, #5
 80068b8:	d027      	beq.n	800690a <UART_SetConfig+0x1a12>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d021      	beq.n	8006906 <UART_SetConfig+0x1a0e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b07      	cmp	r3, #7
 80068c8:	d01b      	beq.n	8006902 <UART_SetConfig+0x1a0a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d015      	beq.n	80068fe <UART_SetConfig+0x1a06>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	2b09      	cmp	r3, #9
 80068d8:	d00f      	beq.n	80068fa <UART_SetConfig+0x1a02>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2b0a      	cmp	r3, #10
 80068e0:	d008      	beq.n	80068f4 <UART_SetConfig+0x19fc>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b0b      	cmp	r3, #11
 80068e8:	d102      	bne.n	80068f0 <UART_SetConfig+0x19f8>
 80068ea:	f647 2312 	movw	r3, #31250	; 0x7a12
 80068ee:	e017      	b.n	8006920 <UART_SetConfig+0x1a28>
 80068f0:	4b18      	ldr	r3, [pc, #96]	; (8006954 <UART_SetConfig+0x1a5c>)
 80068f2:	e015      	b.n	8006920 <UART_SetConfig+0x1a28>
 80068f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80068f8:	e012      	b.n	8006920 <UART_SetConfig+0x1a28>
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <UART_SetConfig+0x1a74>)
 80068fc:	e010      	b.n	8006920 <UART_SetConfig+0x1a28>
 80068fe:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <UART_SetConfig+0x1a78>)
 8006900:	e00e      	b.n	8006920 <UART_SetConfig+0x1a28>
 8006902:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <UART_SetConfig+0x1a48>)
 8006904:	e00c      	b.n	8006920 <UART_SetConfig+0x1a28>
 8006906:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <UART_SetConfig+0x1a7c>)
 8006908:	e00a      	b.n	8006920 <UART_SetConfig+0x1a28>
 800690a:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <UART_SetConfig+0x1a80>)
 800690c:	e008      	b.n	8006920 <UART_SetConfig+0x1a28>
 800690e:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <UART_SetConfig+0x1a50>)
 8006910:	e006      	b.n	8006920 <UART_SetConfig+0x1a28>
 8006912:	4b1a      	ldr	r3, [pc, #104]	; (800697c <UART_SetConfig+0x1a84>)
 8006914:	e004      	b.n	8006920 <UART_SetConfig+0x1a28>
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <UART_SetConfig+0x1a54>)
 8006918:	e002      	b.n	8006920 <UART_SetConfig+0x1a28>
 800691a:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <UART_SetConfig+0x1a58>)
 800691c:	e000      	b.n	8006920 <UART_SetConfig+0x1a28>
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <UART_SetConfig+0x1a5c>)
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	0852      	lsrs	r2, r2, #1
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006934:	e089      	b.n	8006a4a <UART_SetConfig+0x1b52>
 8006936:	bf00      	nop
 8006938:	58024400 	.word	0x58024400
 800693c:	03d09000 	.word	0x03d09000
 8006940:	0007a120 	.word	0x0007a120
 8006944:	07a12000 	.word	0x07a12000
 8006948:	000f4240 	.word	0x000f4240
 800694c:	001e8480 	.word	0x001e8480
 8006950:	003d0900 	.word	0x003d0900
 8006954:	007a1200 	.word	0x007a1200
 8006958:	00a2c2aa 	.word	0x00a2c2aa
 800695c:	00c35000 	.word	0x00c35000
 8006960:	00f42400 	.word	0x00f42400
 8006964:	01458554 	.word	0x01458554
 8006968:	01e84800 	.word	0x01e84800
 800696c:	0001e848 	.word	0x0001e848
 8006970:	0003d090 	.word	0x0003d090
 8006974:	000a2c2a 	.word	0x000a2c2a
 8006978:	000c3500 	.word	0x000c3500
 800697c:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d04f      	beq.n	8006a28 <UART_SetConfig+0x1b30>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	2b01      	cmp	r3, #1
 800698e:	d048      	beq.n	8006a22 <UART_SetConfig+0x1b2a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b02      	cmp	r3, #2
 8006996:	d041      	beq.n	8006a1c <UART_SetConfig+0x1b24>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b03      	cmp	r3, #3
 800699e:	d03a      	beq.n	8006a16 <UART_SetConfig+0x1b1e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d033      	beq.n	8006a10 <UART_SetConfig+0x1b18>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b05      	cmp	r3, #5
 80069ae:	d02c      	beq.n	8006a0a <UART_SetConfig+0x1b12>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b06      	cmp	r3, #6
 80069b6:	d025      	beq.n	8006a04 <UART_SetConfig+0x1b0c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	2b07      	cmp	r3, #7
 80069be:	d01e      	beq.n	80069fe <UART_SetConfig+0x1b06>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d017      	beq.n	80069f8 <UART_SetConfig+0x1b00>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b09      	cmp	r3, #9
 80069ce:	d010      	beq.n	80069f2 <UART_SetConfig+0x1afa>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	2b0a      	cmp	r3, #10
 80069d6:	d009      	beq.n	80069ec <UART_SetConfig+0x1af4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	2b0b      	cmp	r3, #11
 80069de:	d102      	bne.n	80069e6 <UART_SetConfig+0x1aee>
 80069e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e4:	e022      	b.n	8006a2c <UART_SetConfig+0x1b34>
 80069e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069ea:	e01f      	b.n	8006a2c <UART_SetConfig+0x1b34>
 80069ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f0:	e01c      	b.n	8006a2c <UART_SetConfig+0x1b34>
 80069f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f6:	e019      	b.n	8006a2c <UART_SetConfig+0x1b34>
 80069f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069fc:	e016      	b.n	8006a2c <UART_SetConfig+0x1b34>
 80069fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a02:	e013      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a04:	f241 5354 	movw	r3, #5460	; 0x1554
 8006a08:	e010      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a0a:	f641 1398 	movw	r3, #6552	; 0x1998
 8006a0e:	e00d      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a14:	e00a      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a16:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006a1a:	e007      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a20:	e004      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a26:	e001      	b.n	8006a2c <UART_SetConfig+0x1b34>
 8006a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6852      	ldr	r2, [r2, #4]
 8006a30:	0852      	lsrs	r2, r2, #1
 8006a32:	441a      	add	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a40:	e003      	b.n	8006a4a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	2b0f      	cmp	r3, #15
 8006a4e:	d916      	bls.n	8006a7e <UART_SetConfig+0x1b86>
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a56:	d212      	bcs.n	8006a7e <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f023 030f 	bic.w	r3, r3, #15
 8006a60:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a70:	4313      	orrs	r3, r2
 8006a72:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e3a1      	b.n	80071c2 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a84:	e39d      	b.n	80071c2 <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 8006a86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a8a:	2b40      	cmp	r3, #64	; 0x40
 8006a8c:	f200 8386 	bhi.w	800719c <UART_SetConfig+0x22a4>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x1ba0>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006b9d 	.word	0x08006b9d
 8006a9c:	08006c51 	.word	0x08006c51
 8006aa0:	0800719d 	.word	0x0800719d
 8006aa4:	0800719d 	.word	0x0800719d
 8006aa8:	08006d05 	.word	0x08006d05
 8006aac:	0800719d 	.word	0x0800719d
 8006ab0:	0800719d 	.word	0x0800719d
 8006ab4:	0800719d 	.word	0x0800719d
 8006ab8:	08006dbf 	.word	0x08006dbf
 8006abc:	0800719d 	.word	0x0800719d
 8006ac0:	0800719d 	.word	0x0800719d
 8006ac4:	0800719d 	.word	0x0800719d
 8006ac8:	0800719d 	.word	0x0800719d
 8006acc:	0800719d 	.word	0x0800719d
 8006ad0:	0800719d 	.word	0x0800719d
 8006ad4:	0800719d 	.word	0x0800719d
 8006ad8:	08006e79 	.word	0x08006e79
 8006adc:	0800719d 	.word	0x0800719d
 8006ae0:	0800719d 	.word	0x0800719d
 8006ae4:	0800719d 	.word	0x0800719d
 8006ae8:	0800719d 	.word	0x0800719d
 8006aec:	0800719d 	.word	0x0800719d
 8006af0:	0800719d 	.word	0x0800719d
 8006af4:	0800719d 	.word	0x0800719d
 8006af8:	0800719d 	.word	0x0800719d
 8006afc:	0800719d 	.word	0x0800719d
 8006b00:	0800719d 	.word	0x0800719d
 8006b04:	0800719d 	.word	0x0800719d
 8006b08:	0800719d 	.word	0x0800719d
 8006b0c:	0800719d 	.word	0x0800719d
 8006b10:	0800719d 	.word	0x0800719d
 8006b14:	0800719d 	.word	0x0800719d
 8006b18:	08006fe9 	.word	0x08006fe9
 8006b1c:	0800719d 	.word	0x0800719d
 8006b20:	0800719d 	.word	0x0800719d
 8006b24:	0800719d 	.word	0x0800719d
 8006b28:	0800719d 	.word	0x0800719d
 8006b2c:	0800719d 	.word	0x0800719d
 8006b30:	0800719d 	.word	0x0800719d
 8006b34:	0800719d 	.word	0x0800719d
 8006b38:	0800719d 	.word	0x0800719d
 8006b3c:	0800719d 	.word	0x0800719d
 8006b40:	0800719d 	.word	0x0800719d
 8006b44:	0800719d 	.word	0x0800719d
 8006b48:	0800719d 	.word	0x0800719d
 8006b4c:	0800719d 	.word	0x0800719d
 8006b50:	0800719d 	.word	0x0800719d
 8006b54:	0800719d 	.word	0x0800719d
 8006b58:	0800719d 	.word	0x0800719d
 8006b5c:	0800719d 	.word	0x0800719d
 8006b60:	0800719d 	.word	0x0800719d
 8006b64:	0800719d 	.word	0x0800719d
 8006b68:	0800719d 	.word	0x0800719d
 8006b6c:	0800719d 	.word	0x0800719d
 8006b70:	0800719d 	.word	0x0800719d
 8006b74:	0800719d 	.word	0x0800719d
 8006b78:	0800719d 	.word	0x0800719d
 8006b7c:	0800719d 	.word	0x0800719d
 8006b80:	0800719d 	.word	0x0800719d
 8006b84:	0800719d 	.word	0x0800719d
 8006b88:	0800719d 	.word	0x0800719d
 8006b8c:	0800719d 	.word	0x0800719d
 8006b90:	0800719d 	.word	0x0800719d
 8006b94:	0800719d 	.word	0x0800719d
 8006b98:	080070dd 	.word	0x080070dd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9c:	f7fb fd52 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d044      	beq.n	8006c34 <UART_SetConfig+0x1d3c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d03e      	beq.n	8006c30 <UART_SetConfig+0x1d38>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d038      	beq.n	8006c2c <UART_SetConfig+0x1d34>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d032      	beq.n	8006c28 <UART_SetConfig+0x1d30>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d02c      	beq.n	8006c24 <UART_SetConfig+0x1d2c>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d026      	beq.n	8006c20 <UART_SetConfig+0x1d28>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d020      	beq.n	8006c1c <UART_SetConfig+0x1d24>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	d01a      	beq.n	8006c18 <UART_SetConfig+0x1d20>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d014      	beq.n	8006c14 <UART_SetConfig+0x1d1c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b09      	cmp	r3, #9
 8006bf0:	d00e      	beq.n	8006c10 <UART_SetConfig+0x1d18>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b0a      	cmp	r3, #10
 8006bf8:	d008      	beq.n	8006c0c <UART_SetConfig+0x1d14>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	2b0b      	cmp	r3, #11
 8006c00:	d102      	bne.n	8006c08 <UART_SetConfig+0x1d10>
 8006c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c06:	e016      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e014      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	e012      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	e010      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c14:	2320      	movs	r3, #32
 8006c16:	e00e      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	e00c      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	e00a      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c20:	230a      	movs	r3, #10
 8006c22:	e008      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c24:	2308      	movs	r3, #8
 8006c26:	e006      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c28:	2306      	movs	r3, #6
 8006c2a:	e004      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	e002      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e000      	b.n	8006c36 <UART_SetConfig+0x1d3e>
 8006c34:	2301      	movs	r3, #1
 8006c36:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	441a      	add	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4e:	e2a9      	b.n	80071a4 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c50:	f7fb fd0e 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d044      	beq.n	8006ce8 <UART_SetConfig+0x1df0>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d03e      	beq.n	8006ce4 <UART_SetConfig+0x1dec>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d038      	beq.n	8006ce0 <UART_SetConfig+0x1de8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d032      	beq.n	8006cdc <UART_SetConfig+0x1de4>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d02c      	beq.n	8006cd8 <UART_SetConfig+0x1de0>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d026      	beq.n	8006cd4 <UART_SetConfig+0x1ddc>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	2b06      	cmp	r3, #6
 8006c8c:	d020      	beq.n	8006cd0 <UART_SetConfig+0x1dd8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b07      	cmp	r3, #7
 8006c94:	d01a      	beq.n	8006ccc <UART_SetConfig+0x1dd4>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d014      	beq.n	8006cc8 <UART_SetConfig+0x1dd0>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d00e      	beq.n	8006cc4 <UART_SetConfig+0x1dcc>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b0a      	cmp	r3, #10
 8006cac:	d008      	beq.n	8006cc0 <UART_SetConfig+0x1dc8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	2b0b      	cmp	r3, #11
 8006cb4:	d102      	bne.n	8006cbc <UART_SetConfig+0x1dc4>
 8006cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cba:	e016      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e014      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	e012      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cc4:	2340      	movs	r3, #64	; 0x40
 8006cc6:	e010      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cc8:	2320      	movs	r3, #32
 8006cca:	e00e      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	e00c      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cd0:	230c      	movs	r3, #12
 8006cd2:	e00a      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cd4:	230a      	movs	r3, #10
 8006cd6:	e008      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	e006      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006cdc:	2306      	movs	r3, #6
 8006cde:	e004      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	e002      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e000      	b.n	8006cea <UART_SetConfig+0x1df2>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	085b      	lsrs	r3, r3, #1
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d02:	e24f      	b.n	80071a4 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d04:	f107 0314 	add.w	r3, r7, #20
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fc fbcd 	bl	80034a8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d044      	beq.n	8006da2 <UART_SetConfig+0x1eaa>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d03e      	beq.n	8006d9e <UART_SetConfig+0x1ea6>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d038      	beq.n	8006d9a <UART_SetConfig+0x1ea2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d032      	beq.n	8006d96 <UART_SetConfig+0x1e9e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d02c      	beq.n	8006d92 <UART_SetConfig+0x1e9a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d026      	beq.n	8006d8e <UART_SetConfig+0x1e96>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	2b06      	cmp	r3, #6
 8006d46:	d020      	beq.n	8006d8a <UART_SetConfig+0x1e92>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b07      	cmp	r3, #7
 8006d4e:	d01a      	beq.n	8006d86 <UART_SetConfig+0x1e8e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d014      	beq.n	8006d82 <UART_SetConfig+0x1e8a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	d00e      	beq.n	8006d7e <UART_SetConfig+0x1e86>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b0a      	cmp	r3, #10
 8006d66:	d008      	beq.n	8006d7a <UART_SetConfig+0x1e82>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b0b      	cmp	r3, #11
 8006d6e:	d102      	bne.n	8006d76 <UART_SetConfig+0x1e7e>
 8006d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d74:	e016      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e014      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	e012      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d7e:	2340      	movs	r3, #64	; 0x40
 8006d80:	e010      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d82:	2320      	movs	r3, #32
 8006d84:	e00e      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d86:	2310      	movs	r3, #16
 8006d88:	e00c      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	e00a      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d8e:	230a      	movs	r3, #10
 8006d90:	e008      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d92:	2308      	movs	r3, #8
 8006d94:	e006      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d96:	2306      	movs	r3, #6
 8006d98:	e004      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d9a:	2304      	movs	r3, #4
 8006d9c:	e002      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e000      	b.n	8006da4 <UART_SetConfig+0x1eac>
 8006da2:	2301      	movs	r3, #1
 8006da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	441a      	add	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dbc:	e1f2      	b.n	80071a4 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dbe:	f107 0308 	add.w	r3, r7, #8
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fc fcbc 	bl	8003740 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d044      	beq.n	8006e5c <UART_SetConfig+0x1f64>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d03e      	beq.n	8006e58 <UART_SetConfig+0x1f60>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d038      	beq.n	8006e54 <UART_SetConfig+0x1f5c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d032      	beq.n	8006e50 <UART_SetConfig+0x1f58>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d02c      	beq.n	8006e4c <UART_SetConfig+0x1f54>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d026      	beq.n	8006e48 <UART_SetConfig+0x1f50>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2b06      	cmp	r3, #6
 8006e00:	d020      	beq.n	8006e44 <UART_SetConfig+0x1f4c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b07      	cmp	r3, #7
 8006e08:	d01a      	beq.n	8006e40 <UART_SetConfig+0x1f48>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d014      	beq.n	8006e3c <UART_SetConfig+0x1f44>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	d00e      	beq.n	8006e38 <UART_SetConfig+0x1f40>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b0a      	cmp	r3, #10
 8006e20:	d008      	beq.n	8006e34 <UART_SetConfig+0x1f3c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	2b0b      	cmp	r3, #11
 8006e28:	d102      	bne.n	8006e30 <UART_SetConfig+0x1f38>
 8006e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e2e:	e016      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e014      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	e012      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	e010      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	e00e      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e40:	2310      	movs	r3, #16
 8006e42:	e00c      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e44:	230c      	movs	r3, #12
 8006e46:	e00a      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e48:	230a      	movs	r3, #10
 8006e4a:	e008      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	e006      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e50:	2306      	movs	r3, #6
 8006e52:	e004      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e54:	2304      	movs	r3, #4
 8006e56:	e002      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e000      	b.n	8006e5e <UART_SetConfig+0x1f66>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	441a      	add	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e76:	e195      	b.n	80071a4 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e78:	4b87      	ldr	r3, [pc, #540]	; (8007098 <UART_SetConfig+0x21a0>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05d      	beq.n	8006f40 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e84:	4b84      	ldr	r3, [pc, #528]	; (8007098 <UART_SetConfig+0x21a0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	08db      	lsrs	r3, r3, #3
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	4a83      	ldr	r2, [pc, #524]	; (800709c <UART_SetConfig+0x21a4>)
 8006e90:	40da      	lsrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d044      	beq.n	8006f24 <UART_SetConfig+0x202c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d03e      	beq.n	8006f20 <UART_SetConfig+0x2028>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d038      	beq.n	8006f1c <UART_SetConfig+0x2024>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d032      	beq.n	8006f18 <UART_SetConfig+0x2020>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d02c      	beq.n	8006f14 <UART_SetConfig+0x201c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d026      	beq.n	8006f10 <UART_SetConfig+0x2018>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b06      	cmp	r3, #6
 8006ec8:	d020      	beq.n	8006f0c <UART_SetConfig+0x2014>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b07      	cmp	r3, #7
 8006ed0:	d01a      	beq.n	8006f08 <UART_SetConfig+0x2010>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d014      	beq.n	8006f04 <UART_SetConfig+0x200c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b09      	cmp	r3, #9
 8006ee0:	d00e      	beq.n	8006f00 <UART_SetConfig+0x2008>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b0a      	cmp	r3, #10
 8006ee8:	d008      	beq.n	8006efc <UART_SetConfig+0x2004>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b0b      	cmp	r3, #11
 8006ef0:	d102      	bne.n	8006ef8 <UART_SetConfig+0x2000>
 8006ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ef6:	e016      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e014      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	e012      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f00:	2340      	movs	r3, #64	; 0x40
 8006f02:	e010      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f04:	2320      	movs	r3, #32
 8006f06:	e00e      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	e00c      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f0c:	230c      	movs	r3, #12
 8006f0e:	e00a      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f10:	230a      	movs	r3, #10
 8006f12:	e008      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f14:	2308      	movs	r3, #8
 8006f16:	e006      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f18:	2306      	movs	r3, #6
 8006f1a:	e004      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	e002      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e000      	b.n	8006f26 <UART_SetConfig+0x202e>
 8006f24:	2301      	movs	r3, #1
 8006f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	441a      	add	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006f3e:	e131      	b.n	80071a4 <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d043      	beq.n	8006fd0 <UART_SetConfig+0x20d8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d03d      	beq.n	8006fcc <UART_SetConfig+0x20d4>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d037      	beq.n	8006fc8 <UART_SetConfig+0x20d0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d031      	beq.n	8006fc4 <UART_SetConfig+0x20cc>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d02b      	beq.n	8006fc0 <UART_SetConfig+0x20c8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	2b05      	cmp	r3, #5
 8006f6e:	d025      	beq.n	8006fbc <UART_SetConfig+0x20c4>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b06      	cmp	r3, #6
 8006f76:	d01f      	beq.n	8006fb8 <UART_SetConfig+0x20c0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	2b07      	cmp	r3, #7
 8006f7e:	d019      	beq.n	8006fb4 <UART_SetConfig+0x20bc>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d013      	beq.n	8006fb0 <UART_SetConfig+0x20b8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	2b09      	cmp	r3, #9
 8006f8e:	d00d      	beq.n	8006fac <UART_SetConfig+0x20b4>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b0a      	cmp	r3, #10
 8006f96:	d007      	beq.n	8006fa8 <UART_SetConfig+0x20b0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2b0b      	cmp	r3, #11
 8006f9e:	d101      	bne.n	8006fa4 <UART_SetConfig+0x20ac>
 8006fa0:	4b3f      	ldr	r3, [pc, #252]	; (80070a0 <UART_SetConfig+0x21a8>)
 8006fa2:	e016      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fa4:	4b3d      	ldr	r3, [pc, #244]	; (800709c <UART_SetConfig+0x21a4>)
 8006fa6:	e014      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fa8:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <UART_SetConfig+0x21ac>)
 8006faa:	e012      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fac:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <UART_SetConfig+0x21b0>)
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fb0:	4b3e      	ldr	r3, [pc, #248]	; (80070ac <UART_SetConfig+0x21b4>)
 8006fb2:	e00e      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fb4:	4b3e      	ldr	r3, [pc, #248]	; (80070b0 <UART_SetConfig+0x21b8>)
 8006fb6:	e00c      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fb8:	4b3e      	ldr	r3, [pc, #248]	; (80070b4 <UART_SetConfig+0x21bc>)
 8006fba:	e00a      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fbc:	4b3e      	ldr	r3, [pc, #248]	; (80070b8 <UART_SetConfig+0x21c0>)
 8006fbe:	e008      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fc0:	4b3e      	ldr	r3, [pc, #248]	; (80070bc <UART_SetConfig+0x21c4>)
 8006fc2:	e006      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fc4:	4b3e      	ldr	r3, [pc, #248]	; (80070c0 <UART_SetConfig+0x21c8>)
 8006fc6:	e004      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fc8:	4b3e      	ldr	r3, [pc, #248]	; (80070c4 <UART_SetConfig+0x21cc>)
 8006fca:	e002      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fcc:	4b3e      	ldr	r3, [pc, #248]	; (80070c8 <UART_SetConfig+0x21d0>)
 8006fce:	e000      	b.n	8006fd2 <UART_SetConfig+0x20da>
 8006fd0:	4b32      	ldr	r3, [pc, #200]	; (800709c <UART_SetConfig+0x21a4>)
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6852      	ldr	r2, [r2, #4]
 8006fd6:	0852      	lsrs	r2, r2, #1
 8006fd8:	441a      	add	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fe6:	e0dd      	b.n	80071a4 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d046      	beq.n	800707e <UART_SetConfig+0x2186>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d040      	beq.n	800707a <UART_SetConfig+0x2182>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d03a      	beq.n	8007076 <UART_SetConfig+0x217e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2b03      	cmp	r3, #3
 8007006:	d034      	beq.n	8007072 <UART_SetConfig+0x217a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2b04      	cmp	r3, #4
 800700e:	d02e      	beq.n	800706e <UART_SetConfig+0x2176>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	2b05      	cmp	r3, #5
 8007016:	d028      	beq.n	800706a <UART_SetConfig+0x2172>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	2b06      	cmp	r3, #6
 800701e:	d022      	beq.n	8007066 <UART_SetConfig+0x216e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	2b07      	cmp	r3, #7
 8007026:	d01c      	beq.n	8007062 <UART_SetConfig+0x216a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	2b08      	cmp	r3, #8
 800702e:	d016      	beq.n	800705e <UART_SetConfig+0x2166>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	2b09      	cmp	r3, #9
 8007036:	d00f      	beq.n	8007058 <UART_SetConfig+0x2160>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b0a      	cmp	r3, #10
 800703e:	d008      	beq.n	8007052 <UART_SetConfig+0x215a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	2b0b      	cmp	r3, #11
 8007046:	d102      	bne.n	800704e <UART_SetConfig+0x2156>
 8007048:	f643 5309 	movw	r3, #15625	; 0x3d09
 800704c:	e018      	b.n	8007080 <UART_SetConfig+0x2188>
 800704e:	4b18      	ldr	r3, [pc, #96]	; (80070b0 <UART_SetConfig+0x21b8>)
 8007050:	e016      	b.n	8007080 <UART_SetConfig+0x2188>
 8007052:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007056:	e013      	b.n	8007080 <UART_SetConfig+0x2188>
 8007058:	f24f 4324 	movw	r3, #62500	; 0xf424
 800705c:	e010      	b.n	8007080 <UART_SetConfig+0x2188>
 800705e:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <UART_SetConfig+0x21d4>)
 8007060:	e00e      	b.n	8007080 <UART_SetConfig+0x2188>
 8007062:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <UART_SetConfig+0x21a8>)
 8007064:	e00c      	b.n	8007080 <UART_SetConfig+0x2188>
 8007066:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <UART_SetConfig+0x21d8>)
 8007068:	e00a      	b.n	8007080 <UART_SetConfig+0x2188>
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <UART_SetConfig+0x21dc>)
 800706c:	e008      	b.n	8007080 <UART_SetConfig+0x2188>
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <UART_SetConfig+0x21ac>)
 8007070:	e006      	b.n	8007080 <UART_SetConfig+0x2188>
 8007072:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <UART_SetConfig+0x21e0>)
 8007074:	e004      	b.n	8007080 <UART_SetConfig+0x2188>
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <UART_SetConfig+0x21b0>)
 8007078:	e002      	b.n	8007080 <UART_SetConfig+0x2188>
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <UART_SetConfig+0x21b4>)
 800707c:	e000      	b.n	8007080 <UART_SetConfig+0x2188>
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <UART_SetConfig+0x21b8>)
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6852      	ldr	r2, [r2, #4]
 8007084:	0852      	lsrs	r2, r2, #1
 8007086:	441a      	add	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	b29b      	uxth	r3, r3
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007094:	e086      	b.n	80071a4 <UART_SetConfig+0x22ac>
 8007096:	bf00      	nop
 8007098:	58024400 	.word	0x58024400
 800709c:	03d09000 	.word	0x03d09000
 80070a0:	0003d090 	.word	0x0003d090
 80070a4:	0007a120 	.word	0x0007a120
 80070a8:	000f4240 	.word	0x000f4240
 80070ac:	001e8480 	.word	0x001e8480
 80070b0:	003d0900 	.word	0x003d0900
 80070b4:	00516155 	.word	0x00516155
 80070b8:	0061a800 	.word	0x0061a800
 80070bc:	007a1200 	.word	0x007a1200
 80070c0:	00a2c2aa 	.word	0x00a2c2aa
 80070c4:	00f42400 	.word	0x00f42400
 80070c8:	01e84800 	.word	0x01e84800
 80070cc:	0001e848 	.word	0x0001e848
 80070d0:	00051615 	.word	0x00051615
 80070d4:	00061a80 	.word	0x00061a80
 80070d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d04e      	beq.n	8007182 <UART_SetConfig+0x228a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d047      	beq.n	800717c <UART_SetConfig+0x2284>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d040      	beq.n	8007176 <UART_SetConfig+0x227e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d039      	beq.n	8007170 <UART_SetConfig+0x2278>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b04      	cmp	r3, #4
 8007102:	d032      	beq.n	800716a <UART_SetConfig+0x2272>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b05      	cmp	r3, #5
 800710a:	d02b      	beq.n	8007164 <UART_SetConfig+0x226c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b06      	cmp	r3, #6
 8007112:	d024      	beq.n	800715e <UART_SetConfig+0x2266>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b07      	cmp	r3, #7
 800711a:	d01d      	beq.n	8007158 <UART_SetConfig+0x2260>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b08      	cmp	r3, #8
 8007122:	d016      	beq.n	8007152 <UART_SetConfig+0x225a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b09      	cmp	r3, #9
 800712a:	d00f      	beq.n	800714c <UART_SetConfig+0x2254>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b0a      	cmp	r3, #10
 8007132:	d008      	beq.n	8007146 <UART_SetConfig+0x224e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b0b      	cmp	r3, #11
 800713a:	d101      	bne.n	8007140 <UART_SetConfig+0x2248>
 800713c:	2380      	movs	r3, #128	; 0x80
 800713e:	e022      	b.n	8007186 <UART_SetConfig+0x228e>
 8007140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007144:	e01f      	b.n	8007186 <UART_SetConfig+0x228e>
 8007146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800714a:	e01c      	b.n	8007186 <UART_SetConfig+0x228e>
 800714c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007150:	e019      	b.n	8007186 <UART_SetConfig+0x228e>
 8007152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007156:	e016      	b.n	8007186 <UART_SetConfig+0x228e>
 8007158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800715c:	e013      	b.n	8007186 <UART_SetConfig+0x228e>
 800715e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007162:	e010      	b.n	8007186 <UART_SetConfig+0x228e>
 8007164:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007168:	e00d      	b.n	8007186 <UART_SetConfig+0x228e>
 800716a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716e:	e00a      	b.n	8007186 <UART_SetConfig+0x228e>
 8007170:	f241 5355 	movw	r3, #5461	; 0x1555
 8007174:	e007      	b.n	8007186 <UART_SetConfig+0x228e>
 8007176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800717a:	e004      	b.n	8007186 <UART_SetConfig+0x228e>
 800717c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007180:	e001      	b.n	8007186 <UART_SetConfig+0x228e>
 8007182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6852      	ldr	r2, [r2, #4]
 800718a:	0852      	lsrs	r2, r2, #1
 800718c:	441a      	add	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	fbb2 f3f3 	udiv	r3, r2, r3
 8007196:	b29b      	uxth	r3, r3
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800719a:	e003      	b.n	80071a4 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80071a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d908      	bls.n	80071bc <UART_SetConfig+0x22c4>
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b0:	d204      	bcs.n	80071bc <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	e002      	b.n	80071c2 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80071de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3738      	adds	r7, #56	; 0x38
 80071e6:	46bd      	mov	sp, r7
 80071e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080071ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01a      	beq.n	8007302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ea:	d10a      	bne.n	8007302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007340:	f7f9 f9cc 	bl	80006dc <HAL_GetTick>
 8007344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d10e      	bne.n	8007372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f82c 	bl	80073c0 <UART_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e022      	b.n	80073b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b04      	cmp	r3, #4
 800737e:	d10e      	bne.n	800739e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f816 	bl	80073c0 <UART_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e00c      	b.n	80073b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d0:	e02c      	b.n	800742c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d028      	beq.n	800742c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073da:	f7f9 f97f 	bl	80006dc <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d302      	bcc.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d11d      	bne.n	800742c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e00f      	b.n	800744c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69da      	ldr	r2, [r3, #28]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4013      	ands	r3, r2
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	429a      	cmp	r2, r3
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	429a      	cmp	r2, r3
 8007448:	d0c3      	beq.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_UARTEx_DisableFifoMode+0x16>
 8007466:	2302      	movs	r3, #2
 8007468:	e027      	b.n	80074ba <HAL_UARTEx_DisableFifoMode+0x66>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	; 0x24
 8007476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074da:	2302      	movs	r3, #2
 80074dc:	e02d      	b.n	800753a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2224      	movs	r2, #36	; 0x24
 80074ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f850 	bl	80075c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007556:	2302      	movs	r3, #2
 8007558:	e02d      	b.n	80075b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2224      	movs	r2, #36	; 0x24
 8007566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f812 	bl	80075c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b089      	sub	sp, #36	; 0x24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80075c8:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <UARTEx_SetNbDataToProcess+0xc8>)
 80075ca:	f107 0314 	add.w	r3, r7, #20
 80075ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80075d6:	4a2d      	ldr	r2, [pc, #180]	; (800768c <UARTEx_SetNbDataToProcess+0xcc>)
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d108      	bne.n	80075fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075fc:	e03d      	b.n	800767a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075fe:	2308      	movs	r3, #8
 8007600:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007602:	2308      	movs	r3, #8
 8007604:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	0e5b      	lsrs	r3, r3, #25
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	0f5b      	lsrs	r3, r3, #29
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007626:	7fbb      	ldrb	r3, [r7, #30]
 8007628:	7f3a      	ldrb	r2, [r7, #28]
 800762a:	f107 0120 	add.w	r1, r7, #32
 800762e:	440a      	add	r2, r1
 8007630:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007634:	fb02 f303 	mul.w	r3, r2, r3
 8007638:	7f3a      	ldrb	r2, [r7, #28]
 800763a:	f107 0120 	add.w	r1, r7, #32
 800763e:	440a      	add	r2, r1
 8007640:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007644:	fb93 f3f2 	sdiv	r3, r3, r2
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007650:	7ffb      	ldrb	r3, [r7, #31]
 8007652:	7f7a      	ldrb	r2, [r7, #29]
 8007654:	f107 0120 	add.w	r1, r7, #32
 8007658:	440a      	add	r2, r1
 800765a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	7f7a      	ldrb	r2, [r7, #29]
 8007664:	f107 0120 	add.w	r1, r7, #32
 8007668:	440a      	add	r2, r1
 800766a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800766e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007672:	b29a      	uxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800767a:	bf00      	nop
 800767c:	3724      	adds	r7, #36	; 0x24
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	0800879c 	.word	0x0800879c
 800768c:	080087a4 	.word	0x080087a4

08007690 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007690:	b084      	sub	sp, #16
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	f107 001c 	add.w	r0, r7, #28
 800769e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d120      	bne.n	80076ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <USB_CoreInit+0xc0>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d105      	bne.n	80076de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa5a 	bl	8007b98 <USB_CoreReset>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]
 80076e8:	e01a      	b.n	8007720 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa4e 	bl	8007b98 <USB_CoreReset>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
 8007712:	e005      	b.n	8007720 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	2b01      	cmp	r3, #1
 8007724:	d10b      	bne.n	800773e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f043 0208 	orr.w	r2, r3, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f043 0220 	orr.w	r2, r3, #32
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800774a:	b004      	add	sp, #16
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	ffbdffbf 	.word	0xffbdffbf

08007754 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f023 0201 	bic.w	r2, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800778e:	78fb      	ldrb	r3, [r7, #3]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d106      	bne.n	80077a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
 80077a0:	e00b      	b.n	80077ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]
 80077b4:	e001      	b.n	80077ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e003      	b.n	80077c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80077ba:	2032      	movs	r0, #50	; 0x32
 80077bc:	f7f8 ff9a 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077cc:	b084      	sub	sp, #16
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e009      	b.n	8007800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	3340      	adds	r3, #64	; 0x40
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	2200      	movs	r2, #0
 80077f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3301      	adds	r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b0e      	cmp	r3, #14
 8007804:	d9f2      	bls.n	80077ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d112      	bne.n	8007832 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e005      	b.n	800783e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007844:	461a      	mov	r2, r3
 8007846:	2300      	movs	r3, #0
 8007848:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007850:	4619      	mov	r1, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007858:	461a      	mov	r2, r3
 800785a:	680b      	ldr	r3, [r1, #0]
 800785c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	2b01      	cmp	r3, #1
 8007862:	d10c      	bne.n	800787e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800786a:	2100      	movs	r1, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f961 	bl	8007b34 <USB_SetDevSpeed>
 8007872:	e008      	b.n	8007886 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007874:	2101      	movs	r1, #1
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f95c 	bl	8007b34 <USB_SetDevSpeed>
 800787c:	e003      	b.n	8007886 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800787e:	2103      	movs	r1, #3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f957 	bl	8007b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007886:	2110      	movs	r1, #16
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f90b 	bl	8007aa4 <USB_FlushTxFifo>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f929 	bl	8007af0 <USB_FlushRxFifo>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	461a      	mov	r2, r3
 80078bc:	2300      	movs	r3, #0
 80078be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	461a      	mov	r2, r3
 80078c8:	2300      	movs	r3, #0
 80078ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	e043      	b.n	800795a <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078e8:	d118      	bne.n	800791c <USB_DevInit+0x150>
    {
      if (i == 0U)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	461a      	mov	r2, r3
 80078fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	e013      	b.n	800792e <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007912:	461a      	mov	r2, r3
 8007914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	e008      	b.n	800792e <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	461a      	mov	r2, r3
 800792a:	2300      	movs	r3, #0
 800792c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793a:	461a      	mov	r2, r3
 800793c:	2300      	movs	r3, #0
 800793e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	461a      	mov	r2, r3
 800794e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3301      	adds	r3, #1
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	429a      	cmp	r2, r3
 8007960:	d3b7      	bcc.n	80078d2 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007962:	2300      	movs	r3, #0
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	e043      	b.n	80079f0 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800797e:	d118      	bne.n	80079b2 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	461a      	mov	r2, r3
 8007994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e013      	b.n	80079c4 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	461a      	mov	r2, r3
 80079aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e008      	b.n	80079c4 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	461a      	mov	r2, r3
 80079c0:	2300      	movs	r3, #0
 80079c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	461a      	mov	r2, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	461a      	mov	r2, r3
 80079e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3301      	adds	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d3b7      	bcc.n	8007968 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d110      	bne.n	8007a34 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <USB_DevInit+0x2c8>)
 8007a1c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <USB_DevInit+0x2cc>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f043 0210 	orr.w	r2, r3, #16
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699a      	ldr	r2, [r3, #24]
 8007a58:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <USB_DevInit+0x2d0>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f043 0208 	orr.w	r2, r3, #8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d105      	bne.n	8007a84 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699a      	ldr	r2, [r3, #24]
 8007a7c:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <USB_DevInit+0x2d4>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a90:	b004      	add	sp, #16
 8007a92:	4770      	bx	lr
 8007a94:	00800100 	.word	0x00800100
 8007a98:	00010003 	.word	0x00010003
 8007a9c:	803c3800 	.word	0x803c3800
 8007aa0:	40000004 	.word	0x40000004

08007aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	019b      	lsls	r3, r3, #6
 8007ab6:	f043 0220 	orr.w	r2, r3, #32
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4a09      	ldr	r2, [pc, #36]	; (8007aec <USB_FlushTxFifo+0x48>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d901      	bls.n	8007ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e006      	b.n	8007ade <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d0f0      	beq.n	8007abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	00030d40 	.word	0x00030d40

08007af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2210      	movs	r2, #16
 8007b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <USB_FlushRxFifo+0x40>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d901      	bls.n	8007b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e006      	b.n	8007b22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d0f0      	beq.n	8007b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	00030d40 	.word	0x00030d40

08007b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b54:	4313      	orrs	r3, r2
 8007b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b80:	f043 0302 	orr.w	r3, r3, #2
 8007b84:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b86:	2003      	movs	r0, #3
 8007b88:	f7f8 fdb4 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <USB_CoreReset+0x64>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d901      	bls.n	8007bb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e01b      	b.n	8007bee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	daf2      	bge.n	8007ba4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f043 0201 	orr.w	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <USB_CoreReset+0x64>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d901      	bls.n	8007be0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e006      	b.n	8007bee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d0f0      	beq.n	8007bce <USB_CoreReset+0x36>

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	00030d40 	.word	0x00030d40

08007c00 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c08:	4a1d      	ldr	r2, [pc, #116]	; (8007c80 <MX_ETH_Init+0x80>)
 8007c0a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8007c10:	2380      	movs	r3, #128	; 0x80
 8007c12:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8007c14:	23e1      	movs	r3, #225	; 0xe1
 8007c16:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8007c20:	2300      	movs	r3, #0
 8007c22:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c26:	463b      	mov	r3, r7
 8007c28:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007c2a:	4b14      	ldr	r3, [pc, #80]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007c30:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c32:	4a14      	ldr	r2, [pc, #80]	; (8007c84 <MX_ETH_Init+0x84>)
 8007c34:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c38:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <MX_ETH_Init+0x88>)
 8007c3a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c42:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8007c44:	480d      	ldr	r0, [pc, #52]	; (8007c7c <MX_ETH_Init+0x7c>)
 8007c46:	f7f8 fea7 	bl	8000998 <HAL_ETH_Init>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <MX_ETH_Init+0x54>
  {
    Error_Handler();
 8007c50:	f000 fa86 	bl	8008160 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007c54:	2234      	movs	r2, #52	; 0x34
 8007c56:	2100      	movs	r1, #0
 8007c58:	480c      	ldr	r0, [pc, #48]	; (8007c8c <MX_ETH_Init+0x8c>)
 8007c5a:	f000 fd8b 	bl	8008774 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <MX_ETH_Init+0x8c>)
 8007c60:	2221      	movs	r2, #33	; 0x21
 8007c62:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <MX_ETH_Init+0x8c>)
 8007c66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007c6a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007c6c:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <MX_ETH_Init+0x8c>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	611a      	str	r2, [r3, #16]

}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	240000f0 	.word	0x240000f0
 8007c80:	40028000 	.word	0x40028000
 8007c84:	24000070 	.word	0x24000070
 8007c88:	24000010 	.word	0x24000010
 8007c8c:	24000160 	.word	0x24000160

08007c90 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08e      	sub	sp, #56	; 0x38
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a59      	ldr	r2, [pc, #356]	; (8007e14 <HAL_ETH_MspInit+0x184>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	f040 80ab 	bne.w	8007e0a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007cb4:	4b58      	ldr	r3, [pc, #352]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cba:	4a57      	ldr	r2, [pc, #348]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007cc4:	4b54      	ldr	r3, [pc, #336]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cce:	623b      	str	r3, [r7, #32]
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007cd2:	4b51      	ldr	r3, [pc, #324]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cd8:	4a4f      	ldr	r2, [pc, #316]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007ce2:	4b4d      	ldr	r3, [pc, #308]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007cf0:	4b49      	ldr	r3, [pc, #292]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cf6:	4a48      	ldr	r2, [pc, #288]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007d00:	4b45      	ldr	r3, [pc, #276]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d0e:	4b42      	ldr	r3, [pc, #264]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d14:	4a40      	ldr	r2, [pc, #256]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d16:	f043 0304 	orr.w	r3, r3, #4
 8007d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d1e:	4b3e      	ldr	r3, [pc, #248]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d2c:	4b3a      	ldr	r3, [pc, #232]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d32:	4a39      	ldr	r2, [pc, #228]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d34:	f043 0301 	orr.w	r3, r3, #1
 8007d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d3c:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d4a:	4b33      	ldr	r3, [pc, #204]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d50:	4a31      	ldr	r2, [pc, #196]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d52:	f043 0302 	orr.w	r3, r3, #2
 8007d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d68:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d78:	4b27      	ldr	r3, [pc, #156]	; (8007e18 <HAL_ETH_MspInit+0x188>)
 8007d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007d86:	2332      	movs	r3, #50	; 0x32
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d92:	2300      	movs	r3, #0
 8007d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d96:	230b      	movs	r3, #11
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d9e:	4619      	mov	r1, r3
 8007da0:	481e      	ldr	r0, [pc, #120]	; (8007e1c <HAL_ETH_MspInit+0x18c>)
 8007da2:	f7f9 fa0f 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007da6:	2386      	movs	r3, #134	; 0x86
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007daa:	2302      	movs	r3, #2
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007db2:	2300      	movs	r3, #0
 8007db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007db6:	230b      	movs	r3, #11
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4817      	ldr	r0, [pc, #92]	; (8007e20 <HAL_ETH_MspInit+0x190>)
 8007dc2:	f7f9 f9ff 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007dd8:	230b      	movs	r3, #11
 8007dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de0:	4619      	mov	r1, r3
 8007de2:	4810      	ldr	r0, [pc, #64]	; (8007e24 <HAL_ETH_MspInit+0x194>)
 8007de4:	f7f9 f9ee 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007de8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dee:	2302      	movs	r3, #2
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df6:	2300      	movs	r3, #0
 8007df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007dfa:	230b      	movs	r3, #11
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e02:	4619      	mov	r1, r3
 8007e04:	4808      	ldr	r0, [pc, #32]	; (8007e28 <HAL_ETH_MspInit+0x198>)
 8007e06:	f7f9 f9dd 	bl	80011c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3738      	adds	r7, #56	; 0x38
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40028000 	.word	0x40028000
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	58020800 	.word	0x58020800
 8007e20:	58020000 	.word	0x58020000
 8007e24:	58020400 	.word	0x58020400
 8007e28:	58021800 	.word	0x58021800

08007e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08c      	sub	sp, #48	; 0x30
 8007e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e32:	f107 031c 	add.w	r3, r7, #28
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	605a      	str	r2, [r3, #4]
 8007e3c:	609a      	str	r2, [r3, #8]
 8007e3e:	60da      	str	r2, [r3, #12]
 8007e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e42:	4b4f      	ldr	r3, [pc, #316]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e48:	4a4d      	ldr	r2, [pc, #308]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e4a:	f043 0304 	orr.w	r3, r3, #4
 8007e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e52:	4b4b      	ldr	r3, [pc, #300]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007e60:	4b47      	ldr	r3, [pc, #284]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e66:	4a46      	ldr	r2, [pc, #280]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e70:	4b43      	ldr	r3, [pc, #268]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e7e:	4b40      	ldr	r3, [pc, #256]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e84:	4a3e      	ldr	r2, [pc, #248]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e8e:	4b3c      	ldr	r3, [pc, #240]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e9c:	4b38      	ldr	r3, [pc, #224]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ea2:	4a37      	ldr	r2, [pc, #220]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007ea4:	f043 0302 	orr.w	r3, r3, #2
 8007ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007eac:	4b34      	ldr	r3, [pc, #208]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007eba:	4b31      	ldr	r3, [pc, #196]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ec0:	4a2f      	ldr	r2, [pc, #188]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007ec2:	f043 0308 	orr.w	r3, r3, #8
 8007ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007eca:	4b2d      	ldr	r3, [pc, #180]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ed8:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ede:	4a28      	ldr	r2, [pc, #160]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ee8:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <MX_GPIO_Init+0x154>)
 8007eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8007efc:	4821      	ldr	r0, [pc, #132]	; (8007f84 <MX_GPIO_Init+0x158>)
 8007efe:	f7f9 fb11 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8007f02:	2200      	movs	r2, #0
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	4820      	ldr	r0, [pc, #128]	; (8007f88 <MX_GPIO_Init+0x15c>)
 8007f08:	f7f9 fb0c 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007f12:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <MX_GPIO_Init+0x160>)
 8007f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007f1a:	f107 031c 	add.w	r3, r7, #28
 8007f1e:	4619      	mov	r1, r3
 8007f20:	481b      	ldr	r0, [pc, #108]	; (8007f90 <MX_GPIO_Init+0x164>)
 8007f22:	f7f9 f94f 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8007f26:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8007f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f38:	f107 031c 	add.w	r3, r7, #28
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4811      	ldr	r0, [pc, #68]	; (8007f84 <MX_GPIO_Init+0x158>)
 8007f40:	f7f9 f940 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8007f44:	2340      	movs	r3, #64	; 0x40
 8007f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f50:	2300      	movs	r3, #0
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007f54:	f107 031c 	add.w	r3, r7, #28
 8007f58:	4619      	mov	r1, r3
 8007f5a:	480b      	ldr	r0, [pc, #44]	; (8007f88 <MX_GPIO_Init+0x15c>)
 8007f5c:	f7f9 f932 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f64:	2300      	movs	r3, #0
 8007f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007f6c:	f107 031c 	add.w	r3, r7, #28
 8007f70:	4619      	mov	r1, r3
 8007f72:	4805      	ldr	r0, [pc, #20]	; (8007f88 <MX_GPIO_Init+0x15c>)
 8007f74:	f7f9 f926 	bl	80011c4 <HAL_GPIO_Init>

}
 8007f78:	bf00      	nop
 8007f7a:	3730      	adds	r7, #48	; 0x30
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	58024400 	.word	0x58024400
 8007f84:	58020400 	.word	0x58020400
 8007f88:	58021800 	.word	0x58021800
 8007f8c:	11110000 	.word	0x11110000
 8007f90:	58020800 	.word	0x58020800

08007f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f9a:	f7f8 fb1d 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f9e:	f000 f825 	bl	8007fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fa2:	f7ff ff43 	bl	8007e2c <MX_GPIO_Init>
  MX_ETH_Init();
 8007fa6:	f7ff fe2b 	bl	8007c00 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8007faa:	f000 fa75 	bl	8008498 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007fae:	f000 fb09 	bl	80085c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8007fb2:	f000 f991 	bl	80082d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start the PWM.
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	480b      	ldr	r0, [pc, #44]	; (8007fe8 <main+0x54>)
 8007fba:	f7fb feed 	bl	8003d98 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int i=180;
 8007fbe:	23b4      	movs	r3, #180	; 0xb4
 8007fc0:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */
	 for(i=180;i<270;i++)
 8007fc2:	23b4      	movs	r3, #180	; 0xb4
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	e009      	b.n	8007fdc <main+0x48>
	 {
		 htim2.Instance->CCR1 = i; //0 degree at Duty cycle 1ms.
 8007fc8:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <main+0x54>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	635a      	str	r2, [r3, #52]	; 0x34
		 HAL_Delay(200);
 8007fd0:	20c8      	movs	r0, #200	; 0xc8
 8007fd2:	f7f8 fb8f 	bl	80006f4 <HAL_Delay>
	 for(i=180;i<270;i++)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007fe2:	dbf1      	blt.n	8007fc8 <main+0x34>
  {
 8007fe4:	e7eb      	b.n	8007fbe <main+0x2a>
 8007fe6:	bf00      	nop
 8007fe8:	24000194 	.word	0x24000194

08007fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b0cc      	sub	sp, #304	; 0x130
 8007ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007ff6:	224c      	movs	r2, #76	; 0x4c
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fbba 	bl	8008774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008000:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008004:	2220      	movs	r2, #32
 8008006:	2100      	movs	r1, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fbb3 	bl	8008774 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	4618      	mov	r0, r3
 8008014:	23bc      	movs	r3, #188	; 0xbc
 8008016:	461a      	mov	r2, r3
 8008018:	2100      	movs	r1, #0
 800801a:	f000 fbab 	bl	8008774 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800801e:	2002      	movs	r0, #2
 8008020:	f7f9 fbe2 	bl	80017e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008024:	1d3b      	adds	r3, r7, #4
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	4b4a      	ldr	r3, [pc, #296]	; (8008154 <SystemClock_Config+0x168>)
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	4a49      	ldr	r2, [pc, #292]	; (8008154 <SystemClock_Config+0x168>)
 8008030:	f023 0301 	bic.w	r3, r3, #1
 8008034:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008036:	4b47      	ldr	r3, [pc, #284]	; (8008154 <SystemClock_Config+0x168>)
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	f003 0201 	and.w	r2, r3, #1
 800803e:	1d3b      	adds	r3, r7, #4
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	4b45      	ldr	r3, [pc, #276]	; (8008158 <SystemClock_Config+0x16c>)
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	4a44      	ldr	r2, [pc, #272]	; (8008158 <SystemClock_Config+0x16c>)
 8008048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800804c:	6193      	str	r3, [r2, #24]
 800804e:	4b42      	ldr	r3, [pc, #264]	; (8008158 <SystemClock_Config+0x16c>)
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800805e:	bf00      	nop
 8008060:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <SystemClock_Config+0x16c>)
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806c:	d1f8      	bne.n	8008060 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800806e:	2301      	movs	r3, #1
 8008070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800807c:	2302      	movs	r3, #2
 800807e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008082:	2302      	movs	r3, #2
 8008084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008088:	2301      	movs	r3, #1
 800808a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 90;
 800808e:	235a      	movs	r3, #90	; 0x5a
 8008090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8008094:	2302      	movs	r3, #2
 8008096:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 15;
 800809a:	230f      	movs	r3, #15
 800809c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80080a0:	2302      	movs	r3, #2
 80080a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80080a6:	230c      	movs	r3, #12
 80080a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f9 fbdb 	bl	8001878 <HAL_RCC_OscConfig>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80080c8:	f000 f84a 	bl	8008160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080cc:	233f      	movs	r3, #63	; 0x3f
 80080ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080d2:	2303      	movs	r3, #3
 80080d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80080d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80080e0:	2300      	movs	r3, #0
 80080e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80080e6:	2340      	movs	r3, #64	; 0x40
 80080e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80080f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008104:	2102      	movs	r1, #2
 8008106:	4618      	mov	r0, r3
 8008108:	f7f9 ff6e 	bl	8001fe8 <HAL_RCC_ClockConfig>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8008112:	f000 f825 	bl	8008160 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4a10      	ldr	r2, [pc, #64]	; (800815c <SystemClock_Config+0x170>)
 800811c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800811e:	f107 0308 	add.w	r3, r7, #8
 8008122:	2200      	movs	r2, #0
 8008124:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8008126:	f107 0308 	add.w	r3, r7, #8
 800812a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800812e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008132:	f107 0308 	add.w	r3, r7, #8
 8008136:	4618      	mov	r0, r3
 8008138:	f7fa fab0 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8008142:	f000 f80d 	bl	8008160 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008146:	f7f9 fb87 	bl	8001858 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800814a:	bf00      	nop
 800814c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	58000400 	.word	0x58000400
 8008158:	58024800 	.word	0x58024800
 800815c:	00040002 	.word	0x00040002

08008160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008176:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <HAL_MspInit+0x30>)
 8008178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800817c:	4a08      	ldr	r2, [pc, #32]	; (80081a0 <HAL_MspInit+0x30>)
 800817e:	f043 0302 	orr.w	r3, r3, #2
 8008182:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008186:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <HAL_MspInit+0x30>)
 8008188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	58024400 	.word	0x58024400

080081a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081a8:	bf00      	nop
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081b6:	e7fe      	b.n	80081b6 <HardFault_Handler+0x4>

080081b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081bc:	e7fe      	b.n	80081bc <MemManage_Handler+0x4>

080081be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081be:	b480      	push	{r7}
 80081c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081c2:	e7fe      	b.n	80081c2 <BusFault_Handler+0x4>

080081c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081c8:	e7fe      	b.n	80081c8 <UsageFault_Handler+0x4>

080081ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081ca:	b480      	push	{r7}
 80081cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081ce:	bf00      	nop
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081dc:	bf00      	nop
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081e6:	b480      	push	{r7}
 80081e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ea:	bf00      	nop
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081f8:	f7f8 fa5c 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081fc:	bf00      	nop
 80081fe:	bd80      	pop	{r7, pc}

08008200 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008204:	4802      	ldr	r0, [pc, #8]	; (8008210 <TIM2_IRQHandler+0x10>)
 8008206:	f7fb fe1f 	bl	8003e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800820a:	bf00      	nop
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	24000194 	.word	0x24000194

08008214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008218:	4b29      	ldr	r3, [pc, #164]	; (80082c0 <SystemInit+0xac>)
 800821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821e:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <SystemInit+0xac>)
 8008220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008228:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <SystemInit+0xb0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a25      	ldr	r2, [pc, #148]	; (80082c4 <SystemInit+0xb0>)
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008234:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <SystemInit+0xb0>)
 8008236:	2200      	movs	r2, #0
 8008238:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800823a:	4b22      	ldr	r3, [pc, #136]	; (80082c4 <SystemInit+0xb0>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4921      	ldr	r1, [pc, #132]	; (80082c4 <SystemInit+0xb0>)
 8008240:	4b21      	ldr	r3, [pc, #132]	; (80082c8 <SystemInit+0xb4>)
 8008242:	4013      	ands	r3, r2
 8008244:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008246:	4b1f      	ldr	r3, [pc, #124]	; (80082c4 <SystemInit+0xb0>)
 8008248:	2200      	movs	r2, #0
 800824a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800824c:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <SystemInit+0xb0>)
 800824e:	2200      	movs	r2, #0
 8008250:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <SystemInit+0xb0>)
 8008254:	2200      	movs	r2, #0
 8008256:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <SystemInit+0xb0>)
 800825a:	2200      	movs	r2, #0
 800825c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <SystemInit+0xb0>)
 8008260:	2200      	movs	r2, #0
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8008264:	4b17      	ldr	r3, [pc, #92]	; (80082c4 <SystemInit+0xb0>)
 8008266:	2200      	movs	r2, #0
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800826a:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <SystemInit+0xb0>)
 800826c:	2200      	movs	r2, #0
 800826e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8008270:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <SystemInit+0xb0>)
 8008272:	2200      	movs	r2, #0
 8008274:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008276:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <SystemInit+0xb0>)
 8008278:	2200      	movs	r2, #0
 800827a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800827c:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <SystemInit+0xb0>)
 800827e:	2200      	movs	r2, #0
 8008280:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008282:	4b10      	ldr	r3, [pc, #64]	; (80082c4 <SystemInit+0xb0>)
 8008284:	2200      	movs	r2, #0
 8008286:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008288:	4b0e      	ldr	r3, [pc, #56]	; (80082c4 <SystemInit+0xb0>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a0d      	ldr	r2, [pc, #52]	; (80082c4 <SystemInit+0xb0>)
 800828e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008292:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008294:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <SystemInit+0xb0>)
 8008296:	2200      	movs	r2, #0
 8008298:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <SystemInit+0xb8>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <SystemInit+0xbc>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a6:	d202      	bcs.n	80082ae <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <SystemInit+0xc0>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80082ae:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <SystemInit+0xac>)
 80082b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80082b6:	bf00      	nop
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	e000ed00 	.word	0xe000ed00
 80082c4:	58024400 	.word	0x58024400
 80082c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80082cc:	5c001000 	.word	0x5c001000
 80082d0:	ffff0000 	.word	0xffff0000
 80082d4:	51008108 	.word	0x51008108

080082d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	; 0x38
 80082dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	605a      	str	r2, [r3, #4]
 80082e8:	609a      	str	r2, [r3, #8]
 80082ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082ec:	f107 031c 	add.w	r3, r7, #28
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082f8:	463b      	mov	r3, r7
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	605a      	str	r2, [r3, #4]
 8008300:	609a      	str	r2, [r3, #8]
 8008302:	60da      	str	r2, [r3, #12]
 8008304:	611a      	str	r2, [r3, #16]
 8008306:	615a      	str	r2, [r3, #20]
 8008308:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800830a:	4b33      	ldr	r3, [pc, #204]	; (80083d8 <MX_TIM2_Init+0x100>)
 800830c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8008312:	4b31      	ldr	r3, [pc, #196]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800831a:	4b2f      	ldr	r3, [pc, #188]	; (80083d8 <MX_TIM2_Init+0x100>)
 800831c:	2200      	movs	r2, #0
 800831e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600-1;
 8008320:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008322:	f640 620f 	movw	r2, #3599	; 0xe0f
 8008326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008328:	4b2b      	ldr	r3, [pc, #172]	; (80083d8 <MX_TIM2_Init+0x100>)
 800832a:	2200      	movs	r2, #0
 800832c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800832e:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008330:	2200      	movs	r2, #0
 8008332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008334:	4828      	ldr	r0, [pc, #160]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008336:	f7fb fccf 	bl	8003cd8 <HAL_TIM_Base_Init>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8008340:	f7ff ff0e 	bl	8008160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800834a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800834e:	4619      	mov	r1, r3
 8008350:	4821      	ldr	r0, [pc, #132]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008352:	f7fb ffb1 	bl	80042b8 <HAL_TIM_ConfigClockSource>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800835c:	f7ff ff00 	bl	8008160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008360:	481d      	ldr	r0, [pc, #116]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008362:	f7fb fce4 	bl	8003d2e <HAL_TIM_PWM_Init>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800836c:	f7ff fef8 	bl	8008160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008370:	2300      	movs	r3, #0
 8008372:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008374:	2300      	movs	r3, #0
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008378:	f107 031c 	add.w	r3, r7, #28
 800837c:	4619      	mov	r1, r3
 800837e:	4816      	ldr	r0, [pc, #88]	; (80083d8 <MX_TIM2_Init+0x100>)
 8008380:	f7fc fcc8 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800838a:	f7ff fee9 	bl	8008160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800838e:	2360      	movs	r3, #96	; 0x60
 8008390:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008396:	2300      	movs	r3, #0
 8008398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800839e:	463b      	mov	r3, r7
 80083a0:	2200      	movs	r2, #0
 80083a2:	4619      	mov	r1, r3
 80083a4:	480c      	ldr	r0, [pc, #48]	; (80083d8 <MX_TIM2_Init+0x100>)
 80083a6:	f7fb fe6f 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80083b0:	f7ff fed6 	bl	8008160 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_ETR_COMP1_OUT) != HAL_OK)
 80083b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80083b8:	4807      	ldr	r0, [pc, #28]	; (80083d8 <MX_TIM2_Init+0x100>)
 80083ba:	f7fc fd07 	bl	8004dcc <HAL_TIMEx_RemapConfig>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80083c4:	f7ff fecc 	bl	8008160 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80083c8:	4803      	ldr	r0, [pc, #12]	; (80083d8 <MX_TIM2_Init+0x100>)
 80083ca:	f000 f82d 	bl	8008428 <HAL_TIM_MspPostInit>

}
 80083ce:	bf00      	nop
 80083d0:	3738      	adds	r7, #56	; 0x38
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	24000194 	.word	0x24000194

080083dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ec:	d116      	bne.n	800841c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <HAL_TIM_Base_MspInit+0x48>)
 80083f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083f4:	4a0b      	ldr	r2, [pc, #44]	; (8008424 <HAL_TIM_Base_MspInit+0x48>)
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <HAL_TIM_Base_MspInit+0x48>)
 8008400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800840c:	2200      	movs	r2, #0
 800840e:	2100      	movs	r1, #0
 8008410:	201c      	movs	r0, #28
 8008412:	f7f8 fa8c 	bl	800092e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008416:	201c      	movs	r0, #28
 8008418:	f7f8 faa3 	bl	8000962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	58024400 	.word	0x58024400

08008428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008430:	f107 030c 	add.w	r3, r7, #12
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008448:	d11e      	bne.n	8008488 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <HAL_TIM_MspPostInit+0x68>)
 800844c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008450:	4a0f      	ldr	r2, [pc, #60]	; (8008490 <HAL_TIM_MspPostInit+0x68>)
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800845a:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <HAL_TIM_MspPostInit+0x68>)
 800845c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	60bb      	str	r3, [r7, #8]
 8008466:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008468:	2301      	movs	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800846c:	2302      	movs	r3, #2
 800846e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008474:	2300      	movs	r3, #0
 8008476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008478:	2301      	movs	r3, #1
 800847a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800847c:	f107 030c 	add.w	r3, r7, #12
 8008480:	4619      	mov	r1, r3
 8008482:	4804      	ldr	r0, [pc, #16]	; (8008494 <HAL_TIM_MspPostInit+0x6c>)
 8008484:	f7f8 fe9e 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8008488:	bf00      	nop
 800848a:	3720      	adds	r7, #32
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	58024400 	.word	0x58024400
 8008494:	58020000 	.word	0x58020000

08008498 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800849c:	4b22      	ldr	r3, [pc, #136]	; (8008528 <MX_USART3_UART_Init+0x90>)
 800849e:	4a23      	ldr	r2, [pc, #140]	; (800852c <MX_USART3_UART_Init+0x94>)
 80084a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80084a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80084b6:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80084bc:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084be:	220c      	movs	r2, #12
 80084c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084c2:	4b19      	ldr	r3, [pc, #100]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80084ce:	4b16      	ldr	r3, [pc, #88]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80084d4:	4b14      	ldr	r3, [pc, #80]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084dc:	2200      	movs	r2, #0
 80084de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80084e0:	4811      	ldr	r0, [pc, #68]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084e2:	f7fc fcb6 	bl	8004e52 <HAL_UART_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80084ec:	f7ff fe38 	bl	8008160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084f0:	2100      	movs	r1, #0
 80084f2:	480d      	ldr	r0, [pc, #52]	; (8008528 <MX_USART3_UART_Init+0x90>)
 80084f4:	f7fe ffe7 	bl	80074c6 <HAL_UARTEx_SetTxFifoThreshold>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80084fe:	f7ff fe2f 	bl	8008160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008502:	2100      	movs	r1, #0
 8008504:	4808      	ldr	r0, [pc, #32]	; (8008528 <MX_USART3_UART_Init+0x90>)
 8008506:	f7ff f81c 	bl	8007542 <HAL_UARTEx_SetRxFifoThreshold>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008510:	f7ff fe26 	bl	8008160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008514:	4804      	ldr	r0, [pc, #16]	; (8008528 <MX_USART3_UART_Init+0x90>)
 8008516:	f7fe ff9d 	bl	8007454 <HAL_UARTEx_DisableFifoMode>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008520:	f7ff fe1e 	bl	8008160 <Error_Handler>
  }

}
 8008524:	bf00      	nop
 8008526:	bd80      	pop	{r7, pc}
 8008528:	240001d4 	.word	0x240001d4
 800852c:	40004800 	.word	0x40004800

08008530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	; 0x28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008538:	f107 0314 	add.w	r3, r7, #20
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	60da      	str	r2, [r3, #12]
 8008546:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1a      	ldr	r2, [pc, #104]	; (80085b8 <HAL_UART_MspInit+0x88>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d12e      	bne.n	80085b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008552:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <HAL_UART_MspInit+0x8c>)
 8008554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008558:	4a18      	ldr	r2, [pc, #96]	; (80085bc <HAL_UART_MspInit+0x8c>)
 800855a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800855e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008562:	4b16      	ldr	r3, [pc, #88]	; (80085bc <HAL_UART_MspInit+0x8c>)
 8008564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <HAL_UART_MspInit+0x8c>)
 8008572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <HAL_UART_MspInit+0x8c>)
 8008578:	f043 0308 	orr.w	r3, r3, #8
 800857c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008580:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <HAL_UART_MspInit+0x8c>)
 8008582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800858e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008594:	2302      	movs	r3, #2
 8008596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008598:	2300      	movs	r3, #0
 800859a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800859c:	2300      	movs	r3, #0
 800859e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80085a0:	2307      	movs	r3, #7
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	4619      	mov	r1, r3
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <HAL_UART_MspInit+0x90>)
 80085ac:	f7f8 fe0a 	bl	80011c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80085b0:	bf00      	nop
 80085b2:	3728      	adds	r7, #40	; 0x28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40004800 	.word	0x40004800
 80085bc:	58024400 	.word	0x58024400
 80085c0:	58020c00 	.word	0x58020c00

080085c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085c8:	4b15      	ldr	r3, [pc, #84]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085ca:	4a16      	ldr	r2, [pc, #88]	; (8008624 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80085cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80085ce:	4b14      	ldr	r3, [pc, #80]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085d0:	2209      	movs	r2, #9
 80085d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085d4:	4b12      	ldr	r3, [pc, #72]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085d6:	2202      	movs	r2, #2
 80085d8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085dc:	2200      	movs	r2, #0
 80085de:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80085e0:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085e2:	2202      	movs	r2, #2
 80085e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80085e6:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80085ec:	4b0c      	ldr	r3, [pc, #48]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80085fa:	2201      	movs	r2, #1
 80085fc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80085fe:	4b08      	ldr	r3, [pc, #32]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008600:	2201      	movs	r2, #1
 8008602:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800860a:	4805      	ldr	r0, [pc, #20]	; (8008620 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800860c:	f7f8 ffa3 	bl	8001556 <HAL_PCD_Init>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8008616:	f7ff fda3 	bl	8008160 <Error_Handler>
  }

}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	24000260 	.word	0x24000260
 8008624:	40080000 	.word	0x40080000

08008628 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	; 0x28
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008630:	f107 0314 	add.w	r3, r7, #20
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	609a      	str	r2, [r3, #8]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a21      	ldr	r2, [pc, #132]	; (80086cc <HAL_PCD_MspInit+0xa4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d13b      	bne.n	80086c2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800864a:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <HAL_PCD_MspInit+0xa8>)
 800864c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008650:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <HAL_PCD_MspInit+0xa8>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800865a:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <HAL_PCD_MspInit+0xa8>)
 800865c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008668:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800866c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800866e:	2302      	movs	r3, #2
 8008670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008672:	2300      	movs	r3, #0
 8008674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008676:	2300      	movs	r3, #0
 8008678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800867a:	230a      	movs	r3, #10
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	4619      	mov	r1, r3
 8008684:	4813      	ldr	r0, [pc, #76]	; (80086d4 <HAL_PCD_MspInit+0xac>)
 8008686:	f7f8 fd9d 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800868a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800868e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	4619      	mov	r1, r3
 800869e:	480d      	ldr	r0, [pc, #52]	; (80086d4 <HAL_PCD_MspInit+0xac>)
 80086a0:	f7f8 fd90 	bl	80011c4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086a4:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <HAL_PCD_MspInit+0xa8>)
 80086a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086aa:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <HAL_PCD_MspInit+0xa8>)
 80086ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <HAL_PCD_MspInit+0xa8>)
 80086b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086c2:	bf00      	nop
 80086c4:	3728      	adds	r7, #40	; 0x28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40080000 	.word	0x40080000
 80086d0:	58024400 	.word	0x58024400
 80086d4:	58020000 	.word	0x58020000

080086d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80086d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80086dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80086de:	e003      	b.n	80086e8 <LoopCopyDataInit>

080086e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80086e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80086e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80086e6:	3104      	adds	r1, #4

080086e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80086e8:	480b      	ldr	r0, [pc, #44]	; (8008718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80086ea:	4b0c      	ldr	r3, [pc, #48]	; (800871c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80086ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80086ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80086f0:	d3f6      	bcc.n	80086e0 <CopyDataInit>
  ldr  r2, =_sbss
 80086f2:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80086f4:	e002      	b.n	80086fc <LoopFillZerobss>

080086f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80086f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80086f8:	f842 3b04 	str.w	r3, [r2], #4

080086fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80086fc:	4b09      	ldr	r3, [pc, #36]	; (8008724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80086fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008700:	d3f9      	bcc.n	80086f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008702:	f7ff fd87 	bl	8008214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008706:	f000 f811 	bl	800872c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800870a:	f7ff fc43 	bl	8007f94 <main>
  bx  lr    
 800870e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008710:	2407ffff 	.word	0x2407ffff
  ldr  r3, =_sidata
 8008714:	080087cc 	.word	0x080087cc
  ldr  r0, =_sdata
 8008718:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800871c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8008720:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8008724:	24000668 	.word	0x24000668

08008728 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008728:	e7fe      	b.n	8008728 <ADC3_IRQHandler>
	...

0800872c <__libc_init_array>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	4e0d      	ldr	r6, [pc, #52]	; (8008764 <__libc_init_array+0x38>)
 8008730:	4c0d      	ldr	r4, [pc, #52]	; (8008768 <__libc_init_array+0x3c>)
 8008732:	1ba4      	subs	r4, r4, r6
 8008734:	10a4      	asrs	r4, r4, #2
 8008736:	2500      	movs	r5, #0
 8008738:	42a5      	cmp	r5, r4
 800873a:	d109      	bne.n	8008750 <__libc_init_array+0x24>
 800873c:	4e0b      	ldr	r6, [pc, #44]	; (800876c <__libc_init_array+0x40>)
 800873e:	4c0c      	ldr	r4, [pc, #48]	; (8008770 <__libc_init_array+0x44>)
 8008740:	f000 f820 	bl	8008784 <_init>
 8008744:	1ba4      	subs	r4, r4, r6
 8008746:	10a4      	asrs	r4, r4, #2
 8008748:	2500      	movs	r5, #0
 800874a:	42a5      	cmp	r5, r4
 800874c:	d105      	bne.n	800875a <__libc_init_array+0x2e>
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008754:	4798      	blx	r3
 8008756:	3501      	adds	r5, #1
 8008758:	e7ee      	b.n	8008738 <__libc_init_array+0xc>
 800875a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800875e:	4798      	blx	r3
 8008760:	3501      	adds	r5, #1
 8008762:	e7f2      	b.n	800874a <__libc_init_array+0x1e>
 8008764:	080087c4 	.word	0x080087c4
 8008768:	080087c4 	.word	0x080087c4
 800876c:	080087c4 	.word	0x080087c4
 8008770:	080087c8 	.word	0x080087c8

08008774 <memset>:
 8008774:	4402      	add	r2, r0
 8008776:	4603      	mov	r3, r0
 8008778:	4293      	cmp	r3, r2
 800877a:	d100      	bne.n	800877e <memset+0xa>
 800877c:	4770      	bx	lr
 800877e:	f803 1b01 	strb.w	r1, [r3], #1
 8008782:	e7f9      	b.n	8008778 <memset+0x4>

08008784 <_init>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	bf00      	nop
 8008788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878a:	bc08      	pop	{r3}
 800878c:	469e      	mov	lr, r3
 800878e:	4770      	bx	lr

08008790 <_fini>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr
